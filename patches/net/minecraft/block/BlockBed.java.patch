--- ../src-base/minecraft/net/minecraft/block/BlockBed.java
+++ ../src-work/minecraft/net/minecraft/block/BlockBed.java
@@ -1,7 +1,5 @@
 package net.minecraft.block;
 
-import java.util.Random;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
 import net.minecraft.block.material.Material;
@@ -14,20 +12,13 @@
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.init.Biomes;
 import net.minecraft.init.Items;
 import net.minecraft.item.EnumDyeColor;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemStack;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityBed;
-import net.minecraft.util.BlockRenderLayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.IStringSerializable;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
+import net.minecraft.util.*;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextComponentTranslation;
@@ -36,6 +27,9 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.Random;
+
 public class BlockBed extends BlockHorizontal implements ITileEntityProvider
 {
     public static final PropertyEnum<BlockBed.EnumPartType> PART = PropertyEnum.<BlockBed.EnumPartType>create("part", BlockBed.EnumPartType.class);
@@ -229,42 +223,57 @@
     }
 
     @Nullable
-    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int tries)
+    public static BlockPos getSafeExitLocation(World worldIn, BlockPos pos, int i)
     {
         EnumFacing enumfacing = (EnumFacing)worldIn.getBlockState(pos).getValue(FACING);
-        int i = pos.getX();
-        int j = pos.getY();
-        int k = pos.getZ();
-
-        for (int l = 0; l <= 1; ++l)
-        {
-            int i1 = i - enumfacing.getFrontOffsetX() * l - 1;
-            int j1 = k - enumfacing.getFrontOffsetZ() * l - 1;
-            int k1 = i1 + 2;
-            int l1 = j1 + 2;
-
-            for (int i2 = i1; i2 <= k1; ++i2)
-            {
-                for (int j2 = j1; j2 <= l1; ++j2)
-                {
-                    BlockPos blockpos = new BlockPos(i2, j, j2);
-
-                    if (hasRoomForPlayer(worldIn, blockpos))
-                    {
-                        if (tries <= 0)
-                        {
-                            return blockpos;
+        // Paper - replace whole method
+        int radius = worldIn.paperConfig.bedSearchRadius;
+        for (int r = 1; r <= radius; r++) {
+            int x = -r;
+            int z = r;
+            // Iterates the edge of half of the box; then negates for other half.
+            while (x <= r && z > -r) {
+                for (int y = -1; y <= 1; y++) {
+                    BlockPos pos1 = pos.add(x, y, z);
+                    if (isSafeRespawn(worldIn, pos1)) {
+                        if (i-- <= 0) {
+                            return pos1;
                         }
-
-                        --tries;
                     }
+                    pos1 = pos.add(-x, y, -z);
+                    if (isSafeRespawn(worldIn, pos1)) {
+                        if (i-- <= 0) {
+                            return pos1;
+                        }
+                    }
+                    pos1 = pos.add(enumfacing.getFrontOffsetX() + x, y, enumfacing.getFrontOffsetZ() + z);
+                    if (isSafeRespawn(worldIn, pos1)) {
+                        if (i-- <= 0) {
+                            return pos1;
+                        }
+                    }
+                    pos1 = pos.add(enumfacing.getFrontOffsetX() - x, y, enumfacing.getFrontOffsetZ() - z);
+                    if (isSafeRespawn(worldIn, pos1)) {
+                        if (i-- <= 0) {
+                            return pos1;
+                        }
+                     }
                 }
+                if (x < r) {
+                    x++;
+                } else {
+                    z--;
+                }
             }
         }
 
         return null;
     }
 
+    protected static boolean isSafeRespawn(World world, BlockPos blockposition) { // Paper - OBFHELPER + behavior improvement
+        return hasRoomForPlayer(world, blockposition) && world.getBlockState(blockposition.down()).getMaterial().isSolid(); // Paper - ensure solid block
+    }
+
     protected static boolean hasRoomForPlayer(World worldIn, BlockPos pos)
     {
         return worldIn.getBlockState(pos.down()).isTopSolid() && !worldIn.getBlockState(pos).getMaterial().isSolid() && !worldIn.getBlockState(pos.up()).getMaterial().isSolid();
