--- ../src-base/minecraft/net/minecraft/block/BlockDynamicLiquid.java
+++ ../src-work/minecraft/net/minecraft/block/BlockDynamicLiquid.java
@@ -1,15 +1,19 @@
 package net.minecraft.block;
 
-import java.util.EnumSet;
-import java.util.Random;
-import java.util.Set;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.init.Blocks;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.math.BlockPos;
+import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
+import org.bukkit.block.BlockFace;
+import org.bukkit.event.block.BlockFromToEvent;
 
+import java.util.EnumSet;
+import java.util.Random;
+import java.util.Set;
+
 public class BlockDynamicLiquid extends BlockLiquid
 {
     int adjacentSourceBlocks;
@@ -27,7 +31,7 @@
     public void updateTick(World worldIn, BlockPos pos, IBlockState state, Random rand)
     {
         if (!worldIn.isAreaLoaded(pos, this.getSlopeFindDistance(worldIn))) return; // Forge: avoid loading unloaded chunks
-        int i = ((Integer)state.getValue(LEVEL)).intValue();
+        int i = (state.getValue(LEVEL)).intValue();
         int j = 1;
 
         if (this.blockMaterial == Material.LAVA && !worldIn.provider.doesWaterVaporize())
@@ -35,7 +39,7 @@
             j = 2;
         }
 
-        int k = this.tickRate(worldIn);
+        int k = this.getFlowSpeed(worldIn, pos); // Paper
 
         if (i > 0)
         {
@@ -76,13 +80,13 @@
                 {
                     i1 = 0;
                 }
-                else if (iblockstate.getMaterial() == this.blockMaterial && ((Integer)iblockstate.getValue(LEVEL)).intValue() == 0)
+                else if (iblockstate.getMaterial() == this.blockMaterial && (iblockstate.getValue(LEVEL)).intValue() == 0)
                 {
                     i1 = 0;
                 }
             }
 
-            if (this.blockMaterial == Material.LAVA && i < 8 && i1 < 8 && i1 > i && rand.nextInt(4) != 0)
+            if (!worldIn.paperConfig.fastDrainLava && this.blockMaterial == Material.LAVA && i < 8 && i1 < 8 && i1 > i && rand.nextInt(4) != 0) // Paper
             {
                 k *= 4;
             }
@@ -95,7 +99,7 @@
             {
                 i = i1;
 
-                if (i1 < 0)
+                if (i1 < 0 || this.canFastDrain(worldIn, pos)) // Paper - Fast draining
                 {
                     worldIn.setBlockToAir(pos);
                 }
@@ -113,14 +117,25 @@
             this.placeStaticBlock(worldIn, pos, state);
         }
 
+        if (worldIn.getBlockState(pos).getBlock().getDefaultState().getMaterial() != blockMaterial) return; // Paper - Stop updating flowing block if material has changed
+        org.bukkit.block.Block source = worldIn.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
         IBlockState iblockstate1 = worldIn.getBlockState(pos.down());
 
         if (this.canFlowInto(worldIn, pos.down(), iblockstate1))
         {
+            // CraftBukkit start
+            if (!canFlowTo(worldIn, source, BlockFace.DOWN)) { return; } // Paper
+            BlockFromToEvent event = new BlockFromToEvent(source, BlockFace.DOWN);
+            worldIn.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                return;
+            }
             if (this.blockMaterial == Material.LAVA && worldIn.getBlockState(pos.down()).getMaterial() == Material.WATER)
             {
-                worldIn.setBlockState(pos.down(), net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(worldIn, pos.down(), pos, Blocks.STONE.getDefaultState()));
-                this.triggerMixEffects(worldIn, pos.down());
+                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(worldIn, pos.down(), net.minecraftforge.event.ForgeEventFactory.fireFluidPlaceBlockEvent(worldIn, pos.down(), pos, Blocks.STONE.getDefaultState()), null)) {
+                    this.triggerMixEffects(worldIn, pos.down());
+                }
                 return;
             }
 
@@ -150,14 +165,27 @@
 
             for (EnumFacing enumfacing1 : set)
             {
-                this.tryFlowInto(worldIn, pos.offset(enumfacing1), worldIn.getBlockState(pos.offset(enumfacing1)), k1);
+                // CraftBukkit start
+                if (!canFlowTo(worldIn, source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumfacing1))) { continue; } // Paper
+                BlockFromToEvent event = new BlockFromToEvent(source, org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(enumfacing1));
+                worldIn.getServer().getPluginManager().callEvent(event);
+
+                if (!event.isCancelled()) {
+                    this.tryFlowInto(worldIn, pos.offset(enumfacing1), worldIn.getBlockState(pos.offset(enumfacing1)), k1);
+                }
             }
         }
     }
 
+    // Paper start
+    private boolean canFlowTo(World world, org.bukkit.block.Block source, BlockFace face) {
+        return source.getWorld().isChunkLoaded((source.getX() + face.getModX()) >> 4, (source.getZ() + face.getModZ()) >> 4);
+    }
+    // Paper end
+
     private void tryFlowInto(World worldIn, BlockPos pos, IBlockState state, int level)
     {
-        if (this.canFlowInto(worldIn, pos, state))
+        if (this.canFlowInto(worldIn, pos, state)) // CraftBukkit - add isLoaded check // Paper - Already checked before we get here for isLoaded
         {
             if (state.getMaterial() != Material.AIR)
             {
@@ -303,7 +331,77 @@
     {
         if (!this.checkForMixing(worldIn, pos, state))
         {
-            worldIn.scheduleUpdate(pos, this, this.tickRate(worldIn));
+            worldIn.scheduleUpdate(pos, this, this.getFlowSpeed(worldIn, pos)); // Paper
         }
     }
+
+    /**
+     * Paper - Get flow speed. Throttle if its water and flowing adjacent to lava
+     */
+    public int getFlowSpeed(World world, BlockPos blockposition) {
+        if (this.blockMaterial == Material.LAVA) {
+            return world.provider.isSkyMissing() ? world.paperConfig.lavaFlowSpeedNether : world.paperConfig.lavaFlowSpeedNormal;
+        }
+        if (this.blockMaterial == Material.WATER && (
+                world.getBlockState(blockposition.north(1)).getBlock().blockMaterial == Material.LAVA ||
+                        world.getBlockState(blockposition.south(1)).getBlock().blockMaterial == Material.LAVA ||
+                        world.getBlockState(blockposition.west(1)).getBlock().blockMaterial == Material.LAVA ||
+                        world.getBlockState(blockposition.east(1)).getBlock().blockMaterial == Material.LAVA)) {
+            return world.paperConfig.waterOverLavaFlowSpeed;
+        }
+        return super.tickRate(world);
+    }
+
+    private int getFluidLevel(IBlockAccess iblockaccess, BlockPos blockposition) {
+        return iblockaccess.getBlockState(blockposition).getMaterial() == this.blockMaterial ? iblockaccess.getBlockState(blockposition).getValue(BlockLiquid.LEVEL) : -1;
+    }
+
+    /**
+     * Paper - Data check method for fast draining
+     */
+    public int getData(World world, BlockPos position) {
+        int data = this.getFluidLevel( world, position);
+        return data < 8 ? data : 0;
+    }
+
+    /**
+     * Paper - Checks surrounding blocks to determine if block can be fast drained
+     */
+    public boolean canFastDrain(World world, BlockPos position) {
+        boolean result = false;
+        int data = getData(world, position);
+        if (this.blockMaterial == Material.WATER) {
+            if (world.paperConfig.fastDrainWater) {
+                result = true;
+                if (getData(world, position.down()) < 0) {
+                    result = false;
+                } else if (world.getBlockState(position.north()).getBlock().getDefaultState().getMaterial() == Material.WATER && getData(world, position.north()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.south()).getBlock().getDefaultState().getMaterial() == Material.WATER && getData(world, position.south()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.west()).getBlock().getDefaultState().getMaterial() == Material.WATER && getData(world, position.west()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.east()).getBlock().getDefaultState().getMaterial() == Material.WATER && getData(world, position.east()) < data) {
+                    result = false;
+                }
+            }
+        } else if (this.blockMaterial == Material.LAVA) {
+            if (world.paperConfig.fastDrainLava) {
+                result = true;
+                if (getData(world, position.down()) < 0 || world.getBlockState(position.up()).getBlock().getDefaultState().getMaterial() != Material.AIR) {
+                    result = false;
+                } else if (world.getBlockState(position.north()).getBlock().getDefaultState().getMaterial() == Material.LAVA && getData(world, position.north()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.south()).getBlock().getDefaultState().getMaterial() == Material.LAVA && getData(world, position.south()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.west()).getBlock().getDefaultState().getMaterial() == Material.LAVA && getData(world, position.west()) < data) {
+                    result = false;
+                } else if (world.getBlockState(position.east()).getBlock().getDefaultState().getMaterial() == Material.LAVA && getData(world, position.east()) < data) {
+                    result = false;
+                }
+            }
+        }
+        return result;
+    }
+    // Paper end
 }
