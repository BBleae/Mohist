--- ../src-base/minecraft/net/minecraft/block/state/BlockStateContainer.java
+++ ../src-work/minecraft/net/minecraft/block/state/BlockStateContainer.java
@@ -2,24 +2,7 @@
 
 import com.google.common.base.Function;
 import com.google.common.base.MoreObjects;
-import com.google.common.collect.HashBasedTable;
-import com.google.common.collect.ImmutableCollection;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSortedMap;
-import com.google.common.collect.ImmutableTable;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Table;
-import com.google.common.collect.UnmodifiableIterator;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
+import com.google.common.collect.*;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.EnumPushReaction;
 import net.minecraft.block.material.MapColor;
@@ -27,21 +10,21 @@
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.player.EntityPlayer;
-import net.minecraft.util.EnumBlockRenderType;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.MapPopulator;
-import net.minecraft.util.Mirror;
-import net.minecraft.util.Rotation;
-import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.Cartesian;
-import net.minecraft.util.math.RayTraceResult;
-import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.*;
+import net.minecraft.util.math.*;
 import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.regex.Pattern;
+
 public class BlockStateContainer
 {
     private static final Pattern NAME_PATTERN = Pattern.compile("^[a-z0-9_]+$");
@@ -79,18 +62,18 @@
         }
 
         this.properties = ImmutableSortedMap.copyOf(map);
-        Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > newLinkedHashMap();
-        List<BlockStateContainer.StateImplementation> list1 = Lists.<BlockStateContainer.StateImplementation>newArrayList();
+        Map < Map < IProperty<?>, Comparable<? >> , StateImplementation > map2 = Maps. < Map < IProperty<?>, Comparable<? >> , StateImplementation > newLinkedHashMap();
+        List<StateImplementation> list1 = Lists.<StateImplementation>newArrayList();
 
         for (List < Comparable<? >> list : Cartesian.cartesianProduct(this.getAllowedValues()))
         {
             Map < IProperty<?>, Comparable<? >> map1 = MapPopulator. < IProperty<?>, Comparable<? >> createMap(this.properties.values(), list);
-            BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
+            StateImplementation blockstatecontainer$stateimplementation = createState(blockIn, ImmutableMap.copyOf(map1), unlistedProperties);
             map2.put(map1, blockstatecontainer$stateimplementation);
             list1.add(blockstatecontainer$stateimplementation);
         }
 
-        for (BlockStateContainer.StateImplementation blockstatecontainer$stateimplementation1 : list1)
+        for (StateImplementation blockstatecontainer$stateimplementation1 : list1)
         {
             blockstatecontainer$stateimplementation1.buildPropertyValueTable(map2);
         }
@@ -253,7 +236,7 @@
                 return this.properties.hashCode();
             }
 
-            public void buildPropertyValueTable(Map < Map < IProperty<?>, Comparable<? >> , BlockStateContainer.StateImplementation > map)
+            public void buildPropertyValueTable(Map < Map < IProperty<?>, Comparable<? >> , StateImplementation > map)
             {
                 if (this.propertyValueTable != null)
                 {
