--- ../src-base/minecraft/net/minecraft/util/math/Cartesian.java
+++ ../src-work/minecraft/net/minecraft/util/math/Cartesian.java
@@ -4,19 +4,16 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
-import java.lang.reflect.Array;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.NoSuchElementException;
+
 import javax.annotation.Nullable;
+import java.lang.reflect.Array;
+import java.util.*;
 
 public class Cartesian
 {
     public static <T> Iterable<T[]> cartesianProduct(Class<T> clazz, Iterable <? extends Iterable <? extends T >> sets)
     {
-        return new Cartesian.Product(clazz, (Iterable[])toArray(Iterable.class, sets));
+        return new Product(clazz, (Iterable[])toArray(Iterable.class, sets));
     }
 
     public static <T> Iterable<List<T>> cartesianProduct(Iterable <? extends Iterable <? extends T >> sets)
@@ -26,7 +23,7 @@
 
     private static <T> Iterable<List<T>> arraysAsLists(Iterable<Object[]> arrays)
     {
-        return Iterables.transform(arrays, new Cartesian.GetList());
+        return Iterables.transform(arrays, new GetList());
     }
 
     private static <T> T[] toArray(Class <? super T > clazz, Iterable <? extends T > it)
@@ -71,7 +68,7 @@
 
             public Iterator<T[]> iterator()
             {
-                return (Iterator<T[]>)(this.iterables.length <= 0 ? Collections.singletonList(Cartesian.createArray(this.clazz, 0)).iterator() : new Cartesian.Product.ProductIterator(this.clazz, this.iterables));
+                return (Iterator<T[]>)(this.iterables.length <= 0 ? Collections.singletonList(Cartesian.createArray(this.clazz, 0)).iterator() : new ProductIterator(this.clazz, this.iterables));
             }
 
             static class ProductIterator<T> extends UnmodifiableIterator<T[]>
