--- ../src-base/minecraft/net/minecraft/util/math/BlockPos.java
+++ ../src-work/minecraft/net/minecraft/util/math/BlockPos.java
@@ -2,9 +2,6 @@
 
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.Lists;
-import java.util.Iterator;
-import java.util.List;
-import javax.annotation.concurrent.Immutable;
 import net.minecraft.entity.Entity;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.Rotation;
@@ -13,6 +10,10 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.concurrent.Immutable;
+import java.util.Iterator;
+import java.util.List;
+
 @Immutable
 public class BlockPos extends Vec3i
 {
@@ -74,72 +75,109 @@
 
     public BlockPos up()
     {
-        return this.up(1);
+        return new BlockPos(this.getX(), this.getY() + 1, this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos up(int n)
     {
-        return this.offset(EnumFacing.UP, n);
+        return n == 0 ? this : new BlockPos(this.getX(), this.getY() + n, this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos down()
     {
-        return this.down(1);
+        return new BlockPos(this.getX(), this.getY() - 1, this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos down(int n)
     {
-        return this.offset(EnumFacing.DOWN, n);
+        return n == 0 ? this : new BlockPos(this.getX(), this.getY() - n, this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos north()
     {
-        return this.north(1);
+        return new BlockPos(this.getX(), this.getY(), this.getZ() - 1); // Paper - Optimize BlockPos
     }
 
     public BlockPos north(int n)
     {
-        return this.offset(EnumFacing.NORTH, n);
+        return n == 0 ? this : new BlockPos(this.getX(), this.getY(), this.getZ() - n); // Paper - Optimize BlockPos
     }
 
     public BlockPos south()
     {
-        return this.south(1);
+        return new BlockPos(this.getX(), this.getY(), this.getZ() + 1); // Paper - Optimize BlockPos
     }
 
     public BlockPos south(int n)
     {
-        return this.offset(EnumFacing.SOUTH, n);
+        return n == 0 ? this : new BlockPos(this.getX(), this.getY(), this.getZ() + n); // Paper - Optimize BlockPos
     }
 
     public BlockPos west()
     {
-        return this.west(1);
+        return new BlockPos(this.getX() - 1, this.getY(), this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos west(int n)
     {
-        return this.offset(EnumFacing.WEST, n);
+        return n == 0 ? this : new BlockPos(this.getX() - n, this.getY(), this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos east()
     {
-        return this.east(1);
+        return new BlockPos(this.getX() + 1, this.getY(), this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos east(int n)
     {
-        return this.offset(EnumFacing.EAST, n);
+        return n == 0 ? this : new BlockPos(this.getX() + n, this.getY(), this.getZ()); // Paper - Optimize BlockPos
     }
 
     public BlockPos offset(EnumFacing facing)
     {
-        return this.offset(facing, 1);
+        // Paper Start - Optimize BlockPos
+        switch(facing) {
+            case UP:
+                return new BlockPos(this.getX(), this.getY() + 1, this.getZ());
+                case DOWN:
+                    return new BlockPos(this.getX(), this.getY() - 1, this.getZ());
+                    case NORTH:
+                        return new BlockPos(this.getX(), this.getY(), this.getZ() - 1);
+                        case SOUTH:
+                            return new BlockPos(this.getX(), this.getY(), this.getZ() + 1);
+                            case WEST:
+                                return new BlockPos(this.getX() - 1, this.getY(), this.getZ());
+                                case EAST:
+                                    return new BlockPos(this.getX() + 1, this.getY(), this.getZ());
+                                    default:
+                                        return new BlockPos(this.getX() + facing.getFrontOffsetX(), this.getY() + facing.getFrontOffsetY(), this.getZ() + facing.getFrontOffsetZ());
+        }
+        // Paper End
     }
 
     public BlockPos offset(EnumFacing facing, int n)
     {
-        return n == 0 ? this : new BlockPos(this.getX() + facing.getFrontOffsetX() * n, this.getY() + facing.getFrontOffsetY() * n, this.getZ() + facing.getFrontOffsetZ() * n);
+        // Paper Start - Optimize BlockPos
+        if (n == 0) {
+            return this;
+        }
+        switch(facing) {
+            case UP:
+                return new BlockPos(this.getX(), this.getY() + n, this.getZ());
+                case DOWN:
+                    return new BlockPos(this.getX(), this.getY() - n, this.getZ());
+                    case NORTH:
+                        return new BlockPos(this.getX(), this.getY(), this.getZ() - n);
+                        case SOUTH:
+                            return new BlockPos(this.getX(), this.getY(), this.getZ() + n);
+                            case WEST:
+                                return new BlockPos(this.getX() - n, this.getY(), this.getZ());
+                                case EAST:
+                                    return new BlockPos(this.getX() + n, this.getY(), this.getZ());
+                                    default:
+                                        return new BlockPos(this.getX() + facing.getFrontOffsetX() * n, this.getY() + facing.getFrontOffsetY() * n, this.getZ() + facing.getFrontOffsetZ() * n);
+        }
+        // Paper End
     }
 
     public BlockPos rotate(Rotation rotationIn)
@@ -238,30 +276,31 @@
         return this;
     }
 
-    public static Iterable<BlockPos.MutableBlockPos> getAllInBoxMutable(BlockPos from, BlockPos to)
+    public static Iterable<MutableBlockPos> getAllInBoxMutable(BlockPos from, BlockPos to)
     {
         return getAllInBoxMutable(Math.min(from.getX(), to.getX()), Math.min(from.getY(), to.getY()), Math.min(from.getZ(), to.getZ()), Math.max(from.getX(), to.getX()), Math.max(from.getY(), to.getY()), Math.max(from.getZ(), to.getZ()));
     }
 
-    public static Iterable<BlockPos.MutableBlockPos> getAllInBoxMutable(final int x1, final int y1, final int z1, final int x2, final int y2, final int z2)
+    public static Iterable<MutableBlockPos> getAllInBoxMutable(final int x1, final int y1, final int z1, final int x2, final int y2, final int z2)
     {
-        return new Iterable<BlockPos.MutableBlockPos>()
+        return new Iterable<MutableBlockPos>()
         {
-            public Iterator<BlockPos.MutableBlockPos> iterator()
+            public Iterator<MutableBlockPos> iterator()
             {
-                return new AbstractIterator<BlockPos.MutableBlockPos>()
+                return new AbstractIterator<MutableBlockPos>()
                 {
-                    private BlockPos.MutableBlockPos pos;
-                    protected BlockPos.MutableBlockPos computeNext()
+                    private MutableBlockPos pos;
+                    protected MutableBlockPos computeNext()
                     {
                         if (this.pos == null)
                         {
-                            this.pos = new BlockPos.MutableBlockPos(x1, y1, z1);
+                            this.pos = new MutableBlockPos(x1, y1, z1);
                             return this.pos;
                         }
+                        // Paper start - Make mutable and protected for MutableBlockPos and PooledBlockPos
                         else if (this.pos.x == x2 && this.pos.y == y2 && this.pos.z == z2)
                         {
-                            return (BlockPos.MutableBlockPos)this.endOfData();
+                            return this.endOfData();
                         }
                         else
                         {
@@ -280,6 +319,7 @@
                                 this.pos.y = y1;
                                 ++this.pos.z;
                             }
+                            // Paper end
 
                             return this.pos;
                         }
@@ -290,11 +330,7 @@
     }
 
     public static class MutableBlockPos extends BlockPos
-        {
-            protected int x;
-            protected int y;
-            protected int z;
-
+    {
             public MutableBlockPos()
             {
                 this(0, 0, 0);
@@ -308,6 +344,7 @@
             public MutableBlockPos(int x_, int y_, int z_)
             {
                 super(0, 0, 0);
+                // Paper start - Modify base position variables
                 this.x = x_;
                 this.y = y_;
                 this.z = z_;
@@ -333,30 +370,15 @@
                 return super.rotate(rotationIn).toImmutable();
             }
 
-            public int getX()
+            public MutableBlockPos setPos(int xIn, int yIn, int zIn)
             {
-                return this.x;
-            }
-
-            public int getY()
-            {
-                return this.y;
-            }
-
-            public int getZ()
-            {
-                return this.z;
-            }
-
-            public BlockPos.MutableBlockPos setPos(int xIn, int yIn, int zIn)
-            {
                 this.x = xIn;
                 this.y = yIn;
                 this.z = zIn;
                 return this;
             }
 
-            public BlockPos.MutableBlockPos setPos(double xIn, double yIn, double zIn)
+            public MutableBlockPos setPos(double xIn, double yIn, double zIn)
             {
                 return this.setPos(MathHelper.floor(xIn), MathHelper.floor(yIn), MathHelper.floor(zIn));
             }
@@ -367,19 +389,19 @@
                 return this.setPos(entityIn.posX, entityIn.posY, entityIn.posZ);
             }
 
-            public BlockPos.MutableBlockPos setPos(Vec3i vec)
+            public MutableBlockPos setPos(Vec3i vec)
             {
                 return this.setPos(vec.getX(), vec.getY(), vec.getZ());
             }
 
-            public BlockPos.MutableBlockPos move(EnumFacing facing)
+            public MutableBlockPos move(EnumFacing facing)
             {
                 return this.move(facing, 1);
             }
 
-            public BlockPos.MutableBlockPos move(EnumFacing facing, int n)
+            public MutableBlockPos move(EnumFacing facing, int n)
             {
-                return this.setPos(this.x + facing.getFrontOffsetX() * n, this.y + facing.getFrontOffsetY() * n, this.z + facing.getFrontOffsetZ() * n);
+                return this.setPos(this.getX() + facing.getFrontOffsetX() * n, this.getY() + facing.getFrontOffsetY() * n, this.getZ() + facing.getFrontOffsetZ() * n); // Paper - USE THE BLEEPING GETTERS
             }
 
             public void setY(int yIn)
@@ -393,22 +415,22 @@
             }
         }
 
-    public static final class PooledMutableBlockPos extends BlockPos.MutableBlockPos
+    public static final class PooledMutableBlockPos extends MutableBlockPos
         {
             private boolean released;
-            private static final List<BlockPos.PooledMutableBlockPos> POOL = Lists.<BlockPos.PooledMutableBlockPos>newArrayList();
+            private static final List<PooledMutableBlockPos> POOL = Lists.<PooledMutableBlockPos>newArrayList();
 
             private PooledMutableBlockPos(int xIn, int yIn, int zIn)
             {
                 super(xIn, yIn, zIn);
             }
 
-            public static BlockPos.PooledMutableBlockPos retain()
+            public static PooledMutableBlockPos retain()
             {
                 return retain(0, 0, 0);
             }
 
-            public static BlockPos.PooledMutableBlockPos retain(double xIn, double yIn, double zIn)
+            public static PooledMutableBlockPos retain(double xIn, double yIn, double zIn)
             {
                 return retain(MathHelper.floor(xIn), MathHelper.floor(yIn), MathHelper.floor(zIn));
             }
@@ -419,13 +441,13 @@
                 return retain(vec.getX(), vec.getY(), vec.getZ());
             }
 
-            public static BlockPos.PooledMutableBlockPos retain(int xIn, int yIn, int zIn)
+            public static PooledMutableBlockPos retain(int xIn, int yIn, int zIn)
             {
                 synchronized (POOL)
                 {
                     if (!POOL.isEmpty())
                     {
-                        BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = POOL.remove(POOL.size() - 1);
+                        PooledMutableBlockPos blockpos$pooledmutableblockpos = POOL.remove(POOL.size() - 1);
 
                         if (blockpos$pooledmutableblockpos != null && blockpos$pooledmutableblockpos.released)
                         {
@@ -436,7 +458,7 @@
                     }
                 }
 
-                return new BlockPos.PooledMutableBlockPos(xIn, yIn, zIn);
+                return new PooledMutableBlockPos(xIn, yIn, zIn);
             }
 
             public void release()
@@ -452,41 +474,41 @@
                 }
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(int xIn, int yIn, int zIn)
+            public PooledMutableBlockPos setPos(int xIn, int yIn, int zIn)
             {
                 if (this.released)
                 {
-                    BlockPos.LOGGER.error("PooledMutableBlockPosition modified after it was released.", new Throwable());
+                    BlockPos.LOGGER.error("PooledMutableBlockPos modified after it was released.", new Throwable());
                     this.released = false;
                 }
 
-                return (BlockPos.PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
+                return (PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
             }
 
             @SideOnly(Side.CLIENT)
             public BlockPos.PooledMutableBlockPos setPos(Entity entityIn)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(entityIn);
+                return (PooledMutableBlockPos)super.setPos(entityIn);
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(double xIn, double yIn, double zIn)
+            public PooledMutableBlockPos setPos(double xIn, double yIn, double zIn)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
+                return (PooledMutableBlockPos)super.setPos(xIn, yIn, zIn);
             }
 
-            public BlockPos.PooledMutableBlockPos setPos(Vec3i vec)
+            public PooledMutableBlockPos setPos(Vec3i vec)
             {
-                return (BlockPos.PooledMutableBlockPos)super.setPos(vec);
+                return (PooledMutableBlockPos)super.setPos(vec);
             }
 
-            public BlockPos.PooledMutableBlockPos move(EnumFacing facing)
+            public PooledMutableBlockPos move(EnumFacing facing)
             {
-                return (BlockPos.PooledMutableBlockPos)super.move(facing);
+                return (PooledMutableBlockPos)super.move(facing);
             }
 
-            public BlockPos.PooledMutableBlockPos move(EnumFacing facing, int n)
+            public PooledMutableBlockPos move(EnumFacing facing, int n)
             {
-                return (BlockPos.PooledMutableBlockPos)super.move(facing, n);
+                return (PooledMutableBlockPos)super.move(facing, n);
             }
         }
 }
