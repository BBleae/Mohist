--- ../src-base/minecraft/net/minecraft/world/gen/ChunkGeneratorSettings.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkGeneratorSettings.java
@@ -1,20 +1,13 @@
 package net.minecraft.world.gen;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import java.lang.reflect.Type;
+import com.google.gson.*;
 import net.minecraft.init.Biomes;
 import net.minecraft.util.JsonUtils;
 import net.minecraft.world.biome.Biome;
 
+import java.lang.reflect.Type;
+
 public class ChunkGeneratorSettings
 {
     public final float coordinateScale;
@@ -97,7 +90,7 @@
     public final int lapisCenterHeight;
     public final int lapisSpread;
 
-    private ChunkGeneratorSettings(ChunkGeneratorSettings.Factory settingsFactory)
+    private ChunkGeneratorSettings(Factory settingsFactory)
     {
         this.coordinateScale = settingsFactory.coordinateScale;
         this.heightScale = settingsFactory.heightScale;
@@ -183,7 +176,7 @@
     public static class Factory
         {
             @VisibleForTesting
-            static final Gson JSON_ADAPTER = (new GsonBuilder()).registerTypeAdapter(ChunkGeneratorSettings.Factory.class, new ChunkGeneratorSettings.Serializer()).create();
+            static final Gson JSON_ADAPTER = (new GsonBuilder()).registerTypeAdapter(Factory.class, new Serializer()).create();
             public float coordinateScale = 684.412F;
             public float heightScale = 684.412F;
             public float upperLimitScale = 512.0F;
@@ -264,21 +257,21 @@
             public int lapisCenterHeight = 16;
             public int lapisSpread = 16;
 
-            public static ChunkGeneratorSettings.Factory jsonToFactory(String p_177865_0_)
+            public static Factory jsonToFactory(String p_177865_0_)
             {
                 if (p_177865_0_.isEmpty())
                 {
-                    return new ChunkGeneratorSettings.Factory();
+                    return new Factory();
                 }
                 else
                 {
                     try
                     {
-                        return (ChunkGeneratorSettings.Factory)JsonUtils.gsonDeserialize(JSON_ADAPTER, p_177865_0_, ChunkGeneratorSettings.Factory.class);
+                        return (Factory)JsonUtils.gsonDeserialize(JSON_ADAPTER, p_177865_0_, Factory.class);
                     }
                     catch (Exception var2)
                     {
-                        return new ChunkGeneratorSettings.Factory();
+                        return new Factory();
                     }
                 }
             }
@@ -384,7 +377,7 @@
                 }
                 else if (p_equals_1_ != null && this.getClass() == p_equals_1_.getClass())
                 {
-                    ChunkGeneratorSettings.Factory chunkgeneratorsettings$factory = (ChunkGeneratorSettings.Factory)p_equals_1_;
+                    Factory chunkgeneratorsettings$factory = (Factory)p_equals_1_;
 
                     if (this.andesiteCount != chunkgeneratorsettings$factory.andesiteCount)
                     {
@@ -799,12 +792,12 @@
             }
         }
 
-    public static class Serializer implements JsonDeserializer<ChunkGeneratorSettings.Factory>, JsonSerializer<ChunkGeneratorSettings.Factory>
+    public static class Serializer implements JsonDeserializer<Factory>, JsonSerializer<Factory>
         {
-            public ChunkGeneratorSettings.Factory deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
+            public Factory deserialize(JsonElement p_deserialize_1_, Type p_deserialize_2_, JsonDeserializationContext p_deserialize_3_) throws JsonParseException
             {
                 JsonObject jsonobject = p_deserialize_1_.getAsJsonObject();
-                ChunkGeneratorSettings.Factory chunkgeneratorsettings$factory = new ChunkGeneratorSettings.Factory();
+                Factory chunkgeneratorsettings$factory = new Factory();
 
                 try
                 {
@@ -909,7 +902,7 @@
                 return chunkgeneratorsettings$factory;
             }
 
-            public JsonElement serialize(ChunkGeneratorSettings.Factory p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_)
+            public JsonElement serialize(Factory p_serialize_1_, Type p_serialize_2_, JsonSerializationContext p_serialize_3_)
             {
                 JsonObject jsonobject = new JsonObject();
                 jsonobject.addProperty("coordinateScale", Float.valueOf(p_serialize_1_.coordinateScale));
