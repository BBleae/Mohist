--- ../src-base/minecraft/net/minecraft/world/gen/structure/template/Template.java
+++ ../src-work/minecraft/net/minecraft/world/gen/structure/template/Template.java
@@ -3,11 +3,6 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.Entity;
@@ -16,11 +11,7 @@
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.init.Blocks;
 import net.minecraft.inventory.IInventory;
-import net.minecraft.nbt.NBTTagCompound;
-import net.minecraft.nbt.NBTTagDouble;
-import net.minecraft.nbt.NBTTagInt;
-import net.minecraft.nbt.NBTTagList;
-import net.minecraft.nbt.NBTUtil;
+import net.minecraft.nbt.*;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityStructure;
 import net.minecraft.util.Mirror;
@@ -36,10 +27,16 @@
 import net.minecraft.world.World;
 import net.minecraft.world.gen.structure.StructureBoundingBox;
 
+import javax.annotation.Nullable;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
 public class Template
 {
-    private final List<Template.BlockInfo> blocks = Lists.<Template.BlockInfo>newArrayList();
-    private final List<Template.EntityInfo> entities = Lists.<Template.EntityInfo>newArrayList();
+    private final List<BlockInfo> blocks = Lists.<BlockInfo>newArrayList();
+    private final List<EntityInfo> entities = Lists.<EntityInfo>newArrayList();
     private BlockPos size = BlockPos.ORIGIN;
     private String author = "?";
 
@@ -63,9 +60,9 @@
         if (endPos.getX() >= 1 && endPos.getY() >= 1 && endPos.getZ() >= 1)
         {
             BlockPos blockpos = startPos.add(endPos).add(-1, -1, -1);
-            List<Template.BlockInfo> list = Lists.<Template.BlockInfo>newArrayList();
-            List<Template.BlockInfo> list1 = Lists.<Template.BlockInfo>newArrayList();
-            List<Template.BlockInfo> list2 = Lists.<Template.BlockInfo>newArrayList();
+            List<BlockInfo> list = Lists.<BlockInfo>newArrayList();
+            List<BlockInfo> list1 = Lists.<BlockInfo>newArrayList();
+            List<BlockInfo> list2 = Lists.<BlockInfo>newArrayList();
             BlockPos blockpos1 = new BlockPos(Math.min(startPos.getX(), blockpos.getX()), Math.min(startPos.getY(), blockpos.getY()), Math.min(startPos.getZ(), blockpos.getZ()));
             BlockPos blockpos2 = new BlockPos(Math.max(startPos.getX(), blockpos.getX()), Math.max(startPos.getY(), blockpos.getY()), Math.max(startPos.getZ(), blockpos.getZ()));
             this.size = endPos;
@@ -85,15 +82,15 @@
                         nbttagcompound.removeTag("x");
                         nbttagcompound.removeTag("y");
                         nbttagcompound.removeTag("z");
-                        list1.add(new Template.BlockInfo(blockpos3, iblockstate, nbttagcompound));
+                        list1.add(new BlockInfo(blockpos3, iblockstate, nbttagcompound));
                     }
                     else if (!iblockstate.isFullBlock() && !iblockstate.isFullCube())
                     {
-                        list2.add(new Template.BlockInfo(blockpos3, iblockstate, (NBTTagCompound)null));
+                        list2.add(new BlockInfo(blockpos3, iblockstate, (NBTTagCompound)null));
                     }
                     else
                     {
-                        list.add(new Template.BlockInfo(blockpos3, iblockstate, (NBTTagCompound)null));
+                        list.add(new BlockInfo(blockpos3, iblockstate, (NBTTagCompound)null));
                     }
                 }
             }
@@ -141,7 +138,7 @@
                 blockpos = new BlockPos(vec3d);
             }
 
-            this.entities.add(new Template.EntityInfo(vec3d, blockpos, nbttagcompound));
+            this.entities.add(new EntityInfo(vec3d, blockpos, nbttagcompound));
         }
     }
 
@@ -150,7 +147,7 @@
         Map<BlockPos, String> map = Maps.<BlockPos, String>newHashMap();
         StructureBoundingBox structureboundingbox = placementIn.getBoundingBox();
 
-        for (Template.BlockInfo template$blockinfo : this.blocks)
+        for (BlockInfo template$blockinfo : this.blocks)
         {
             BlockPos blockpos = transformedBlockPos(placementIn, template$blockinfo.pos).add(pos);
 
@@ -208,13 +205,12 @@
             Block block = placementIn.getReplacedBlock();
             StructureBoundingBox structureboundingbox = placementIn.getBoundingBox();
 
-            for (Template.BlockInfo template$blockinfo : this.blocks)
+            for (BlockInfo template$blockinfo : this.blocks)
             {
                 BlockPos blockpos = transformedBlockPos(placementIn, template$blockinfo.pos).add(pos);
+                BlockInfo template$blockinfo1 = templateProcessor != null ? templateProcessor.processBlock(worldIn, blockpos, template$blockinfo) : template$blockinfo;
                 // Forge: skip processing blocks outside BB to prevent cascading worldgen issues
                 if (structureboundingbox != null && !structureboundingbox.isVecInside(blockpos)) continue;
-                Template.BlockInfo template$blockinfo1 = templateProcessor != null ? templateProcessor.processBlock(worldIn, blockpos, template$blockinfo) : template$blockinfo;
-
                 if (template$blockinfo1 != null)
                 {
                     Block block1 = template$blockinfo1.blockState.getBlock();
@@ -248,16 +244,18 @@
                                 template$blockinfo1.tileentityData.setInteger("x", blockpos.getX());
                                 template$blockinfo1.tileentityData.setInteger("y", blockpos.getY());
                                 template$blockinfo1.tileentityData.setInteger("z", blockpos.getZ());
+                                tileentity2.isLoadingStructure = true; // Paper
                                 tileentity2.readFromNBT(template$blockinfo1.tileentityData);
                                 tileentity2.mirror(placementIn.getMirror());
                                 tileentity2.rotate(placementIn.getRotation());
+                                tileentity2.isLoadingStructure = false; // Paper
                             }
                         }
                     }
                 }
             }
 
-            for (Template.BlockInfo template$blockinfo2 : this.blocks)
+            for (BlockInfo template$blockinfo2 : this.blocks)
             {
                 if (block == null || block != template$blockinfo2.blockState.getBlock())
                 {
@@ -289,7 +287,7 @@
 
     private void addEntitiesToWorld(World worldIn, BlockPos pos, Mirror mirrorIn, Rotation rotationIn, @Nullable StructureBoundingBox aabb)
     {
-        for (Template.EntityInfo template$entityinfo : this.entities)
+        for (EntityInfo template$entityinfo : this.entities)
         {
             BlockPos blockpos = transformedBlockPos(template$entityinfo.blockPos, mirrorIn, rotationIn).add(pos);
 
@@ -476,10 +474,10 @@
 
     public NBTTagCompound writeToNBT(NBTTagCompound nbt)
     {
-        Template.BasicPalette template$basicpalette = new Template.BasicPalette();
+        BasicPalette template$basicpalette = new BasicPalette();
         NBTTagList nbttaglist = new NBTTagList();
 
-        for (Template.BlockInfo template$blockinfo : this.blocks)
+        for (BlockInfo template$blockinfo : this.blocks)
         {
             NBTTagCompound nbttagcompound = new NBTTagCompound();
             nbttagcompound.setTag("pos", this.writeInts(template$blockinfo.pos.getX(), template$blockinfo.pos.getY(), template$blockinfo.pos.getZ()));
@@ -495,7 +493,7 @@
 
         NBTTagList nbttaglist1 = new NBTTagList();
 
-        for (Template.EntityInfo template$entityinfo : this.entities)
+        for (EntityInfo template$entityinfo : this.entities)
         {
             NBTTagCompound nbttagcompound1 = new NBTTagCompound();
             nbttagcompound1.setTag("pos", this.writeDoubles(template$entityinfo.pos.x, template$entityinfo.pos.y, template$entityinfo.pos.z));
@@ -533,7 +531,7 @@
         NBTTagList nbttaglist = compound.getTagList("size", 3);
         this.size = new BlockPos(nbttaglist.getIntAt(0), nbttaglist.getIntAt(1), nbttaglist.getIntAt(2));
         this.author = compound.getString("author");
-        Template.BasicPalette template$basicpalette = new Template.BasicPalette();
+        BasicPalette template$basicpalette = new BasicPalette();
         NBTTagList nbttaglist1 = compound.getTagList("palette", 10);
 
         for (int i = 0; i < nbttaglist1.tagCount(); ++i)
@@ -560,7 +558,7 @@
                 nbttagcompound1 = null;
             }
 
-            this.blocks.add(new Template.BlockInfo(blockpos, iblockstate, nbttagcompound1));
+            this.blocks.add(new BlockInfo(blockpos, iblockstate, nbttagcompound1));
         }
 
         NBTTagList nbttaglist4 = compound.getTagList("entities", 10);
@@ -576,7 +574,7 @@
             if (nbttagcompound3.hasKey("nbt"))
             {
                 NBTTagCompound nbttagcompound2 = nbttagcompound3.getCompoundTag("nbt");
-                this.entities.add(new Template.EntityInfo(vec3d, blockpos1, nbttagcompound2));
+                this.entities.add(new EntityInfo(vec3d, blockpos1, nbttagcompound2));
             }
         }
     }
