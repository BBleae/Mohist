--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFile.java
@@ -1,27 +1,16 @@
 package net.minecraft.world.chunk.storage;
-
 import com.google.common.collect.Lists;
-import java.io.BufferedInputStream;
-import java.io.BufferedOutputStream;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.RandomAccessFile;
+import net.minecraft.server.MinecraftServer;
+
+import javax.annotation.Nullable;
+import java.io.*;
 import java.util.List;
 import java.util.zip.DeflaterOutputStream;
 import java.util.zip.GZIPInputStream;
 import java.util.zip.InflaterInputStream;
-import javax.annotation.Nullable;
-import net.minecraft.server.MinecraftServer;
 
 public class RegionFile
 {
-    // Minecraft is limited to 256 sections per chunk. So 1MB. This can easily be override.
-    // So we extend this to use the REAL size when the count is maxed by seeking to that section and reading the length.
-    private static final boolean FORGE_ENABLE_EXTENDED_SAVE = Boolean.parseBoolean(System.getProperty("forge.enableExtendedSave", "true"));
     private static final byte[] EMPTY_SECTOR = new byte[4096];
     private final File fileName;
     private RandomAccessFile dataFile;
@@ -71,31 +60,19 @@
             this.sectorFree.set(0, Boolean.valueOf(false));
             this.sectorFree.set(1, Boolean.valueOf(false));
             this.dataFile.seek(0L);
-
+			
             for (int j1 = 0; j1 < 1024; ++j1)
             {
                 int k = this.dataFile.readInt();
                 this.offsets[j1] = k;
 
-                int length = k & 255;
-                if (length == 255)
+                if (k != 0 && (k >> 8) + (k & 255) <= this.sectorFree.size())
                 {
-                    if ((k >> 8) <= this.sectorFree.size())
-                    { // We're maxed out, so we need to read the proper length from the section
-                        this.dataFile.seek((k >> 8) * 4096);
-                        length = (this.dataFile.readInt() + 4)/ 4096 + 1;
-                        this.dataFile.seek(j1 * 4 + 4); //Go back to where we were
-                    }
-                }
-                if (k != 0 && (k >> 8) + length <= this.sectorFree.size())
-                {
-                    for (int l = 0; l < length; ++l)
+                    for (int l = 0; l < (k & 255); ++l)
                     {
                         this.sectorFree.set((k >> 8) + l, Boolean.valueOf(false));
                     }
                 }
-                else if (length > 0)
-                    net.minecraftforge.fml.common.FMLLog.log.warn("Invalid chunk: ({}, {}) Offset: {} Length: {} runs off end file. {}", j1 % 32, (int)(j1 / 32), k >> 8, length, fileNameIn);
             }
 
             for (int k1 = 0; k1 < 1024; ++k1)
@@ -117,7 +94,6 @@
     }
 
     @Nullable
-
     public synchronized DataInputStream getChunkDataInputStream(int x, int z)
     {
         if (this.outOfBounds(x, z))
@@ -138,11 +114,6 @@
                 {
                     int j = i >> 8;
                     int k = i & 255;
-                    if (k == 255)
-                    {
-                        this.dataFile.seek(j * 4096);
-                        k = (this.dataFile.readInt() + 4) / 4096 + 1;
-                    }
 
                     if (j + k > this.sectorFree.size())
                     {
@@ -155,12 +126,10 @@
 
                         if (l > 4096 * k)
                         {
-                            net.minecraftforge.fml.common.FMLLog.log.warn("Invalid chunk: ({}, {}) Offset: {} Invalid Size: {}>{} {}", x, z, j, l, k * 4096, fileName);
                             return null;
                         }
                         else if (l <= 0)
                         {
-                            net.minecraftforge.fml.common.FMLLog.log.warn("Invalid chunk: ({}, {}) Offset: {} Invalid Size: {} {}", x, z, j, l, fileName);
                             return null;
                         }
                         else
@@ -197,7 +166,7 @@
     @Nullable
     public DataOutputStream getChunkDataOutputStream(int x, int z)
     {
-        return this.outOfBounds(x, z) ? null : new DataOutputStream(new BufferedOutputStream(new DeflaterOutputStream(new RegionFile.ChunkBuffer(x, z))));
+        return this.outOfBounds(x, z) ? null : new DataOutputStream(new BufferedOutputStream(new DeflaterOutputStream(new ChunkBuffer(x, z))));
     }
 
     protected synchronized void write(int x, int z, byte[] data, int length)
@@ -207,17 +176,11 @@
             int i = this.getOffset(x, z);
             int j = i >> 8;
             int k = i & 255;
-            if (k == 255)
-            {
-                this.dataFile.seek(j * 4096);
-                k = (this.dataFile.readInt() + 4) / 4096 + 1;
-            }
             int l = (length + 5) / 4096 + 1;
 
             if (l >= 256)
             {
-                if (!FORGE_ENABLE_EXTENDED_SAVE) return;
-                net.minecraftforge.fml.common.FMLLog.log.warn("Large Chunk Detected: ({}, {}) Size: {} {}", x, z, l, fileName);
+				return;
             }
 
             if (j != 0 && k == l)
@@ -265,7 +228,7 @@
                 if (j1 >= l)
                 {
                     j = l1;
-                    this.setOffset(x, z, l1 << 8 | (l > 255 ? 255 : l));
+                    this.setOffset(x, z, l1 << 8 | l);
 
                     for (int j2 = 0; j2 < l; ++j2)
                     {
@@ -287,7 +250,7 @@
 
                     this.sizeDelta += 4096 * l;
                     this.write(j, data, length);
-                    this.setOffset(x, z, j << 8 | (l > 255 ? 255 : l));
+                    this.setOffset(x, z, j << 8 | l);
                 }
             }
 
@@ -358,7 +321,7 @@
 
         public void close() throws IOException
         {
-            RegionFile.this.write(this.chunkX, this.chunkZ, this.buf, this.count);
+			RegionFile.this.write(this.chunkX, this.chunkZ, this.buf, this.count);
         }
     }
 }
