--- ../src-base/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
+++ ../src-work/minecraft/net/minecraft/world/chunk/storage/RegionFileCache.java
@@ -1,16 +1,27 @@
 package net.minecraft.world.chunk.storage;
 
-import com.google.common.collect.Maps;
+import com.destroystokyo.paper.PaperConfig;
+import com.destroystokyo.paper.exception.ServerInternalException;
+import net.minecraft.nbt.CompressedStreamTools;
+import net.minecraft.nbt.NBTBase;
+import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.nbt.NBTTagList;
+import org.apache.commons.io.output.NullOutputStream;
+
+import javax.annotation.Nullable;
 import java.io.DataInputStream;
 import java.io.DataOutputStream;
 import java.io.File;
 import java.io.IOException;
+import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class RegionFileCache
 {
-    private static final Map<File, RegionFile> REGIONS_BY_FILE = Maps.<File, RegionFile>newHashMap();
+    private static final Map<File, RegionFile> REGIONS_BY_FILE = new LinkedHashMap(PaperConfig.regionFileCacheSize, 0.75f, true); // Spigot - private -> public, Paper - HashMap -> LinkedHashMap
 
+    public static synchronized RegionFile getRegionFile(File file, int i, int j) { return createOrLoadRegionFile(file, i, j); } // Paper - OBFHELPER
     public static synchronized RegionFile createOrLoadRegionFile(File worldDir, int chunkX, int chunkZ)
     {
         File file1 = new File(worldDir, "region");
@@ -28,9 +39,8 @@
                 file1.mkdirs();
             }
 
-            if (REGIONS_BY_FILE.size() >= 256)
-            {
-                clearRegionFileReferences();
+            if (REGIONS_BY_FILE.size() >= PaperConfig.regionFileCacheSize) { // Paper
+                trimCache(); // Paper
             }
 
             RegionFile regionfile1 = new RegionFile(file2);
@@ -39,6 +49,21 @@
         }
     }
 
+    // Paper Start
+    private static synchronized void trimCache() {
+            Iterator<Map.Entry<File, RegionFile>> itr = RegionFileCache.REGIONS_BY_FILE.entrySet().iterator();
+            int count = RegionFileCache.REGIONS_BY_FILE.size() - PaperConfig.regionFileCacheSize;
+            while (count-- >= 0 && itr.hasNext()) {
+                    try {
+                        itr.next().getValue().close();
+                    } catch (IOException ioexception) {
+                        ioexception.printStackTrace();
+                    }
+                    itr.remove();
+                }
+        }
+
+
     public static synchronized RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ)
     {
         File file1 = new File(worldDir, "region");
@@ -80,6 +105,7 @@
             catch (IOException ioexception)
             {
                 ioexception.printStackTrace();
+                ServerInternalException.reportInternalException(ioexception);
             }
         }
 
@@ -92,12 +118,33 @@
         return regionfile.getChunkDataInputStream(chunkX & 31, chunkZ & 31);
     }
 
+    @Nullable
+    public static NBTTagCompound getChunkInputStreamCB(File worldDir, int chunkX, int chunkZ) throws IOException  // Paper - remove synchronization
+    {
+        RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
+
+        DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkX & 31, chunkZ & 31);
+
+        if (datainputstream == null) {
+            return null;
+        }
+
+        return CompressedStreamTools.read(datainputstream);
+    }
+
     public static DataOutputStream getChunkOutputStream(File worldDir, int chunkX, int chunkZ)
     {
         RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
         return regionfile.getChunkDataOutputStream(chunkX & 31, chunkZ & 31);
     }
 
+    public static synchronized void getChunkOutputStream(File worldDir, int chunkX, int chunkZ, NBTTagCompound nbttagcompound) throws IOException {
+        RegionFile regionfile = createOrLoadRegionFile(worldDir, chunkX, chunkZ);
+        DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(chunkX & 31, chunkZ & 31);
+        CompressedStreamTools.write(nbttagcompound, dataoutputstream);
+        dataoutputstream.close();
+    }
+
     public static boolean chunkExists(File worldDir, int chunkX, int chunkZ)
     {
         RegionFile regionfile = getRegionFileIfExists(worldDir, chunkX, chunkZ);
