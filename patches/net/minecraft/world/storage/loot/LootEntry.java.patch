--- ../src-base/minecraft/net/minecraft/world/storage/loot/LootEntry.java
+++ ../src-work/minecraft/net/minecraft/world/storage/loot/LootEntry.java
@@ -1,27 +1,22 @@
 package net.minecraft.world.storage.loot;
 
-import com.google.gson.JsonDeserializationContext;
-import com.google.gson.JsonDeserializer;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
-import com.google.gson.JsonSerializationContext;
-import com.google.gson.JsonSerializer;
-import com.google.gson.JsonSyntaxException;
-import java.lang.reflect.Type;
-import java.util.Collection;
-import java.util.Random;
+import com.google.gson.*;
 import net.minecraft.item.ItemStack;
 import net.minecraft.util.JsonUtils;
-import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.storage.loot.conditions.LootCondition;
 
+import java.lang.reflect.Type;
+import java.util.Collection;
+import java.util.Random;
+
 public abstract class LootEntry
 {
     protected final String entryName;
     protected final int weight;
     protected final int quality;
     protected final LootCondition[] conditions;
+    private Float lastLuck = null;
+    private int lastWeight = 0;
 
     protected LootEntry(int weightIn, int qualityIn, LootCondition[] conditionsIn, String entryName)
     {
@@ -33,8 +28,31 @@
 
     public int getEffectiveWeight(float luck)
     {
-        return Math.max(MathHelper.floor((float)this.weight + (float)this.quality * luck), 0);
+        // Paper start - Offer an alternative loot formula to refactor how luck bonus applies
+        // SEE: https://luckformula.emc.gs for details and data
+        if (lastLuck != null && lastLuck == luck) {
+            return this.lastWeight;
+        }
+        // This is vanilla
+        float qualityModifer = (float) this.quality * luck;
+        double baseWeight = (this.weight + qualityModifer);
+        if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
+            // Random boost to avoid losing precision in the final int cast on return
+            final int weightBoost = 100;
+            baseWeight *= weightBoost;
+            // If we have vanilla 1, bump that down to 0 so nothing is is impacted
+            // vanilla 3 = 300, 200 basis = impact 2%
+            // =($B2*(($B2-100)/100/100))
+            double impacted = baseWeight * ((baseWeight - weightBoost) / weightBoost / 100);
+            // =($B$7/100)
+            float luckModifier = Math.min(100, luck * 10) / 100;
+            // =B2 - (C2 *($B$7/100))
+            baseWeight = Math.ceil(baseWeight - (impacted * luckModifier));
+        }
+        lastLuck = luck;
+        return this.lastWeight = (int) Math.max(0, Math.floor(baseWeight));
     }
+    // Paper end
 
     public String getEntryName(){ return this.entryName; }
 
