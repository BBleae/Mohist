--- ../src-base/minecraft/net/minecraft/item/ItemStack.java
+++ ../src-work/minecraft/net/minecraft/item/ItemStack.java
@@ -3,13 +3,8 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
-import java.text.DecimalFormat;
-import java.util.List;
-import java.util.Random;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.CriteriaTriggers;
-import net.minecraft.block.Block;
+import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.enchantment.Enchantment;
@@ -30,12 +25,11 @@
 import net.minecraft.nbt.NBTBase;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTTagList;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.stats.StatList;
-import net.minecraft.util.ActionResult;
-import net.minecraft.util.EnumActionResult;
-import net.minecraft.util.EnumFacing;
-import net.minecraft.util.EnumHand;
-import net.minecraft.util.ResourceLocation;
+import net.minecraft.tileentity.TileEntity;
+import net.minecraft.tileentity.TileEntitySkull;
+import net.minecraft.util.*;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.util.datafix.walkers.BlockEntityTag;
@@ -49,14 +43,28 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Location;
+import org.bukkit.TreeType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.entity.Player;
+import org.bukkit.event.world.StructureGrowEvent;
 
+import javax.annotation.Nullable;
+import java.text.DecimalFormat;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Random;
+
 public final class ItemStack implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
     public static final ItemStack EMPTY = new ItemStack((Item)null);
     public static final DecimalFormat DECIMALFORMAT = new DecimalFormat("#.##");
-    private int stackSize;
+    public int stackSize;
     private int animationsToGo;
-    private final Item item;
+    public Item item;
     private NBTTagCompound stackTagCompound;
     private boolean isEmpty;
     int itemDamage;
@@ -94,7 +102,21 @@
     {
         this(itemIn, amount, 0);
     }
-
+    // Paper start
+    private static final java.util.Comparator<NBTTagCompound> enchantSorter = java.util.Comparator.comparingInt(o -> o.getShort("id"));
+    private void processEnchantOrder(NBTTagCompound tag) {
+        if (tag == null || !tag.hasKey("ench", 9)) {
+            return;
+        }
+        NBTTagList list = tag.getTagList("ench", 10);
+        if (list.tagCount() < 2) {
+            return;
+        }
+        try {
+            list.sort(enchantSorter); // Paper
+        } catch (Exception ignored) {}
+    }
+    // Paper end
     public ItemStack(Item itemIn, int amount, int meta){ this(itemIn, amount, meta, null); }
     public ItemStack(Item itemIn, int amount, int meta, @Nullable NBTTagCompound capNBT)
     {
@@ -119,47 +141,79 @@
 
     public ItemStack(NBTTagCompound compound)
     {
+        this.load(compound);
+
+        this.updateEmptyState();
+        this.forgeInit();
+    }
+
+    public ItemStack(final Item item, final int i, final int j, final boolean convert) {
+        this.item = item;
+        this.itemDamage = j;
+        this.stackSize = i;
+        if (MinecraftServer.getServerInst() != null) {
+            this.setItemDamage(j);
+        }
+        if (convert) {
+            this.convertStack();
+        }
+        if (this.itemDamage < 0) {}
+        this.updateEmptyState();
+    }
+
+    // Called to run this stack through the data converter to handle older storage methods and serialized items
+    public void convertStack() {
+        if (MinecraftServer.getServerInst() != null) {
+            // Don't convert beds - both the old and new data values are valid
+            // Conversion would make getting white beds (data value 0) impossible
+            if (this.item == Items.BED) {
+                return;
+            }
+            NBTTagCompound savedStack = new NBTTagCompound();
+            this.writeToNBT(savedStack);
+            MinecraftServer.getServerInst().dataFixer.process(FixTypes.ITEM_INSTANCE, savedStack); // PAIL: convert
+            this.load(savedStack);
+        }
+    }
+
+    public void load(NBTTagCompound compound)
+    {
         this.capNBT = compound.hasKey("ForgeCaps") ? compound.getCompoundTag("ForgeCaps") : null;
         this.item = compound.hasKey("id", 8) ? Item.getByNameOrId(compound.getString("id")) : Items.AIR; //Forge fix tons of NumberFormatExceptions that are caused by deserializing EMPTY ItemStacks.
         this.stackSize = compound.getByte("Count");
-        this.itemDamage = Math.max(0, compound.getShort("Damage"));
+        // CraftBukkit start - Route through setData for filtering
+        // this.itemDamage = Math.max(0, compound.getShort("Damage"));
+        this.setItemDamage(compound.getShort("Damage"));
 
         if (compound.hasKey("tag", 10))
         {
-            this.stackTagCompound = compound.getCompoundTag("tag");
-
+            // CraftBukkit start - make defensive copy as this data may be coming from the save thread
+            // this.stackTagCompound = compound.getCompoundTag("tag");
+            this.stackTagCompound = compound.getCompoundTag("tag").copy();
+            processEnchantOrder(this.stackTagCompound); // Paper
             if (this.item != null)
             {
-                this.item.updateItemStackNBT(compound);
+                // this.item.updateItemStackNBT(compound);
+                this.item.updateItemStackNBT(this.stackTagCompound);
             }
         }
-
-        this.updateEmptyState();
-        this.forgeInit();
     }
 
     public boolean isEmpty()
     {
-        if (this == EMPTY)
-        {
+        if (this == EMPTY) {
             return true;
-        }
-        else if (this.getItemRaw() != null && this.getItemRaw() != Items.AIR)
-        {
-            if (this.stackSize <= 0)
-            {
+        } else if (this.getItemRaw() != null && this.getItemRaw() != Items.AIR) {
+            if (this.stackSize <= 0) {
                 return true;
-            }
-            else
-            {
+            } else {
                 return this.itemDamage < -32768 || this.itemDamage > 65535;
             }
-        }
-        else
-        {
+        } else {
             return true;
         }
     }
+    // Paper end
 
     public static void registerFixes(DataFixer fixer)
     {
@@ -184,16 +238,143 @@
     public EnumActionResult onItemUse(EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ)
     {
         if (!worldIn.isRemote) return net.minecraftforge.common.ForgeHooks.onPlaceItemIntoWorld(this, playerIn, worldIn, pos, side, hitX, hitY, hitZ, hand);
+        // CraftBukkit start - handle all block place event logic here
+        int oldData = this.getItemDamage();
+        int oldCount = this.getCount();
+
+        if (!(this.getItem() instanceof ItemBucket)) { // if not bucket
+            worldIn.captureBlockStates = true;
+            // special case bonemeal
+            if (this.getItem() instanceof ItemDye && this.getItemDamage() == 15) {
+                Block block = worldIn.getBlockState(pos).getBlock();
+                if (block == Blocks.SAPLING || block instanceof BlockMushroom) {
+                    worldIn.captureTreeGeneration = true;
+                }
+            }
+        }
         EnumActionResult enumactionresult = this.getItem().onItemUse(playerIn, worldIn, pos, hand, side, hitX, hitY, hitZ);
+        int newData = this.getItemDamage();
+        int newCount = this.getCount();
+        this.setCount(oldCount);
+        this.setItemDamage(oldData);
+        worldIn.captureBlockStates = false;
+        if (enumactionresult == EnumActionResult.SUCCESS && worldIn.captureTreeGeneration && worldIn.capturedBlockStates.size() > 0) {
+            worldIn.captureTreeGeneration = false;
+            Location location = new Location(worldIn.getWorld(), pos.getX(), pos.getY(), pos.getZ());
+            TreeType treeType = BlockSapling.treeType;
+            BlockSapling.treeType = null;
+            List<BlockState> blocks = (List<BlockState>) worldIn.capturedBlockStates.clone();
+            worldIn.capturedBlockStates.clear();
+            StructureGrowEvent event = null;
+            if (treeType != null) {
+                boolean isBonemeal = getItem() == Items.DYE && oldData == 15;
+                event = new StructureGrowEvent(location, treeType, isBonemeal, (Player) playerIn.getBukkitEntity(), blocks);
+                org.bukkit.Bukkit.getPluginManager().callEvent(event);
+            }
+            if (event == null || !event.isCancelled()) {
+                // Change the stack to its new contents if it hasn't been tampered with.
+                if (this.getCount() == oldCount && this.getItemDamage() == oldData) {
+                    this.setItemDamage(newData);
+                    this.setCount(newCount);
+                }
+                for (BlockState blockstate : blocks) {
+                    blockstate.update(true);
+                }
+            }
 
+            return enumactionresult;
+        }
+        worldIn.captureTreeGeneration = false;
         if (enumactionresult == EnumActionResult.SUCCESS)
         {
-            playerIn.addStat(StatList.getObjectUseStats(this.item));
+            // playerIn.addStat(StatList.getObjectUseStats(this.item));
+            org.bukkit.event.block.BlockPlaceEvent placeEvent = null;
+            List<BlockState> blocks = (List<BlockState>) worldIn.capturedBlockStates.clone();
+            worldIn.capturedBlockStates.clear();
+            if (blocks.size() > 1) {
+                placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockMultiPlaceEvent(worldIn, playerIn, hand, blocks, pos.getX(), pos.getY(), pos.getZ());
+            } else if (blocks.size() == 1) {
+                placeEvent = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPlaceEvent(worldIn, playerIn, hand, blocks.get(0), pos.getX(), pos.getY(), pos.getZ());
+            }
+
+            if (placeEvent != null && (placeEvent.isCancelled() || !placeEvent.canBuild())) {
+                enumactionresult = EnumActionResult.FAIL; // cancel placement
+                // TODO: Remove this when MC-99075 fixed
+                placeEvent.getPlayer().updateInventory();
+                // revert back all captured blocks
+                for (BlockState blockstate : blocks) {
+                    blockstate.update(true, false);
+                }
+            } else {
+                // Change the stack to its new contents if it hasn't been tampered with.
+                if (this.getCount() == oldCount && this.getItemDamage() == oldData) {
+                    this.setItemDamage(newData);
+                    this.setCount(newCount);
+                }
+
+                for (Entry<BlockPos, TileEntity> e : worldIn.capturedTileEntities.entrySet()) {
+                    worldIn.setTileEntity(e.getKey(), e.getValue());
+                }
+
+                for (BlockState blockstate : blocks) {
+                    int x = blockstate.getX();
+                    int y = blockstate.getY();
+                    int z = blockstate.getZ();
+                    int updateFlag = ((CraftBlockState) blockstate).getFlag();
+                    org.bukkit.Material mat = blockstate.getType();
+                    Block oldBlock = CraftMagicNumbers.getBlock(mat);
+                    BlockPos newblockposition = new BlockPos(x, y, z);
+                    IBlockState block = worldIn.getBlockState(newblockposition);
+
+                    if (!(block.getBlock() instanceof BlockContainer)) { // Containers get placed automatically
+                        block.getBlock().onBlockAdded(worldIn, newblockposition, block);
+                    }
+
+                    worldIn.markAndNotifyBlock(newblockposition, null, oldBlock.getDefaultState(), block, updateFlag); // send null chunk as chunk.k() returns false by this point
+                }
+
+                // Special case juke boxes as they update their tile entity. Copied from ItemRecord.
+                // PAIL: checkme on updates.
+                if (this.item instanceof ItemRecord) {
+                    ((BlockJukebox) Blocks.JUKEBOX).insertRecord(worldIn, pos, worldIn.getBlockState(pos), this);
+                    worldIn.playEvent(null, 1010, pos, Item.getIdFromItem(this.item));
+                    this.shrink(1);
+                    playerIn.addStat(StatList.CRAFTING_TABLE_INTERACTION);
+                }
+
+                if (this.item == Items.SKULL) { // Special case skulls to allow wither spawns to be cancelled
+                    BlockPos bp = pos;
+                    if (!worldIn.getBlockState(pos).getBlock().isReplaceable(worldIn, pos)) {
+                        if (!worldIn.getBlockState(pos).getMaterial().isSolid()) {
+                            bp = null;
+                        } else {
+                            bp = bp.offset(side);
+                        }
+                    }
+                    if (bp != null) {
+                        TileEntity te = worldIn.getTileEntity(bp);
+                        if (te instanceof TileEntitySkull) {
+                            Blocks.SKULL.checkWitherSpawn(worldIn, bp, (TileEntitySkull) te);
+                        }
+                    }
+                }
+
+                // SPIGOT-1288 - play sound stripped from ItemBlock
+                if (this.item instanceof ItemBlock) {
+                    SoundType soundeffecttype = ((ItemBlock) this.item).getBlock().getSoundType();
+                    worldIn.playSound(playerIn, pos, soundeffecttype.getPlaceSound(), SoundCategory.BLOCKS, (soundeffecttype.getVolume() + 1.0F) / 2.0F, soundeffecttype.getPitch() * 0.8F);
+                }
+
+                playerIn.addStat(StatList.getObjectUseStats(this.item));
+            }
         }
+        worldIn.capturedTileEntities.clear();
+        worldIn.capturedBlockStates.clear();
 
         return enumactionresult;
     }
 
+
     public EnumActionResult onItemUseFirst(EntityPlayer playerIn, World worldIn, BlockPos pos, EnumHand hand, EnumFacing side, float hitX, float hitY, float hitZ)
     {
         // copy of onitemuse but for onitemusefirst
@@ -231,7 +412,8 @@
 
         if (this.stackTagCompound != null)
         {
-            nbt.setTag("tag", this.stackTagCompound);
+            // nbt.setTag("tag", this.stackTagCompound);
+            nbt.setTag("tag", this.stackTagCompound.copy()); // CraftBukkit - make defensive copy, data is going to another thread
         }
 
         if (this.capabilities != null)
@@ -291,6 +473,26 @@
 
     public void setItemDamage(int meta)
     {
+        // CraftBukkit start - Filter out data for items that shouldn't have it
+        // The crafting system uses this value for a special purpose so we have to allow it
+        if (meta == 32767) {
+            getItem().setDamage(this, meta);
+            return;
+        }
+
+        // Is this a block?
+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) != Blocks.AIR) {
+            // If vanilla doesn't use data on it don't allow any
+            if (!(this.getHasSubtypes() || this.getItem().isDamageable())) {
+                meta = 0;
+            }
+        }
+
+        // Filter invalid plant data
+        if (CraftMagicNumbers.getBlock(CraftMagicNumbers.getId(this.getItem())) == Blocks.DOUBLE_PLANT && (meta > 5 || meta < 0)) {
+            meta = 0;
+        }
+        // CraftBukkit end
         getItem().setDamage(this, meta);
     }
 
@@ -322,6 +524,18 @@
 
                 amount -= j;
 
+                // Spigot start
+                if (damager != null) {
+                    org.bukkit.craftbukkit.inventory.CraftItemStack item = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(this);
+                    org.bukkit.event.player.PlayerItemDamageEvent event = new org.bukkit.event.player.PlayerItemDamageEvent(damager.getBukkitEntity(), item, amount);
+                    org.bukkit.Bukkit.getServer().getPluginManager().callEvent(event);
+                    if (amount != event.getDamage() || event.isCancelled()) {
+                        event.getPlayer().updateInventory();
+                    }
+                    if (event.isCancelled()) return false;
+                    amount = event.getDamage();
+                }
+                // Spigot end
                 if (amount <= 0)
                 {
                     return false;
@@ -347,6 +561,11 @@
                 if (this.attemptDamageItem(amount, entityIn.getRNG(), entityIn instanceof EntityPlayerMP ? (EntityPlayerMP)entityIn : null))
                 {
                     entityIn.renderBrokenItemStack(this);
+                    // CraftBukkit start - Check for item breaking
+                    if (this.stackSize == 1 && entityIn instanceof EntityPlayer) {
+                        org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerItemBreakEvent((EntityPlayer) entityIn, this);
+                    }
+                    // CraftBukkit end
                     this.shrink(1);
 
                     if (entityIn instanceof EntityPlayer)
@@ -592,9 +811,22 @@
         return this.stackTagCompound != null ? this.stackTagCompound.getTagList("ench", 10) : new NBTTagList();
     }
 
+    // Paper start - (this is just a good no conflict location)
+    public org.bukkit.inventory.ItemStack asBukkitMirror() {
+        return CraftItemStack.asCraftMirror(this);
+    }
+    public org.bukkit.inventory.ItemStack asBukkitCopy() {
+        return CraftItemStack.asCraftMirror(this.copy());
+    }
+    public static ItemStack fromBukkitCopy(org.bukkit.inventory.ItemStack itemstack) {
+        return CraftItemStack.asNMSCopy(itemstack);
+    }
+    // Paper end
+
     public void setTagCompound(@Nullable NBTTagCompound nbt)
     {
         this.stackTagCompound = nbt;
+        processEnchantOrder(this.stackTagCompound); // Paper
     }
 
     public String getDisplayName()
@@ -931,6 +1163,7 @@
         nbttagcompound.setShort("id", (short)Enchantment.getEnchantmentID(ench));
         nbttagcompound.setShort("lvl", (short)((byte)level));
         nbttaglist.appendTag(nbttagcompound);
+        processEnchantOrder(nbttagcompound); // Paper
     }
 
     public boolean isItemEnchanted()
@@ -983,6 +1216,14 @@
 
     public void setRepairCost(int cost)
     {
+        // CraftBukkit start - remove RepairCost tag when 0 (SPIGOT-3945)
+        if (cost == 0) {
+            if (this.hasTagCompound()) {
+                this.stackTagCompound.removeTag("RepairCost");
+            }
+            return;
+        }
+        // CraftBukkit end
         if (!this.hasTagCompound())
         {
             this.stackTagCompound = new NBTTagCompound();
@@ -1043,6 +1284,14 @@
         nbttaglist.appendTag(nbttagcompound);
     }
 
+    @Deprecated
+    public void setItem(Item item) {
+        this.item = item;
+        // Update delegate as well
+        this.delegate = item.delegate;
+        this.setItemDamage(this.getItemDamage()); // CraftBukkit - Set data again to ensure it is filtered properly
+    }
+
     public ITextComponent getTextComponent()
     {
         TextComponentString textcomponentstring = new TextComponentString(this.getDisplayName());
@@ -1280,4 +1529,16 @@
     {
         return this.isEmpty() || this.getItem().doesSneakBypassUse(this, world, pos, player);
     }
+
+    // Spigot start
+    public static boolean fastMatches(ItemStack itemstack, ItemStack itemstack1) {
+        if (itemstack == null && itemstack1 == null) {
+            return true;
+        }
+        if (itemstack != null && itemstack1 != null) {
+            return itemstack.stackSize == itemstack1.stackSize && itemstack.item == itemstack1.item && itemstack.itemDamage == itemstack1.itemDamage;
+        }
+        return false;
+    }
+    // Spigot end
 }
