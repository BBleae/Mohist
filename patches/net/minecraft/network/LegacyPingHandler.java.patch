--- ../src-base/minecraft/net/minecraft/network/LegacyPingHandler.java
+++ ../src-work/minecraft/net/minecraft/network/LegacyPingHandler.java
@@ -1,20 +1,23 @@
 package net.minecraft.network;
 
+import com.destroystokyo.paper.network.PaperLegacyStatusClient;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
-import java.net.InetSocketAddress;
-import java.nio.charset.StandardCharsets;
 import net.minecraft.server.MinecraftServer;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import java.net.InetSocketAddress;
+import java.nio.charset.StandardCharsets;
+
 public class LegacyPingHandler extends ChannelInboundHandlerAdapter
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private final NetworkSystem networkSystem;
+    private ByteBuf buf; // Paper
 
     public LegacyPingHandler(NetworkSystem networkSystemIn)
     {
@@ -24,6 +27,16 @@
     public void channelRead(ChannelHandlerContext p_channelRead_1_, Object p_channelRead_2_) throws Exception
     {
         ByteBuf bytebuf = (ByteBuf)p_channelRead_2_;
+        // Paper start - Make legacy ping handler more reliable
+        if (this.buf != null) {
+            try {
+                readLegacy1_6(p_channelRead_1_, bytebuf);
+            } finally {
+                bytebuf.release();
+            }
+            return;
+        }
+        // Paper end
         bytebuf.markReaderIndex();
         boolean flag = true;
 
@@ -34,12 +47,20 @@
                 InetSocketAddress inetsocketaddress = (InetSocketAddress)p_channelRead_1_.channel().remoteAddress();
                 MinecraftServer minecraftserver = this.networkSystem.getServer();
                 int i = bytebuf.readableBytes();
+                com.destroystokyo.paper.event.server.PaperServerListPingEvent event; // Paper
 
                 switch (i)
                 {
                     case 0:
                         LOGGER.debug("Ping: (<1.3.x) from {}:{}", inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort()));
-                        String s2 = String.format("%s\u00a7%d\u00a7%d", minecraftserver.getMOTD(), minecraftserver.getCurrentPlayerCount(), minecraftserver.getMaxPlayers());
+                        // Paper start - Call PaperServerListPingEvent and use results
+                        event = PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 39, null);
+                        if (event == null) {
+                            p_channelRead_1_.close();
+                            break;
+                        }
+                        String s2 = String.format("%s\u00a7%d\u00a7%d", PaperLegacyStatusClient.getUnformattedMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+                        // Paper end
                         this.writeAndFlush(p_channelRead_1_, this.getStringBuffer(s2));
                         break;
                     case 1:
@@ -50,36 +71,22 @@
                         }
 
                         LOGGER.debug("Ping: (1.4-1.5.x) from {}:{}", inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort()));
-                        String s = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", Integer.valueOf(127), minecraftserver.getMinecraftVersion(), minecraftserver.getMOTD(), minecraftserver.getCurrentPlayerCount(), minecraftserver.getMaxPlayers());
+                        // Paper start - Call PaperServerListPingEvent and use results
+                        event = PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 61, null);
+                        if (event == null) {
+                            p_channelRead_1_.close();
+                            break;
+                        }
+                        String s = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), event.getVersion(),
+                                PaperLegacyStatusClient.getMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+                        // Paper end
                         this.writeAndFlush(p_channelRead_1_, this.getStringBuffer(s));
                         break;
                     default:
-                        boolean flag1 = bytebuf.readUnsignedByte() == 1;
-                        flag1 = flag1 & bytebuf.readUnsignedByte() == 250;
-                        flag1 = flag1 & "MC|PingHost".equals(new String(bytebuf.readBytes(bytebuf.readShort() * 2).array(), StandardCharsets.UTF_16BE));
-                        int j = bytebuf.readUnsignedShort();
-                        flag1 = flag1 & bytebuf.readUnsignedByte() >= 73;
-                        flag1 = flag1 & 3 + bytebuf.readBytes(bytebuf.readShort() * 2).array().length + 4 == j;
-                        flag1 = flag1 & bytebuf.readInt() <= 65535;
-                        flag1 = flag1 & bytebuf.readableBytes() == 0;
-
-                        if (!flag1)
-                        {
-                            return;
-                        }
-
-                        LOGGER.debug("Ping: (1.6) from {}:{}", inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort()));
-                        String s1 = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", Integer.valueOf(127), minecraftserver.getMinecraftVersion(), minecraftserver.getMOTD(), minecraftserver.getCurrentPlayerCount(), minecraftserver.getMaxPlayers());
-                        ByteBuf bytebuf1 = this.getStringBuffer(s1);
-
-                        try
-                        {
-                            this.writeAndFlush(p_channelRead_1_, bytebuf1);
-                        }
-                        finally
-                        {
-                            bytebuf1.release();
-                        }
+                        // Paper start - Replace with improved version below
+                        if (bytebuf.readUnsignedByte() != 0x01 || bytebuf.readUnsignedByte() != 0xFA) return;
+                        readLegacy1_6(p_channelRead_1_, bytebuf);
+                        // Paper end
                 }
 
                 bytebuf.release();
@@ -102,6 +109,88 @@
         }
     }
 
+    // Paper start
+    private static String readLegacyString(ByteBuf buf) {
+        int size = buf.readShort() * Character.BYTES;
+        if (!buf.isReadable(size)) {
+            return null;
+        }
+
+        String result = buf.toString(buf.readerIndex(), size, StandardCharsets.UTF_16BE);
+        buf.skipBytes(size); // toString doesn't increase readerIndex automatically
+        return result;
+    }
+
+    private void readLegacy1_6(ChannelHandlerContext ctx, ByteBuf part) {
+        ByteBuf buf = this.buf;
+
+        if (buf == null) {
+            this.buf = buf = ctx.alloc().buffer();
+            buf.markReaderIndex();
+        } else {
+            buf.resetReaderIndex();
+        }
+
+        buf.writeBytes(part);
+
+        if (!buf.isReadable(Short.BYTES + Short.BYTES + Byte.BYTES + Short.BYTES + Integer.BYTES)) {
+            return;
+        }
+
+        String s = readLegacyString(buf);
+        if (s == null) {
+            return;
+        }
+
+        if (!s.equals("MC|PingHost")) {
+            removeHandler(ctx);
+            return;
+        }
+
+        if (!buf.isReadable(Short.BYTES) || !buf.isReadable(buf.readShort())) {
+            return;
+        }
+
+        MinecraftServer server = this.networkSystem.getServer();
+        int protocolVersion = buf.readByte();
+        String host = readLegacyString(buf);
+        if (host == null) {
+            removeHandler(ctx);
+            return;
+        }
+        int port = buf.readInt();
+        if (buf.isReadable()) {
+            removeHandler(ctx);
+            return;
+        }
+
+        buf.release();
+        this.buf = null;
+
+        LOGGER.debug("Ping: (1.6) from {}", ctx.channel().remoteAddress());
+
+        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d",
+                Byte.MAX_VALUE, server.getMinecraftVersion(), server.getMOTD(), server.getCurrentPlayerCount(), server.getMaxPlayers());
+        this.writeAndFlush(ctx, this.getStringBuffer(response));
+    }
+
+    private void removeHandler(ChannelHandlerContext ctx) {
+        ByteBuf buf = this.buf;
+        this.buf = null;
+        buf.resetReaderIndex();
+        ctx.pipeline().remove(this);
+        ctx.fireChannelRead(buf);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) {
+        if (this.buf != null) {
+            this.buf.release();
+            this.buf = null;
+        }
+    }
+    // Paper end
+
     private void writeAndFlush(ChannelHandlerContext ctx, ByteBuf data)
     {
         ctx.pipeline().firstContext().writeAndFlush(data).addListener(ChannelFutureListener.CLOSE);
