--- ../src-base/minecraft/net/minecraft/network/NettyPacketEncoder.java
+++ ../src-work/minecraft/net/minecraft/network/NettyPacketEncoder.java
@@ -3,12 +3,13 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
-import java.io.IOException;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
+import java.io.IOException;
+
 public class NettyPacketEncoder extends MessageToByteEncoder < Packet<? >>
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -20,9 +21,23 @@
         this.direction = direction;
     }
 
-    protected void encode(ChannelHandlerContext p_encode_1_, Packet<?> p_encode_2_, ByteBuf p_encode_3_) throws IOException, Exception
+    private static int MAX_PACKET_SIZE = 2097152;
+    public static class PacketTooLargeException extends RuntimeException {
+        private final Packet<?> packet;
+        PacketTooLargeException(Packet<?> packet, int packetLength) {
+            super("PacketTooLarge - " + packet.getClass().getSimpleName() + " is " + packetLength +". Max is " + MAX_PACKET_SIZE);
+            this.packet = packet;
+        }
+
+        public Packet<?> getPacket() {
+            return packet;
+        }
+    }
+    // Paper end
+
+    protected void encode(ChannelHandlerContext p_encode_1_, Packet<?> p_encode_2_, ByteBuf p_encode_3_) throws Exception
     {
-        EnumConnectionState enumconnectionstate = (EnumConnectionState)p_encode_1_.channel().attr(NetworkManager.PROTOCOL_ATTRIBUTE_KEY).get();
+        EnumConnectionState enumconnectionstate = p_encode_1_.channel().attr(NetworkManager.PROTOCOL_ATTRIBUTE_KEY).get();
 
         if (enumconnectionstate == null)
         {
@@ -36,7 +51,13 @@
             {
                 LOGGER.debug(RECEIVED_PACKET_MARKER, "OUT: [{}:{}] {}", p_encode_1_.channel().attr(NetworkManager.PROTOCOL_ATTRIBUTE_KEY).get(), integer, p_encode_2_.getClass().getName());
             }
-
+            if (integer == null && (integer = enumconnectionstate.getPacketId(this.direction, p_encode_2_)) != null) {
+                LOGGER.warn("current state is {}, but send packet {}", enumconnectionstate, p_encode_2_.getClass().getSimpleName());
+            }
+            if (integer == null && (integer = EnumConnectionState.LOGIN.getPacketId(this.direction, p_encode_2_)) != null)
+            {
+                LOGGER.warn("current state is {}, but send packet {}", enumconnectionstate, p_encode_2_.getClass().getSimpleName());
+            }
             if (integer == null)
             {
                 throw new IOException("Can't serialize unregistered packet");
@@ -54,6 +75,10 @@
                 {
                     throw throwable; // Forge: throw this instead of logging it, to prevent corrupt packets from being sent to the client where they are much harder to debug.
                 }
+                final int packetLength = p_encode_3_.readableBytes();
+                if (packetLength > MAX_PACKET_SIZE) {
+                    throw new PacketTooLargeException(p_encode_2_, packetLength);
+                }
             }
         }
     }
