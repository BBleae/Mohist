--- ../src-base/minecraft/net/minecraft/scoreboard/IScoreCriteria.java
+++ ../src-work/minecraft/net/minecraft/scoreboard/IScoreCriteria.java
@@ -1,9 +1,10 @@
 package net.minecraft.scoreboard;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import net.minecraft.util.text.TextFormatting;
 
+import java.util.Map;
+
 public interface IScoreCriteria
 {
     Map<String, IScoreCriteria> INSTANCES = Maps.<String, IScoreCriteria>newHashMap();
@@ -25,14 +26,14 @@
 
     boolean isReadOnly();
 
-    IScoreCriteria.EnumRenderType getRenderType();
+    EnumRenderType getRenderType();
 
     public static enum EnumRenderType
     {
         INTEGER("integer"),
         HEARTS("hearts");
 
-        private static final Map<String, IScoreCriteria.EnumRenderType> BY_NAME = Maps.<String, IScoreCriteria.EnumRenderType>newHashMap();
+        private static final Map<String, EnumRenderType> BY_NAME = Maps.<String, EnumRenderType>newHashMap();
         private final String renderType;
 
         private EnumRenderType(String renderTypeIn)
@@ -45,15 +46,15 @@
             return this.renderType;
         }
 
-        public static IScoreCriteria.EnumRenderType getByName(String name)
+        public static EnumRenderType getByName(String name)
         {
-            IScoreCriteria.EnumRenderType iscorecriteria$enumrendertype = BY_NAME.get(name);
+            EnumRenderType iscorecriteria$enumrendertype = BY_NAME.get(name);
             return iscorecriteria$enumrendertype == null ? INTEGER : iscorecriteria$enumrendertype;
         }
 
         static
         {
-            for (IScoreCriteria.EnumRenderType iscorecriteria$enumrendertype : values())
+            for (EnumRenderType iscorecriteria$enumrendertype : values())
             {
                 BY_NAME.put(iscorecriteria$enumrendertype.getRenderType(), iscorecriteria$enumrendertype);
             }
