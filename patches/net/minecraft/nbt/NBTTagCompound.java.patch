--- ../src-base/minecraft/net/minecraft/nbt/NBTTagCompound.java
+++ ../src-work/minecraft/net/minecraft/nbt/NBTTagCompound.java
@@ -1,31 +1,23 @@
 package net.minecraft.nbt;
 
+import cn.pfcraft.server.Mohist;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import java.io.DataInput;
-import java.io.DataOutput;
-import java.io.IOException;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Set;
-import java.util.UUID;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.util.ReportedException;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+import java.util.*;
+import java.util.regex.Pattern;
+
 public class NBTTagCompound extends NBTBase
 {
-    private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern SIMPLE_VALUE = Pattern.compile("[A-Za-z0-9._+-]+");
-    private final Map<String, NBTBase> tagMap = Maps.<String, NBTBase>newHashMap();
+    public final Map<String, NBTBase> tagMap = new HashMap<>(); // Paper
 
     void write(DataOutput output) throws IOException
     {
@@ -105,18 +97,20 @@
         this.tagMap.put(key, new NBTTagLong(value));
     }
 
+    public void setUUID(String prefix, UUID uuid) { setUniqueId(prefix, uuid); } // Paper - OBFHELPER
     public void setUniqueId(String key, UUID value)
     {
         this.setLong(key + "Most", value.getMostSignificantBits());
         this.setLong(key + "Least", value.getLeastSignificantBits());
     }
 
+    public UUID getUUID(String prefix) { return getUniqueId(prefix); } // Paper - OBFHELPER
     @Nullable
     public UUID getUniqueId(String key)
     {
         return new UUID(this.getLong(key + "Most"), this.getLong(key + "Least"));
     }
-
+    public boolean hasUUID(String s) { return hasUniqueId(s); }
     public boolean hasUniqueId(String key)
     {
         return this.hasKey(key + "Most", 99) && this.hasKey(key + "Least", 99);
@@ -395,7 +389,7 @@
         StringBuilder stringbuilder = new StringBuilder("{");
         Collection<String> collection = this.tagMap.keySet();
 
-        if (LOGGER.isDebugEnabled())
+        if (Mohist.LOGGER.isDebugEnabled())
         {
             List<String> list = Lists.newArrayList(this.tagMap.keySet());
             Collections.sort(list);
