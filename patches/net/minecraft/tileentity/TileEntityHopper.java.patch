--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityHopper.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityHopper.java
@@ -1,19 +1,15 @@
 package net.minecraft.tileentity;
 
-import java.util.List;
-import javax.annotation.Nullable;
+import cn.pfcraft.CraftInventoryWrapper;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.block.BlockHopper;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityMinecartHopper;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
-import net.minecraft.inventory.Container;
-import net.minecraft.inventory.ContainerHopper;
-import net.minecraft.inventory.IInventory;
-import net.minecraft.inventory.ISidedInventory;
-import net.minecraft.inventory.ItemStackHelper;
+import net.minecraft.inventory.*;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.EntitySelectors;
@@ -27,13 +23,52 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.world.World;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryMoveItemEvent;
+import org.bukkit.event.inventory.InventoryPickupItemEvent;
+import org.bukkit.inventory.Inventory;
 
+import javax.annotation.Nullable;
+import java.util.List;
+
 public class TileEntityHopper extends TileEntityLockableLoot implements IHopper, ITickable
 {
-    private NonNullList<ItemStack> inventory = NonNullList.<ItemStack>withSize(5, ItemStack.EMPTY);
+    private NonNullList<ItemStack> inventory = NonNullList.<ItemStack>withSize(5, ItemStack.EMPTY, true);
     private int transferCooldown = -1;
     private long tickedGameTime;
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
 
+    // Paper start
+    private boolean mayAcceptItems = false;
+
+    public boolean canAcceptItems() {
+        return mayAcceptItems;
+    }
+    
+    public List<ItemStack> getContents() {
+        return this.inventory;
+    }
+        
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+    
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+        
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+        
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
     public static void registerFixesHopper(DataFixer fixer)
     {
         fixer.registerWalker(FixTypes.BLOCK_ENTITY, new ItemStackDataLists(TileEntityHopper.class, new String[] {"Items"}));
@@ -106,7 +141,7 @@
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack;
     }
 
     public void update()
@@ -126,6 +161,7 @@
 
     protected boolean updateHopper()
     {
+        mayAcceptItems = false; // Paper - at the beginning of a tick, assume we can't accept items
         if (this.world != null && !this.world.isRemote)
         {
             if (!this.isOnTransferCooldown() && BlockHopper.isEnabled(this.getBlockMetadata()))
@@ -139,12 +175,13 @@
 
                 if (!this.isFull())
                 {
+                    mayAcceptItems = true;
                     flag = pullItems(this) || flag;
                 }
 
                 if (flag)
                 {
-                    this.setTransferCooldown(8);
+                    this.setTransferCooldown(world.spigotConfig.hopperTransfer); // Spigot
                     this.markDirty();
                     return true;
                 }
@@ -189,6 +226,146 @@
         return true;
     }
 
+    // Paper start - Optimize Hoppers
+    private static boolean skipPullModeEventFire = false;
+    private static boolean skipPushModeEventFire = false;
+    public static boolean skipHopperEvents = false;
+
+    private boolean hopperPush(IInventory iinventory, EnumFacing enumdirection) {
+        skipPushModeEventFire = skipHopperEvents;
+        boolean foundItem = false;
+        for (int i = 0; i < this.getSizeInventory(); ++i) {
+            if (!this.getStackInSlot(i).isEmpty()) {
+                foundItem = true;
+                ItemStack origItemStack = this.getStackInSlot(i);
+                ItemStack itemstack = origItemStack;
+                final int origCount = origItemStack.getCount();
+                final int moved = Math.min(world.spigotConfig.hopperAmount, origCount);
+                origItemStack.setCount(moved);
+                // We only need to fire the event once to give protection plugins a chance to cancel this event
+                // Because nothing uses getItem, every event call should end up the same result.
+                if (!skipPushModeEventFire) {
+                    itemstack = callPushMoveEvent(iinventory, itemstack);
+                    if (itemstack == null) { // cancelled
+                        origItemStack.setCount(origCount);
+                        return false;
+                    }
+                }
+                final ItemStack itemstack2 = putStackInInventoryAllSlots(this, iinventory, itemstack, enumdirection);
+                final int remaining = itemstack2.getCount();
+                if (remaining != moved) {
+                    origItemStack = origItemStack.copy();
+                    origItemStack.setCount(origCount - moved + remaining);
+                    this.setInventorySlotContents(i, origItemStack);
+                    iinventory.markDirty();
+                    return true;
+                }
+                origItemStack.setCount(origCount);
+            }
+        }
+        if (foundItem && world.paperConfig.cooldownHopperWhenFull) { // Inventory was full - cooldown
+            this.setTransferCooldown(world.spigotConfig.hopperTransfer);
+        }
+        return false;
+    }
+
+    private static boolean hopperPull(IHopper ihopper, IInventory iinventory, int i) {
+        ItemStack origItemStack = iinventory.getStackInSlot(i);
+        ItemStack itemstack = origItemStack;
+        final int origCount = origItemStack.getCount();
+        final World world = ihopper.getWorld();
+        final int moved = Math.min(world.spigotConfig.hopperAmount, origCount);
+        itemstack.setCount(moved);
+        if (!skipPullModeEventFire) {
+            itemstack = callPullMoveEvent(ihopper, iinventory, itemstack);
+            if (itemstack == null) { // cancelled
+                origItemStack.setCount(origCount);
+                // Drastically improve performance by returning true.
+                // No plugin could of relied on the behavior of false as the other call
+                // site for IMIE did not exhibit the same behavior
+                return true;
+            }
+        }
+        final ItemStack itemstack2 = putStackInInventoryAllSlots(iinventory, ihopper, itemstack, null);
+        final int remaining = itemstack2.getCount();
+        if (remaining != moved) {
+            origItemStack = origItemStack.copy();
+            origItemStack.setCount(origCount - moved + remaining);
+            IGNORE_TILE_UPDATES = true;
+            iinventory.setInventorySlotContents(i, origItemStack);
+            IGNORE_TILE_UPDATES = false;
+            iinventory.markDirty();
+            return true;
+        }
+        origItemStack.setCount(origCount);
+
+        if (world.paperConfig.cooldownHopperWhenFull) {
+            cooldownHopper(ihopper);
+        }
+        return false;
+    }
+
+    private ItemStack callPushMoveEvent(IInventory iinventory, ItemStack itemstack) {
+        Inventory destinationInventory = getInventory(iinventory);
+        InventoryMoveItemEvent event = new InventoryMoveItemEvent(this.getOwner(false).getInventory(),
+                CraftItemStack.asCraftMirror(itemstack), destinationInventory, true);
+        boolean result = event.callEvent();
+        if (!event.calledGetItem && !event.calledSetItem) {
+            skipPushModeEventFire = true;
+        }
+        if (!result) {
+            cooldownHopper(this);
+            return null;
+        }
+        if (event.calledSetItem) {
+            return CraftItemStack.asNMSCopy(event.getItem());
+        } else {
+            return itemstack;
+        }
+    }
+
+    private static ItemStack callPullMoveEvent(IHopper hopper, IInventory iinventory, ItemStack itemstack) {
+        Inventory sourceInventory = getInventory(iinventory);
+        Inventory destination = getInventory(hopper);
+        InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory,
+                // Mirror is safe as we no plugins ever use this item
+                CraftItemStack.asCraftMirror(itemstack), destination, false);
+        boolean result = event.callEvent();
+        if (!event.calledGetItem && !event.calledSetItem) {
+            skipPullModeEventFire = true;
+        }
+        if (!result) {
+            cooldownHopper(hopper);
+            return null;
+        }
+        if (event.calledSetItem) {
+            return CraftItemStack.asNMSCopy(event.getItem());
+        } else {
+            return itemstack;
+        }
+    }
+
+    private static Inventory getInventory(IInventory iinventory) {
+        Inventory sourceInventory;// Have to special case large chests as they work oddly
+        if (iinventory instanceof InventoryLargeChest) {
+            sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) iinventory);
+        } else if (iinventory instanceof TileEntity) {
+            sourceInventory = ((TileEntity) iinventory).getOwner(false).getInventory();
+        } else {
+            sourceInventory = iinventory.getOwner().getInventory();
+        }
+        return sourceInventory;
+    }
+
+    private static void cooldownHopper(IHopper hopper) {
+        if (hopper instanceof TileEntityHopper) {
+            ((TileEntityHopper) hopper).setTransferCooldown(hopper.getWorld().spigotConfig.hopperTransfer);
+        } else if (hopper instanceof EntityMinecartHopper) {
+            ((EntityMinecartHopper) hopper).setTransferTicker(hopper.getWorld().spigotConfig.hopperTransfer / 2);
+        }
+    }
+    // Paper end
+
     private boolean transferItemsOut()
     {
         if (net.minecraftforge.items.VanillaInventoryCodeHooks.insertHook(this)) { return true; }
@@ -208,24 +385,7 @@
             }
             else
             {
-                for (int i = 0; i < this.getSizeInventory(); ++i)
-                {
-                    if (!this.getStackInSlot(i).isEmpty())
-                    {
-                        ItemStack itemstack = this.getStackInSlot(i).copy();
-                        ItemStack itemstack1 = putStackInInventoryAllSlots(this, iinventory, this.decrStackSize(i, 1), enumfacing);
-
-                        if (itemstack1.isEmpty())
-                        {
-                            iinventory.markDirty();
-                            return true;
-                        }
-
-                        this.setInventorySlotContents(i, itemstack);
-                    }
-                }
-
-                return false;
+                return hopperPush(iinventory, enumfacing);  // Paper - disable rest
             }
         }
     }
@@ -296,11 +456,13 @@
         return true;
     }
 
-    public static boolean pullItems(IHopper hopper)
-    {
+    public static boolean pullItems(IHopper ihopper) {
+        IInventory iinventory = getInventory(ihopper, !(ihopper instanceof TileEntityHopper) || !ihopper.getWorld().paperConfig.isHopperPushBased);
+        return acceptItem(ihopper, iinventory);
+    }
+    public static boolean acceptItem(IHopper hopper, IInventory iinventory) {
         Boolean ret = net.minecraftforge.items.VanillaInventoryCodeHooks.extractHook(hopper);
         if (ret != null) return ret;
-        IInventory iinventory = getSourceInventory(hopper);
 
         if (iinventory != null)
         {
@@ -337,11 +499,10 @@
                 }
             }
         }
-        else
-        {
+        else if (!hopper.getWorld().paperConfig.isHopperPushBased || !(hopper instanceof TileEntityHopper)){
             for (EntityItem entityitem : getCaptureItems(hopper.getWorld(), hopper.getXPos(), hopper.getYPos(), hopper.getZPos()))
             {
-                if (putDropInInventoryAllSlots((IInventory)null, hopper, entityitem))
+                if (putDropInInventoryAllSlots(null, hopper, entityitem))
                 {
                     return true;
                 }
@@ -358,14 +519,62 @@
         if (!itemstack.isEmpty() && canExtractItemFromSlot(inventoryIn, itemstack, index, direction))
         {
             ItemStack itemstack1 = itemstack.copy();
-            ItemStack itemstack2 = putStackInInventoryAllSlots(inventoryIn, hopper, inventoryIn.decrStackSize(index, 1), (EnumFacing)null);
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(inventoryIn.decrStackSize(index, hopper.getWorld().spigotConfig.hopperAmount));
 
+            Inventory sourceInventory = null;
+            // Have to special case large chests as they work oddly
+            if (inventoryIn instanceof InventoryLargeChest) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((InventoryLargeChest) inventoryIn);
+            } else {
+                // Mohist start - support mod inventories, with no owners
+                try
+                {
+                    if (inventoryIn.getOwner() != null)
+                    {
+                        sourceInventory = inventoryIn.getOwner().getInventory();
+                    }
+                    else
+                        {
+                            // TODO: create a mod inventory for passing to the event, instead of null
+                            sourceInventory = null;
+                        }
+                }
+                catch (AbstractMethodError e) {
+                    sourceInventory = null;
+                }
+                finally { if (sourceInventory == null) { sourceInventory = new CraftInventoryWrapper(inventoryIn); } }
+                // Mohist end
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack.clone(), hopper.getOwner().getInventory(), false);
+
+            if (sourceInventory != null) hopper.getWorld().getServer().getPluginManager().callEvent(event); // Mohist
+            if (event.isCancelled()) {
+                inventoryIn.setInventorySlotContents(index, itemstack1);
+
+                if (hopper instanceof TileEntityHopper) {
+                    ((TileEntityHopper) hopper).setTransferCooldown(hopper.getWorld().spigotConfig.hopperTransfer); // Delay hopper checks
+                } else if (hopper instanceof EntityMinecartHopper) {
+                    ((EntityMinecartHopper) hopper).setTransferTicker(hopper.getWorld().spigotConfig.hopperTransfer / 2); // Delay hopper minecart checks
+                }
+
+                return false;
+            }
+			 int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemstack2 = putStackInInventoryAllSlots(inventoryIn, hopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+
             if (itemstack2.isEmpty())
             {
-                inventoryIn.markDirty();
+                // inventoryIn.markDirty();
+                if (event.getItem().equals(oitemstack)) {
+                    inventoryIn.markDirty();
+                } else {
+                    inventoryIn.setInventorySlotContents(index, itemstack1);
+                }
+                // CraftBukkit end
                 return true;
             }
-
             inventoryIn.setInventorySlotContents(index, itemstack1);
         }
 
@@ -382,8 +591,13 @@
         }
         else
         {
+            InventoryPickupItemEvent event = new InventoryPickupItemEvent(getInventory(destination), (org.bukkit.entity.Item) entity.getBukkitEntity());
+            entity.world.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                return false;
+            }
             ItemStack itemstack = entity.getItem().copy();
-            ItemStack itemstack1 = putStackInInventoryAllSlots(source, destination, itemstack, (EnumFacing)null);
+            ItemStack itemstack1 = putStackInInventoryAllSlots(source, destination, itemstack, null);
 
             if (itemstack1.isEmpty())
             {
@@ -458,7 +672,9 @@
 
             if (itemstack.isEmpty())
             {
+                IGNORE_TILE_UPDATES = true; // Paper
                 destination.setInventorySlotContents(index, stack);
+                IGNORE_TILE_UPDATES = false; // Paper
                 stack = ItemStack.EMPTY;
                 flag = true;
             }
@@ -491,7 +707,7 @@
                             }
                         }
 
-                        tileentityhopper1.setTransferCooldown(8 - k);
+                        tileentityhopper1.setTransferCooldown(tileentityhopper1.world.spigotConfig.hopperTransfer - k); // Spigot
                     }
                 }
 
@@ -505,26 +721,47 @@
     private IInventory getInventoryForHopperTransfer()
     {
         EnumFacing enumfacing = BlockHopper.getFacing(this.getBlockMetadata());
-        return getInventoryAtPosition(this.getWorld(), this.getXPos() + (double)enumfacing.getFrontOffsetX(), this.getYPos() + (double)enumfacing.getFrontOffsetY(), this.getZPos() + (double)enumfacing.getFrontOffsetZ());
+        World world = getWorld();
+        return getInventory(world, this.getXPos() + (double)enumfacing.getFrontOffsetX(), this.getYPos() + (double)enumfacing.getFrontOffsetY(), this.getZPos() + (double)enumfacing.getFrontOffsetZ(), !world.paperConfig.isHopperPushBased);
     }
 
+    // Paper start - add option to search for entities
     public static IInventory getSourceInventory(IHopper hopper)
     {
-        return getInventoryAtPosition(hopper.getWorld(), hopper.getXPos(), hopper.getYPos() + 1.0D, hopper.getZPos());
+        return getInventory(hopper, true);
     }
 
+    public static IInventory getInventory(IHopper ihopper, boolean searchForEntities) {
+        return getInventory(ihopper.getWorld(), ihopper.getXPos(), ihopper.getYPos() + 1.0D, ihopper.getZPos(), searchForEntities);
+    }
+
     public static List<EntityItem> getCaptureItems(World worldIn, double p_184292_1_, double p_184292_3_, double p_184292_5_)
     {
         return worldIn.<EntityItem>getEntitiesWithinAABB(EntityItem.class, new AxisAlignedBB(p_184292_1_ - 0.5D, p_184292_3_, p_184292_5_ - 0.5D, p_184292_1_ + 0.5D, p_184292_3_ + 1.5D, p_184292_5_ + 0.5D), EntitySelectors.IS_ALIVE);
     }
 
+    // Paper start
+    public AxisAlignedBB getHopperLookupBoundingBox() {
+            return getHopperLookupBoundingBox(this.getXPos(), this.getYPos(), this.getZPos());
+    }
+
+    private static AxisAlignedBB getHopperLookupBoundingBox(double d0, double d1, double d2) {
+        // Change this if a(World, double, double, double) above ever changes
+        return new AxisAlignedBB(d0 - 0.5D, d1, d2 - 0.5D, d0 + 0.5D, d1 + 1.5D, d2 + 0.5D);
+    }
+
     public static IInventory getInventoryAtPosition(World worldIn, double x, double y, double z)
     {
+        return getInventory(worldIn, x, y, z, true);
+    }
+
+    public static IInventory getInventory(World worldIn, double x, double y, double z, boolean searchForEntities) {
         IInventory iinventory = null;
         int i = MathHelper.floor(x);
         int j = MathHelper.floor(y);
         int k = MathHelper.floor(z);
         BlockPos blockpos = new BlockPos(i, j, k);
+		if (!worldIn.isBlockLoaded(blockpos)) return null; // Spigot
         net.minecraft.block.state.IBlockState state = worldIn.getBlockState(blockpos);
         Block block = state.getBlock();
 
@@ -543,7 +780,7 @@
             }
         }
 
-        if (iinventory == null)
+        if (iinventory == null && searchForEntities)  // Paper - only if searchForEntities
         {
             List<Entity> list = worldIn.getEntitiesInAABBexcluding((Entity)null, new AxisAlignedBB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelectors.HAS_INVENTORY);
 
