--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityChest.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityChest.java
@@ -1,29 +1,30 @@
 package net.minecraft.tileentity;
 
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
-import net.minecraft.inventory.IInventory;
-import net.minecraft.inventory.InventoryLargeChest;
 import net.minecraft.inventory.ItemStackHelper;
 import net.minecraft.item.ItemStack;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.util.EnumFacing;
-import net.minecraft.util.ITickable;
 import net.minecraft.util.NonNullList;
 import net.minecraft.util.SoundCategory;
 import net.minecraft.util.datafix.DataFixer;
 import net.minecraft.util.datafix.FixTypes;
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
-import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
-public class TileEntityChest extends TileEntityLockableLoot implements ITickable
+import javax.annotation.Nullable;
+import java.util.List;
+
+public class TileEntityChest extends TileEntityLockableLoot
 {
     private NonNullList<ItemStack> chestContents = NonNullList.<ItemStack>withSize(27, ItemStack.EMPTY);
     public boolean adjacentChestChecked;
@@ -36,7 +37,30 @@
     public int numPlayersUsing;
     private int ticksSinceSync;
     private BlockChest.Type cachedChestType;
-
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    
+    public List<ItemStack> getContents() {
+        return this.chestContents;
+    }
+        
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+    
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+        
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+        
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
     public TileEntityChest()
     {
     }
@@ -109,7 +133,7 @@
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack;
     }
 
     public void updateContainingBlockInfo()
@@ -212,95 +236,6 @@
 
     public void update()
     {
-        this.checkForAdjacentChests();
-        int i = this.pos.getX();
-        int j = this.pos.getY();
-        int k = this.pos.getZ();
-        ++this.ticksSinceSync;
-
-        if (!this.world.isRemote && this.numPlayersUsing != 0 && (this.ticksSinceSync + i + j + k) % 200 == 0)
-        {
-            this.numPlayersUsing = 0;
-            float f = 5.0F;
-
-            for (EntityPlayer entityplayer : this.world.getEntitiesWithinAABB(EntityPlayer.class, new AxisAlignedBB((double)((float)i - 5.0F), (double)((float)j - 5.0F), (double)((float)k - 5.0F), (double)((float)(i + 1) + 5.0F), (double)((float)(j + 1) + 5.0F), (double)((float)(k + 1) + 5.0F))))
-            {
-                if (entityplayer.openContainer instanceof ContainerChest)
-                {
-                    IInventory iinventory = ((ContainerChest)entityplayer.openContainer).getLowerChestInventory();
-
-                    if (iinventory == this || iinventory instanceof InventoryLargeChest && ((InventoryLargeChest)iinventory).isPartOfLargeChest(this))
-                    {
-                        ++this.numPlayersUsing;
-                    }
-                }
-            }
-        }
-
-        this.prevLidAngle = this.lidAngle;
-        float f1 = 0.1F;
-
-        if (this.numPlayersUsing > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null)
-        {
-            double d1 = (double)i + 0.5D;
-            double d2 = (double)k + 0.5D;
-
-            if (this.adjacentChestZPos != null)
-            {
-                d2 += 0.5D;
-            }
-
-            if (this.adjacentChestXPos != null)
-            {
-                d1 += 0.5D;
-            }
-
-            this.world.playSound((EntityPlayer)null, d1, (double)j + 0.5D, d2, SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
-        }
-
-        if (this.numPlayersUsing == 0 && this.lidAngle > 0.0F || this.numPlayersUsing > 0 && this.lidAngle < 1.0F)
-        {
-            float f2 = this.lidAngle;
-
-            if (this.numPlayersUsing > 0)
-            {
-                this.lidAngle += 0.1F;
-            }
-            else
-            {
-                this.lidAngle -= 0.1F;
-            }
-
-            if (this.lidAngle > 1.0F)
-            {
-                this.lidAngle = 1.0F;
-            }
-
-            float f3 = 0.5F;
-
-            if (this.lidAngle < 0.5F && f2 >= 0.5F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null)
-            {
-                double d3 = (double)i + 0.5D;
-                double d0 = (double)k + 0.5D;
-
-                if (this.adjacentChestZPos != null)
-                {
-                    d0 += 0.5D;
-                }
-
-                if (this.adjacentChestXPos != null)
-                {
-                    d3 += 0.5D;
-                }
-
-                this.world.playSound((EntityPlayer)null, d3, (double)j + 0.5D, d0, SoundEvents.BLOCK_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
-            }
-
-            if (this.lidAngle < 0.0F)
-            {
-                this.lidAngle = 0.0F;
-            }
-        }
     }
 
     public boolean receiveClientEvent(int id, int type)
@@ -325,8 +260,40 @@
                 this.numPlayersUsing = 0;
             }
 
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
+
             ++this.numPlayersUsing;
+
+            // Paper start - Move chest open sound out of the tick loop
+            this.update();
+
+            if (this.numPlayersUsing > 0 && this.lidAngle == 0.0F && this.adjacentChestZNeg == null && this.adjacentChestXNeg == null) {
+                this.lidAngle = 0.7F;
+
+                double d0 = (double) this.pos.getZ() + 0.5D;
+                double d1 = (double) this.pos.getX() + 0.5D;
+
+                if (this.adjacentChestZPos != null) {
+                    d0 += 0.5D;
+                }
+
+                if (this.adjacentChestXPos != null) {
+                    d1 += 0.5D;
+                }
+
+                this.world.playSound(null, d1, (double) this.pos.getY() + 0.5D, d0, SoundEvents.BLOCK_CHEST_OPEN, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+            }
+            // Paper end
+            
+            if (this.world == null) return;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
+            if (this.getBlockType() == Blocks.TRAPPED_CHEST) {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
+            }
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
             if (this.getChestType() == BlockChest.Type.TRAP)
@@ -341,6 +308,33 @@
         if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
         {
             --this.numPlayersUsing;
+
+            // Paper start - Move chest close sound out of the tick loop
+            if (this.prevLidAngle == 0 && this.lidAngle > 0.0F || this.prevLidAngle > 0 && this.lidAngle < 1.0F) {
+                float f = 0.1F;
+
+                if (this.prevLidAngle > 0) {
+                    this.lidAngle += f;
+                } else {
+                    this.lidAngle -= f;
+                }
+
+                double d0 = (double) this.getPos().getX() + 0.5D;
+                double d2 = (double) this.getPos().getZ() + 0.5D;
+                int yLoc = this.pos.getY();
+
+                if (this.adjacentChestZPos != null) {
+                    d2 += 0.5D;
+                }
+
+                if (this.adjacentChestXPos != null) {
+                    d0 += 0.5D;
+                }
+
+                this.world.playSound(null, d0, (double) yLoc + 0.5D, d2, SoundEvents.BLOCK_CHEST_CLOSE, SoundCategory.BLOCKS, 0.5F, this.world.rand.nextFloat() * 0.1F + 0.9F);
+                this.lidAngle = 0.0F;
+            }
+            
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
@@ -356,7 +350,7 @@
     @SuppressWarnings("unchecked")
     @Override
     @Nullable
-    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable net.minecraft.util.EnumFacing facing)
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable EnumFacing facing)
     {
         if (capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
         {
