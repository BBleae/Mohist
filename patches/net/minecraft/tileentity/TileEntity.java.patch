--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -1,6 +1,6 @@
 package net.minecraft.tileentity;
 
-import javax.annotation.Nullable;
+import com.destroystokyo.paper.KeyedObject;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockJukebox;
 import net.minecraft.block.state.IBlockState;
@@ -16,16 +16,23 @@
 import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.world.World;
+import net.minecraft.world.chunk.Chunk;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.inventory.InventoryHolder;
 
-public abstract class TileEntity implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
+import javax.annotation.Nullable;
+import java.util.logging.Level;
+
+public abstract class TileEntity implements KeyedObject, net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
+    public boolean isLoadingStructure = false; // Paper
     private static final Logger LOGGER = LogManager.getLogger();
     private static final RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> REGISTRY = new RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> ();
-    protected World world;
+    public World world;
     protected BlockPos pos = BlockPos.ORIGIN;
     protected boolean tileEntityInvalid;
     private int blockMetadata = -1;
@@ -36,12 +43,39 @@
         REGISTRY.putObject(new ResourceLocation(id), clazz);
     }
 
+    // Paper start
+    private java.lang.ref.WeakReference<Chunk> currentChunk = null;
+    public Chunk getCurrentChunk() {
+        final Chunk chunk = currentChunk != null ? currentChunk.get() : world.getChunkIfLoaded(pos.getX() >> 4, pos.getZ() >> 4);
+        return chunk != null && chunk.isLoaded() ? chunk : null;
+    }
+    public void setCurrentChunk(Chunk chunk) {
+        this.currentChunk = chunk != null ? new java.lang.ref.WeakReference<>(chunk) : null;
+    }
+    private String tileEntityKeyString = null;
+    private ResourceLocation tileEntityKey = getResourceLocation();
+
+    @Override
+    public ResourceLocation getResourceLocation() {
+        if (tileEntityKey == null) {
+            tileEntityKey = getKey(this.getClass());
+            tileEntityKeyString = tileEntityKey != null ? tileEntityKey.toString() : null;
+        }
+        return tileEntityKey;
+    }
+
+    @Override
+    public String getResourceLocationString() {
+        getResourceLocation(); // Try to load if it doesn't exists.
+        return tileEntityKeyString;
+    }
+
     @Nullable
-    public static ResourceLocation getKey(Class <? extends TileEntity > clazz)
-    {
+    public static ResourceLocation getKey(Class <? extends TileEntity > clazz) {
         return REGISTRY.getNameForObject(clazz);
     }
 
+    static boolean IGNORE_TILE_UPDATES = false; // Paper
     public World getWorld()
     {
         return this.world;
@@ -108,7 +142,7 @@
         catch (Throwable throwable1)
         {
             LOGGER.error("Failed to create block entity {}", s, throwable1);
-            net.minecraftforge.fml.common.FMLLog.log.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+            LOGGER.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
                     s, oclass == null ? null : oclass.getName(), throwable1);
         }
 
@@ -122,7 +156,7 @@
             catch (Throwable throwable)
             {
                 LOGGER.error("Failed to load data for block entity {}", s, throwable);
-                net.minecraftforge.fml.common.FMLLog.log.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
+                LOGGER.error("A TileEntity {}({}) has thrown an exception during loading, its state cannot be restored. Report this to the mod author",
                         s, oclass.getName(), throwable);
                 tileentity = null;
             }
@@ -154,6 +188,9 @@
     {
         if (this.world != null)
         {
+            if (TileEntity.IGNORE_TILE_UPDATES) {
+                return;
+            }
             IBlockState iblockstate = this.world.getBlockState(this.pos);
             this.blockMetadata = iblockstate.getBlock().getMetaFromState(iblockstate);
             this.world.markChunkDirty(this.pos, this);
@@ -243,7 +280,13 @@
 
         if (this.world != null)
         {
-            CrashReportCategory.addBlockInfo(reportCategory, this.pos, this.getBlockType(), this.getBlockMetadata());
+
+            // Paper start - Prevent TileEntity and Entity crashes
+            Block block = this.getBlockType();
+            if (block != null) {
+                CrashReportCategory.addBlockInfo(reportCategory, this.pos, this.getBlockType(), this.getBlockMetadata());
+            }
+            // Paper end
             reportCategory.addDetail("Actual block type", new ICrashReportDetail<String>()
             {
                 public String call() throws Exception
@@ -315,7 +358,7 @@
      * @param net The NetworkManager the packet originated from
      * @param pkt The data packet
      */
-    public void onDataPacket(net.minecraft.network.NetworkManager net, net.minecraft.network.play.server.SPacketUpdateTileEntity pkt)
+    public void onDataPacket(net.minecraft.network.NetworkManager net, SPacketUpdateTileEntity pkt)
     {
     }
 
@@ -339,16 +382,7 @@
     }
 
     private boolean isVanilla = getClass().getName().startsWith("net.minecraft.");
-    /**
-     * Called from Chunk.setBlockIDWithMetadata and Chunk.fillChunk, determines if this tile entity should be re-created when the ID, or Metadata changes.
-     * Use with caution as this will leave straggler TileEntities, or create conflicts with other TileEntities if not used properly.
-     *
-     * @param world Current world
-     * @param pos Tile's world position
-     * @param oldState The old ID of the block
-     * @param newState The new ID of the block (May be the same)
-     * @return true forcing the invalidation of the existing TE, false not to invalidate the existing TE
-     */
+
     public boolean shouldRefresh(World world, BlockPos pos, IBlockState oldState, IBlockState newSate)
     {
         return isVanilla ? (oldState.getBlock() != newSate.getBlock()) : oldState != newSate;
@@ -359,17 +393,8 @@
         return pass == 0;
     }
 
-    /**
-     * Sometimes default render bounding box: infinite in scope. Used to control rendering on {@link TileEntitySpecialRenderer}.
-     */
     public static final net.minecraft.util.math.AxisAlignedBB INFINITE_EXTENT_AABB = new net.minecraft.util.math.AxisAlignedBB(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
-    /**
-     * Return an {@link AxisAlignedBB} that controls the visible scope of a {@link TileEntitySpecialRenderer} associated with this {@link TileEntity}
-     * Defaults to the collision bounding box {@link Block#getCollisionBoundingBoxFromPool(World, int, int, int)} associated with the block
-     * at this location.
-     *
-     * @return an appropriately size {@link AxisAlignedBB} for the {@link TileEntity}
-     */
+
     @SideOnly(Side.CLIENT)
     public net.minecraft.util.math.AxisAlignedBB getRenderBoundingBox()
     {
@@ -531,4 +556,25 @@
         register("shulker_box", TileEntityShulkerBox.class);
         register("bed", TileEntityBed.class);
     }
+
+    // CraftBukkit start - add method
+    // Paper start
+    public InventoryHolder getOwner() {
+        return getOwner(true);
+    }
+
+    public InventoryHolder getOwner(boolean useSnapshot) {
+        // Paper end
+        if (world == null) return null;
+        // Spigot start
+        final org.bukkit.block.Block block = this.world.getWorld().getBlockAt(this.pos.getX(), this.pos.getY(), this.pos.getZ());
+        if (block == null) {
+            Bukkit.getLogger().log(Level.WARNING, "No block for owner at %s %d %d %d", new Object[] { this.world.getWorld(), this.pos.getX(), this.pos.getY(), this.pos.getZ() });
+            return null;
+        }
+        // Spigot end
+        org.bukkit.block.BlockState state = block.getState(useSnapshot); // Paper
+        if (state instanceof InventoryHolder) return (InventoryHolder) state;
+        return null;
+    }
 }
