--- ../src-base/minecraft/net/minecraft/potion/Potion.java
+++ ../src-work/minecraft/net/minecraft/potion/Potion.java
@@ -1,10 +1,6 @@
 package net.minecraft.potion;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.UUID;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.SharedMonsterAttributes;
@@ -13,7 +9,9 @@
 import net.minecraft.entity.ai.attributes.IAttribute;
 import net.minecraft.entity.ai.attributes.IAttributeInstance;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.MobEffects;
+import net.minecraft.network.play.server.SPacketUpdateHealth;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
@@ -21,7 +19,14 @@
 import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason;
 
+import javax.annotation.Nullable;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.UUID;
+
 public class Potion extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<Potion>
 {
     public static final RegistryNamespaced<ResourceLocation, Potion> REGISTRY = net.minecraftforge.registries.GameData.getWrapper(Potion.class);
@@ -30,7 +35,7 @@
     private final int liquidColor;
     private String name = "";
     private int statusIconIndex = -1;
-    private double effectiveness;
+    public double effectiveness;
     private boolean beneficial;
 
     @Nullable
@@ -78,14 +83,14 @@
         {
             if (entityLivingBaseIn.getHealth() < entityLivingBaseIn.getMaxHealth())
             {
-                entityLivingBaseIn.heal(1.0F);
+                entityLivingBaseIn.heal(1.0F, RegainReason.MAGIC_REGEN);
             }
         }
         else if (this == MobEffects.POISON)
         {
             if (entityLivingBaseIn.getHealth() > 1.0F)
             {
-                entityLivingBaseIn.attackEntityFrom(DamageSource.MAGIC, 1.0F);
+                entityLivingBaseIn.attackEntityFrom(CraftEventFactory.POISON, 1.0F); // CraftBukkit - DamageSource.MAGIC -> CraftEventFactory.POISON
             }
         }
         else if (this == MobEffects.WITHER)
@@ -100,7 +105,19 @@
         {
             if (!entityLivingBaseIn.world.isRemote)
             {
-                ((EntityPlayer)entityLivingBaseIn).getFoodStats().addStats(amplifier + 1, 1.0F);
+                // ((EntityPlayer)entityLivingBaseIn).getFoodStats().addStats(amplifier + 1, 1.0F);
+                // CraftBukkit start
+                EntityPlayer entityhuman = (EntityPlayer) entityLivingBaseIn;
+                int oldFoodLevel = entityhuman.getFoodStats().foodLevel;
+
+                org.bukkit.event.entity.FoodLevelChangeEvent event = CraftEventFactory.callFoodLevelChangeEvent(entityhuman, amplifier + 1 + oldFoodLevel);
+
+                if (!event.isCancelled()) {
+                    entityhuman.getFoodStats().addStats(event.getFoodLevel() - oldFoodLevel, 1.0F);
+                }
+
+                ((EntityPlayerMP) entityhuman).connection.sendPacket(new SPacketUpdateHealth(((EntityPlayerMP) entityhuman).getBukkitEntity().getScaledHealth(), entityhuman.getFoodStats().foodLevel, entityhuman.getFoodStats().foodSaturationLevel));
+                // CraftBukkit end
             }
         }
         else if ((this != MobEffects.INSTANT_HEALTH || entityLivingBaseIn.isEntityUndead()) && (this != MobEffects.INSTANT_DAMAGE || !entityLivingBaseIn.isEntityUndead()))
@@ -112,7 +129,7 @@
         }
         else
         {
-            entityLivingBaseIn.heal((float)Math.max(4 << amplifier, 0));
+            entityLivingBaseIn.heal((float)Math.max(4 << amplifier, 0), RegainReason.MAGIC);
         }
     }
 
@@ -324,19 +341,6 @@
     /**
      * Called to draw the this Potion onto the player's inventory when it's active.
      * This can be used to e.g. render Potion icons from your own texture.
-     * @param x the x coordinate
-     * @param y the y coordinate
-     * @param effect the active PotionEffect
-     * @param mc the Minecraft instance, for convenience
-     * @deprecated use {@link #renderInventoryEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float)}
-     */
-    @SideOnly(Side.CLIENT)
-    @Deprecated // TODO: remove
-    public void renderInventoryEffect(int x, int y, PotionEffect effect, net.minecraft.client.Minecraft mc) { }
-
-    /**
-     * Called to draw the this Potion onto the player's inventory when it's active.
-     * This can be used to e.g. render Potion icons from your own texture.
      *
      * @param effect the active PotionEffect
      * @param gui the gui instance
@@ -351,6 +355,19 @@
     }
 
     /**
+     * Called to draw the this Potion onto the player's inventory when it's active.
+     * This can be used to e.g. render Potion icons from your own texture.
+     * @param x the x coordinate
+     * @param y the y coordinate
+     * @param effect the active PotionEffect
+     * @param mc the Minecraft instance, for convenience
+     * @deprecated use {@link #renderInventoryEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float)}
+     */
+    @SideOnly(Side.CLIENT)
+    @Deprecated // TODO: remove
+    public void renderInventoryEffect(int x, int y, PotionEffect effect, net.minecraft.client.Minecraft mc) { }
+
+    /**
      * Called to draw the this Potion onto the player's ingame HUD when it's active.
      * This can be used to e.g. render Potion icons from your own texture.
      * @param x the x coordinate
@@ -358,10 +375,8 @@
      * @param effect the active PotionEffect
      * @param mc the Minecraft instance, for convenience
      * @param alpha the alpha value, blinks when the potion is about to run out
-     * @deprecated use {@link #renderHUDEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float, float)}
      */
     @SideOnly(Side.CLIENT)
-    @Deprecated // TODO: remove
     public void renderHUDEffect(int x, int y, PotionEffect effect, net.minecraft.client.Minecraft mc, float alpha) { }
 
     /**
@@ -374,13 +389,14 @@
      * @param y the y coordinate
      * @param z the z level
      * @param alpha the alpha value, blinks when the potion is about to run out
+     * @deprecated use {@link #renderHUDEffect(PotionEffect, net.minecraft.client.gui.Gui, int, int, float, float)}
      */
-    @SideOnly(Side.CLIENT)
-    public void renderHUDEffect(PotionEffect effect, net.minecraft.client.gui.Gui gui, int x, int y, float z, float alpha)
+   @SideOnly(Side.CLIENT)
+   @Deprecated // TODO: remove
+   public void renderHUDEffect(PotionEffect effect, net.minecraft.client.gui.Gui gui, int x, int y, float z, float alpha)
     {
-        renderHUDEffect(x, y, effect, net.minecraft.client.Minecraft.getMinecraft(), alpha);
+    	renderHUDEffect(x, y, effect, net.minecraft.client.Minecraft.getMinecraft(), alpha);
     }
-
     /**
      * Get a fresh list of items that can cure this Potion.
      * All new PotionEffects created from this Potion will call this to initialize the default curative items
