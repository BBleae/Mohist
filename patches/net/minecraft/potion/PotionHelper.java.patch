--- ../src-base/minecraft/net/minecraft/potion/PotionHelper.java
+++ ../src-work/minecraft/net/minecraft/potion/PotionHelper.java
@@ -2,7 +2,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
-import java.util.List;
 import net.minecraft.init.Items;
 import net.minecraft.init.PotionTypes;
 import net.minecraft.item.Item;
@@ -11,10 +10,12 @@
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.Ingredient;
 
+import java.util.List;
+
 public class PotionHelper
 {
-    private static final List<PotionHelper.MixPredicate<PotionType>> POTION_TYPE_CONVERSIONS = Lists.<PotionHelper.MixPredicate<PotionType>>newArrayList();
-    private static final List<PotionHelper.MixPredicate<Item>> POTION_ITEM_CONVERSIONS = Lists.<PotionHelper.MixPredicate<Item>>newArrayList();
+    private static final List<MixPredicate<PotionType>> POTION_TYPE_CONVERSIONS = Lists.<MixPredicate<PotionType>>newArrayList();
+    private static final List<MixPredicate<Item>> POTION_ITEM_CONVERSIONS = Lists.<MixPredicate<Item>>newArrayList();
     private static final List<Ingredient> POTION_ITEMS = Lists.<Ingredient>newArrayList();
     private static final Predicate<ItemStack> IS_POTION_ITEM = new Predicate<ItemStack>()
     {
@@ -86,7 +87,7 @@
 
         for (int j = POTION_ITEM_CONVERSIONS.size(); i < j; ++i)
         {
-            PotionHelper.MixPredicate<Item> mixpredicate = (PotionHelper.MixPredicate)POTION_ITEM_CONVERSIONS.get(i);
+            MixPredicate<Item> mixpredicate = (MixPredicate)POTION_ITEM_CONVERSIONS.get(i);
 
             if (mixpredicate.input.get() == item && mixpredicate.reagent.apply(reagent))
             {
@@ -104,7 +105,7 @@
 
         for (int j = POTION_TYPE_CONVERSIONS.size(); i < j; ++i)
         {
-            PotionHelper.MixPredicate<PotionType> mixpredicate = (PotionHelper.MixPredicate)POTION_TYPE_CONVERSIONS.get(i);
+            MixPredicate<PotionType> mixpredicate = (MixPredicate)POTION_TYPE_CONVERSIONS.get(i);
 
             if (mixpredicate.input.get() == potiontype && mixpredicate.reagent.apply(reagent))
             {
@@ -125,11 +126,11 @@
 
             for (int j = POTION_ITEM_CONVERSIONS.size(); i < j; ++i)
             {
-                PotionHelper.MixPredicate<Item> mixpredicate = (PotionHelper.MixPredicate)POTION_ITEM_CONVERSIONS.get(i);
+                MixPredicate<Item> mixpredicate = (MixPredicate)POTION_ITEM_CONVERSIONS.get(i);
 
                 if (mixpredicate.input.get() == item && mixpredicate.reagent.apply(reagent))
                 {
-                    return PotionUtils.addPotionToItemStack(new ItemStack((Item)mixpredicate.output.get()), potiontype);
+                    return PotionUtils.addPotionToItemStack(new ItemStack((Item)mixpredicate.output), potiontype);
                 }
             }
 
@@ -137,11 +138,11 @@
 
             for (int k = POTION_TYPE_CONVERSIONS.size(); i < k; ++i)
             {
-                PotionHelper.MixPredicate<PotionType> mixpredicate1 = (PotionHelper.MixPredicate)POTION_TYPE_CONVERSIONS.get(i);
+                MixPredicate<PotionType> mixpredicate1 = (MixPredicate)POTION_TYPE_CONVERSIONS.get(i);
 
                 if (mixpredicate1.input.get() == potiontype && mixpredicate1.reagent.apply(reagent))
                 {
-                    return PotionUtils.addPotionToItemStack(new ItemStack(item), (PotionType)mixpredicate1.output.get());
+                    return PotionUtils.addPotionToItemStack(new ItemStack(item), (PotionType)mixpredicate1.output);
                 }
             }
         }
@@ -209,7 +210,7 @@
 
     public static void addContainerRecipe(ItemPotion p_193355_0_, Item p_193355_1_, ItemPotion p_193355_2_)
     {
-        POTION_ITEM_CONVERSIONS.add(new PotionHelper.MixPredicate(p_193355_0_, Ingredient.fromItems(p_193355_1_), p_193355_2_));
+        POTION_ITEM_CONVERSIONS.add(new MixPredicate(p_193355_0_, Ingredient.fromItems(p_193355_1_), p_193355_2_));
     }
 
     public static void addContainer(ItemPotion p_193354_0_)
@@ -224,7 +225,7 @@
 
     public static void addMix(PotionType p_193356_0_, Ingredient p_193356_1_, PotionType p_193356_2_)
     {
-        POTION_TYPE_CONVERSIONS.add(new PotionHelper.MixPredicate(p_193356_0_, p_193356_1_, p_193356_2_));
+        POTION_TYPE_CONVERSIONS.add(new MixPredicate(p_193356_0_, p_193356_1_, p_193356_2_));
     }
 
     static class MixPredicate<T extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<T>>
