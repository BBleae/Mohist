--- ../src-base/minecraft/net/minecraft/command/CommandHandler.java
+++ ../src-work/minecraft/net/minecraft/command/CommandHandler.java
@@ -3,12 +3,6 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.math.BlockPos;
@@ -16,7 +10,16 @@
 import net.minecraft.util.text.TextFormatting;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.command.ModCustomCommand;
 
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
 public abstract class CommandHandler implements ICommandManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
@@ -27,11 +30,6 @@
     {
         rawCommand = rawCommand.trim();
 
-        if (rawCommand.startsWith("/"))
-        {
-            rawCommand = rawCommand.substring(1);
-        }
-
         String[] astring = rawCommand.split(" ");
         String s = astring[0];
         astring = dropFirstString(astring);
@@ -48,7 +46,7 @@
                 textcomponenttranslation1.getStyle().setColor(TextFormatting.RED);
                 sender.sendMessage(textcomponenttranslation1);
             }
-            else if (icommand.checkPermission(this.getServer(), sender))
+            else if (true || icommand.checkPermission(this.getServer(), sender)) // Cauldron start - disable check for permissions since we handle it on Bukkit side
             {
                 net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(icommand, sender, astring);
                 if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event))
@@ -144,23 +142,37 @@
 
     protected abstract MinecraftServer getServer();
 
-    public ICommand registerCommand(ICommand command)
-    {
+    public ICommand registerCommand(ICommand command) {
+        // Cauldron start - register commands with permission nodes, defaulting to class name
+    	return registerCommand(command, command.getClass().getName());
+    }
+
+    private ICommand registerCommand(String permissionGroup, ICommand command) {
+        return registerCommand(command, permissionGroup + "." + command.getName());
+    }
+
+    public ICommand registerCommand(ICommand command, String permissionNode) {
+        List<String> list = command.getAliases();
         this.commandMap.put(command.getName(), command);
         this.commandSet.add(command);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = MinecraftServer.getServerInst().server.getCraftCommandMap();
+        ModCustomCommand customCommand = new ModCustomCommand(command.getName());
+        customCommand.setPermission(permissionNode);
+        if (list != null) customCommand.setAliases(list);
+        commandMap.register(command.getName(), customCommand);
 
-        for (String s : command.getAliases())
-        {
-            ICommand icommand = this.commandMap.get(s);
-
-            if (icommand == null || !icommand.getName().equals(s))
-            {
-                this.commandMap.put(s, command);
+        if (list != null) {
+            for (String s : list) {
+                ICommand icommand = (ICommand)this.commandMap.get(s);
+                if (icommand == null || !icommand.getName().equals(s)) {
+                    this.commandMap.put(s, command);
+                }
             }
         }
-
         return command;
     }
+    // Cauldron end
 
     private static String[] dropFirstString(String[] input)
     {
