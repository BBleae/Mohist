--- ../src-base/minecraft/net/minecraft/command/CommandBase.java
+++ ../src-work/minecraft/net/minecraft/command/CommandBase.java
@@ -9,15 +9,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.primitives.Doubles;
 import com.google.gson.JsonParseException;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.UUID;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.BlockStateContainer;
@@ -35,6 +26,10 @@
 import net.minecraft.util.text.TextComponentString;
 import org.apache.commons.lang3.exception.ExceptionUtils;
 
+import javax.annotation.Nullable;
+import java.util.*;
+import java.util.Map.Entry;
+
 public abstract class CommandBase implements ICommand
 {
     private static ICommandListener commandListener;
@@ -436,12 +431,12 @@
         return stringbuilder.toString();
     }
 
-    public static CommandBase.CoordinateArg parseCoordinate(double base, String selectorArg, boolean centerBlock) throws NumberInvalidException
+    public static CoordinateArg parseCoordinate(double base, String selectorArg, boolean centerBlock) throws NumberInvalidException
     {
         return parseCoordinate(base, selectorArg, -30000000, 30000000, centerBlock);
     }
 
-    public static CommandBase.CoordinateArg parseCoordinate(double base, String selectorArg, int min, int max, boolean centerBlock) throws NumberInvalidException
+    public static CoordinateArg parseCoordinate(double base, String selectorArg, int min, int max, boolean centerBlock) throws NumberInvalidException
     {
         boolean flag = selectorArg.startsWith("~");
 
@@ -485,7 +480,7 @@
                 }
             }
 
-            return new CommandBase.CoordinateArg(d1, d0, flag);
+            return new CoordinateArg(d1, d0, flag);
         }
     }
 
@@ -839,6 +834,10 @@
         return region.regionMatches(true, 0, original, 0, original.length());
     }
 
+    public static List<String> getListMatchingLast(String[] args, String... matches) {
+        return getListOfStringsMatchingLastWord(args, matches);
+    }
+
     public static List<String> getListOfStringsMatchingLastWord(String[] args, String... possibilities)
     {
         return getListOfStringsMatchingLastWord(args, Arrays.asList(possibilities));
