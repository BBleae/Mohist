--- ../src-base/minecraft/net/minecraft/server/management/PlayerInteractionManager.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerInteractionManager.java
@@ -1,19 +1,17 @@
 package net.minecraft.server.management;
 
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockChest;
-import net.minecraft.block.BlockCommandBlock;
-import net.minecraft.block.BlockStructure;
+import net.minecraft.block.*;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.init.Blocks;
 import net.minecraft.inventory.IInventory;
 import net.minecraft.item.ItemBlock;
 import net.minecraft.item.ItemStack;
-import net.minecraft.item.ItemSword;
 import net.minecraft.network.play.server.SPacketBlockChange;
 import net.minecraft.network.play.server.SPacketPlayerListItem;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.tileentity.TileEntityChest;
 import net.minecraft.util.ActionResult;
@@ -25,6 +23,10 @@
 import net.minecraft.world.ILockableContainer;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldServer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
 
 public class PlayerInteractionManager
 {
@@ -50,7 +52,7 @@
         this.gameType = type;
         type.configurePlayerCapabilities(this.player.capabilities);
         this.player.sendPlayerAbilities();
-        this.player.mcServer.getPlayerList().sendPacketToAllPlayers(new SPacketPlayerListItem(SPacketPlayerListItem.Action.UPDATE_GAME_MODE, new EntityPlayerMP[] {this.player}));
+        this.player.mcServer.getPlayerList().sendAll(new SPacketPlayerListItem(SPacketPlayerListItem.Action.UPDATE_GAME_MODE, new EntityPlayerMP[] {this.player}), this.player);
         this.world.updateAllPlayersSleepingFlag();
     }
 
@@ -81,7 +83,8 @@
 
     public void updateBlockRemoving()
     {
-        ++this.curblockDamage;
+        // ++this.curblockDamage;
+        this.curblockDamage = MinecraftServer.currentTick;
 
         if (this.receivedFinishDiggingPacket)
         {
@@ -137,6 +140,17 @@
 
     public void onBlockClicked(BlockPos pos, EnumFacing side)
     {
+        PlayerInteractEvent playerInteractEvent = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, pos, side, this.player.inventory.getCurrentItem(), EnumHand.MAIN_HAND);
+        if (playerInteractEvent.isCancelled()) {
+            // Let the client know the block still exists
+            this.player.connection.sendPacket(new SPacketBlockChange(this.world, pos));
+            // Update any tile entity data for this block
+            TileEntity tileentity = this.world.getTileEntity(pos);
+            if (tileentity != null) {
+                this.player.connection.sendPacket(tileentity.getUpdatePacket());
+            }
+            return;
+        }
         double reachDist = player.getEntityAttribute(EntityPlayer.REACH_DISTANCE).getAttributeValue();
         net.minecraftforge.event.entity.player.PlayerInteractEvent.LeftClickBlock event = net.minecraftforge.common.ForgeHooks.onLeftClickBlock(player, pos, side, net.minecraftforge.common.ForgeHooks.rayTraceEyeHitVec(player, reachDist + 1));
         if (event.isCanceled())
@@ -185,8 +199,20 @@
             this.initialDamage = this.curblockDamage;
             float f = 1.0F;
 
-            if (!iblockstate.getBlock().isAir(iblockstate, world, pos))
-            {
+            // CraftBukkit start - Swings at air do *NOT* exist.
+            if (playerInteractEvent.useInteractedBlock() == Event.Result.DENY) {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                IBlockState data = this.world.getBlockState(pos);
+                if (block == Blocks.OAK_DOOR) {
+                    // For some reason *BOTH* the bottom/top part have to be marked updated.
+                    boolean bottom = data.getValue(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
+                    ((EntityPlayerMP) this.player).connection.sendPacket(new SPacketBlockChange(this.world, pos));
+                    ((EntityPlayerMP) this.player).connection.sendPacket(new SPacketBlockChange(this.world, bottom ? pos.up() : pos.down()));
+                } else if (block == Blocks.TRAPDOOR) {
+
+                    ((EntityPlayerMP) this.player).connection.sendPacket(new SPacketBlockChange(this.world, pos));
+                }
+            } else if (iblockstate.getMaterial() != Material.AIR) {
                 if (event.getUseBlock() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
                 {
                     block.onBlockClicked(this.world, pos, this.player);
@@ -200,6 +226,25 @@
                 }
                 f = iblockstate.getPlayerRelativeBlockHardness(this.player, this.player.world, pos);
             }
+            if (playerInteractEvent.useItemInHand() == Event.Result.DENY) {
+                // If we 'insta destroyed' then the client needs to be informed.
+                if (f > 1.0f) {
+                    ((EntityPlayerMP) this.player).connection.sendPacket(new SPacketBlockChange(this.world, pos));
+                }
+                return;
+            }
+            org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, pos.getX(), pos.getY(), pos.getZ(), this.player.inventory.getCurrentItem(), f >= 1.0f);
+
+            if (blockEvent.isCancelled()) {
+                // Let the client know the block still exists
+                ((EntityPlayerMP) this.player).connection.sendPacket(new SPacketBlockChange(this.world, pos));
+                return;
+            }
+
+            if (blockEvent.getInstaBreak()) {
+                f = 2.0f;
+            }
+
             if (event.getUseItem() == net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
             {
                 if (f >= 1.0F)
@@ -230,6 +275,7 @@
     {
         if (pos.equals(this.destroyPos))
         {
+            this.curblockDamage = MinecraftServer.currentTick;
             int i = this.curblockDamage - this.initialDamage;
             IBlockState iblockstate = this.world.getBlockState(pos);
 
@@ -251,6 +297,15 @@
                     this.initialBlockDamage = this.initialDamage;
                 }
             }
+        } else {
+            // CraftBukkit start - Force block reset to client
+            this.player.connection.sendPacket(new SPacketBlockChange(this.world, pos));
+            // CraftBukkit end
+            // update TE for this block
+            TileEntity tileentity = this.world.getTileEntity(pos);
+            if (tileentity != null) {
+                this.player.connection.sendPacket(tileentity.getUpdatePacket());
+            }
         }
     }
 
@@ -328,6 +383,7 @@
                     }
                 }
 
+                // TODO: Implement exp drop from CraftBukkit here
                 // Drop experience
                 if (!this.isCreative() && flag1 && exp > 0)
                 {
@@ -396,9 +452,49 @@
         }
     }
 
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
+
     public EnumActionResult processRightClickBlock(EntityPlayer player, World worldIn, ItemStack stack, EnumHand hand, BlockPos pos, EnumFacing facing, float hitX, float hitY, float hitZ)
     {
-        if (this.gameType == GameType.SPECTATOR)
+        EnumActionResult result = EnumActionResult.FAIL;
+        IBlockState blockdata = world.getBlockState(pos);
+
+        boolean cancelledBlock = false;
+
+        if (this.gameType == GameType.SPECTATOR) {
+            TileEntity tileentity = world.getTileEntity(pos);
+            cancelledBlock = !(tileentity instanceof ILockableContainer || tileentity instanceof IInventory);
+        }
+
+        if (player.getCooldownTracker().hasCooldown(stack.getItem())) {
+            cancelledBlock = true;
+        }
+
+        if (stack.getItem() instanceof ItemBlock  && !player.canUseCommandBlock()) {
+            Block block1 = ((ItemBlock) stack.getItem()).getBlock();
+
+            if (block1 instanceof BlockCommandBlock || block1 instanceof BlockStructure) {
+                cancelledBlock = true;
+            }
+        }
+
+        PlayerInteractEvent bukkitInteractEvent = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, pos, facing, stack, cancelledBlock, hand);
+        firedInteract = true;
+        interactResult = bukkitInteractEvent.useItemInHand() == Event.Result.DENY;
+
+        if (bukkitInteractEvent.useInteractedBlock() == Event.Result.DENY) {
+            // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+            if (blockdata.getBlock() instanceof BlockDoor) {
+                boolean bottom = blockdata.getValue(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
+                ((EntityPlayerMP) player).connection.sendPacket(new SPacketBlockChange(world, bottom ? pos.up() : pos.down()));
+            } else if (blockdata.getBlock() instanceof BlockCake) {
+                ((EntityPlayerMP) player).getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+            }
+            ((EntityPlayerMP) player).getBukkitEntity().updateInventory(); // SPIGOT-2867
+            return (bukkitInteractEvent.useItemInHand() != Event.Result.ALLOW) ? EnumActionResult.SUCCESS : EnumActionResult.PASS;
+        }
+        else if (this.gameType == GameType.SPECTATOR)
         {
             TileEntity tileentity = worldIn.getTileEntity(pos);
 
@@ -433,7 +529,6 @@
                     .onRightClickBlock(player, hand, pos, facing, net.minecraftforge.common.ForgeHooks.rayTraceEyeHitVec(player, reachDist + 1));
             if (event.isCanceled()) return event.getCancellationResult();
 
-            EnumActionResult result = EnumActionResult.PASS;
             if (event.getUseItem() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
             {
                 result = stack.onItemUseFirst(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
@@ -446,10 +541,10 @@
             {
                 IBlockState iblockstate = worldIn.getBlockState(pos);
                 if(event.getUseBlock() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY)
-                if (iblockstate.getBlock().onBlockActivated(worldIn, pos, iblockstate, player, hand, facing, hitX, hitY, hitZ))
-                {
-                    result = EnumActionResult.SUCCESS;
-                }
+                    if (iblockstate.getBlock().onBlockActivated(worldIn, pos, iblockstate, player, hand, facing, hitX, hitY, hitZ))
+                    {
+                        result = EnumActionResult.SUCCESS;
+                    }
             }
 
             if (stack.isEmpty())
@@ -478,10 +573,10 @@
                     int i = stack.getCount();
                     if (result != EnumActionResult.SUCCESS && event.getUseItem() != net.minecraftforge.fml.common.eventhandler.Event.Result.DENY
                             || result == EnumActionResult.SUCCESS && event.getUseItem() == net.minecraftforge.fml.common.eventhandler.Event.Result.ALLOW) {
-                    EnumActionResult enumactionresult = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
-                    stack.setItemDamage(j);
-                    stack.setCount(i);
-                    return enumactionresult;
+                        EnumActionResult enumactionresult = stack.onItemUse(player, worldIn, pos, hand, facing, hitX, hitY, hitZ);
+                        stack.setItemDamage(j);
+                        stack.setCount(i);
+                        return enumactionresult;
                     } else return result;
                 }
                 else
@@ -497,6 +592,7 @@
         }
     }
 
+
     public void setWorld(WorldServer serverWorld)
     {
         this.world = serverWorld;
