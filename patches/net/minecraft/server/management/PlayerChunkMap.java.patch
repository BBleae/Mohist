--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMap.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMap.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.management;
 
+import co.aikar.timings.Timing;
 import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.ComparisonChain;
@@ -7,12 +8,7 @@
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import javax.annotation.Nullable;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -21,30 +17,22 @@
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
 
+import javax.annotation.Nullable;
+import java.util.*;
+
 public class PlayerChunkMap
 {
-    private static final Predicate<EntityPlayerMP> NOT_SPECTATOR = new Predicate<EntityPlayerMP>()
-    {
-        public boolean apply(@Nullable EntityPlayerMP p_apply_1_)
-        {
-            return p_apply_1_ != null && !p_apply_1_.isSpectator();
-        }
-    };
-    private static final Predicate<EntityPlayerMP> CAN_GENERATE_CHUNKS = new Predicate<EntityPlayerMP>()
-    {
-        public boolean apply(@Nullable EntityPlayerMP p_apply_1_)
-        {
-            return p_apply_1_ != null && (!p_apply_1_.isSpectator() || p_apply_1_.getServerWorld().getGameRules().getBoolean("spectatorsGenerateChunks"));
-        }
-    };
+    private static final Predicate<EntityPlayerMP> NOT_SPECTATOR = p_apply_1_ -> p_apply_1_ != null && !p_apply_1_.isSpectator();
+    private static final Predicate<EntityPlayerMP> CAN_GENERATE_CHUNKS = p_apply_1_ -> p_apply_1_ != null && (!p_apply_1_.isSpectator() || p_apply_1_.getServerWorld().getGameRules().getBoolean("spectatorsGenerateChunks"));
     private final WorldServer world;
     private final List<EntityPlayerMP> players = Lists.<EntityPlayerMP>newArrayList();
     private final Long2ObjectMap<PlayerChunkMapEntry> entryMap = new Long2ObjectOpenHashMap<PlayerChunkMapEntry>(4096);
     private final Set<PlayerChunkMapEntry> dirtyEntries = Sets.<PlayerChunkMapEntry>newHashSet();
     private final List<PlayerChunkMapEntry> pendingSendToPlayers = Lists.<PlayerChunkMapEntry>newLinkedList();
     private final List<PlayerChunkMapEntry> entriesWithoutChunks = Lists.<PlayerChunkMapEntry>newLinkedList();
-    private final List<PlayerChunkMapEntry> entries = Lists.<PlayerChunkMapEntry>newArrayList();
+    private final List<PlayerChunkMapEntry> entries = Lists.<PlayerChunkMapEntry>newLinkedList();
     private int playerViewRadius;
+    public int getViewDistance() { return playerViewRadius; } // Paper OBFHELPER
     private long previousTotalWorldTime;
     private boolean sortMissingChunks = true;
     private boolean sortSendToPlayers = true;
@@ -52,7 +40,7 @@
     public PlayerChunkMap(WorldServer serverWorld)
     {
         this.world = serverWorld;
-        this.setPlayerViewRadius(serverWorld.getMinecraftServer().getPlayerList().getViewDistance());
+        this.setPlayerViewRadius(serverWorld.spigotConfig.viewDistance); // Spigot
     }
 
     public WorldServer getWorldServer()
@@ -109,6 +97,7 @@
 
         if (i - this.previousTotalWorldTime > 8000L)
         {
+            try (Timing ignored = world.timings.doChunkMapUpdate.startTiming()) { // Paper
             this.previousTotalWorldTime = i;
 
             for (int j = 0; j < this.entries.size(); ++j)
@@ -117,21 +106,25 @@
                 playerchunkmapentry.update();
                 playerchunkmapentry.updateChunkInhabitedTime();
             }
+            } // Paper timing
         }
 
         if (!this.dirtyEntries.isEmpty())
         {
+            try (Timing ignored = world.timings.doChunkMapToUpdate.startTiming()) { // Paper
             for (PlayerChunkMapEntry playerchunkmapentry2 : this.dirtyEntries)
             {
                 playerchunkmapentry2.update();
             }
 
             this.dirtyEntries.clear();
+            } // Paper timing
         }
 
         if (this.sortMissingChunks && i % 4L == 0L)
         {
             this.sortMissingChunks = false;
+            try (Timing ignored = world.timings.doChunkMapSortMissing.startTiming()) { // Paper
             Collections.sort(this.entriesWithoutChunks, new Comparator<PlayerChunkMapEntry>()
             {
                 public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
@@ -139,11 +132,13 @@
                     return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
                 }
             });
+            } // Paper timing
         }
 
         if (this.sortSendToPlayers && i % 4L == 2L)
         {
             this.sortSendToPlayers = false;
+            try (Timing ignored = world.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
             Collections.sort(this.pendingSendToPlayers, new Comparator<PlayerChunkMapEntry>()
             {
                 public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
@@ -151,10 +146,12 @@
                     return ComparisonChain.start().compare(p_compare_1_.getClosestPlayerDistance(), p_compare_2_.getClosestPlayerDistance()).result();
                 }
             });
+            } // Paper timing
         }
 
         if (!this.entriesWithoutChunks.isEmpty())
         {
+            try (Timing ignored = world.timings.doChunkMapPlayersNeedingChunks.startTiming()) { // Paper
             long l = System.nanoTime() + 50000000L;
             int k = 49;
             Iterator<PlayerChunkMapEntry> iterator = this.entriesWithoutChunks.iterator();
@@ -183,13 +180,18 @@
                             break;
                         }
                     }
+                } else {
+                    // CraftBukkit - SPIGOT-2891: remove once chunk has been provided
+                    iterator.remove();
                 }
             }
+            } // Paper timing
         }
 
         if (!this.pendingSendToPlayers.isEmpty())
         {
             int i1 = 81;
+            try (Timing ignored = world.timings.doChunkMapPendingSendToPlayers.startTiming()) { // Paper
             Iterator<PlayerChunkMapEntry> iterator1 = this.pendingSendToPlayers.iterator();
 
             while (iterator1.hasNext())
@@ -207,16 +209,19 @@
                     }
                 }
             }
+            } // Paper timing
         }
 
         if (this.players.isEmpty())
         {
+            try (Timing ignored = world.timings.doChunkMapUnloadChunks.startTiming()) { // Paper
             WorldProvider worldprovider = this.world.provider;
 
             if (!worldprovider.canRespawnHere())
             {
                 this.world.getChunkProvider().queueUnloadAll();
             }
+            } // Paper timing
         }
     }
 
@@ -257,6 +262,14 @@
         return playerchunkmapentry;
     }
 
+    public final boolean isChunkInUse(int x, int z) {
+        PlayerChunkMapEntry pi = getEntry(x, z);
+        if (pi != null) {
+            return (pi.players.size() > 0);
+        }
+        return false;
+    }
+
     public void markBlockForUpdate(BlockPos pos)
     {
         int i = pos.getX() >> 4;
@@ -276,14 +289,24 @@
         player.managedPosX = player.posX;
         player.managedPosZ = player.posZ;
 
-        for (int k = i - this.playerViewRadius; k <= i + this.playerViewRadius; ++k)
+        List<ChunkPos> chunkList = new LinkedList<>();
+
+        // Paper start - Player view distance API
+        int viewDistance = player.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k)
         {
-            for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l)
             {
-                this.getOrCreateEntry(k, l).addPlayer(player);
+                // Paper end
+                chunkList.add(new ChunkPos(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(player));
+        for (ChunkPos pair : chunkList) {
+            this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+        }
+
         this.players.add(player);
         this.markSortPending();
     }
@@ -337,19 +360,23 @@
         {
             int k = (int)player.managedPosX >> 4;
             int l = (int)player.managedPosZ >> 4;
-            int i1 = this.playerViewRadius;
+            final int viewDistance = player.getViewDistance(); // Paper - Player view distance API
+            int i1 = Math.max(getViewDistance(), viewDistance); // Paper - Player view distance API
             int j1 = i - k;
             int k1 = j - l;
 
+            List<ChunkPos> chunksToLoad = new LinkedList<>();
+
             if (j1 != 0 || k1 != 0)
             {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1)
                 {
                     for (int i2 = j - i1; i2 <= j + i1; ++i2)
                     {
-                        if (!this.overlaps(l1, i2, k, l, i1))
+                        if (!this.overlaps(l1, i2, k, l, viewDistance))  // Paper - Player view distance API
                         {
-                            this.getOrCreateEntry(l1, i2).addPlayer(player);
+                            // this.getOrCreateEntry(l1, i2).addPlayer(player);
+                            chunksToLoad.add(new ChunkPos(l1, i2));
                         }
 
                         if (!this.overlaps(l1 - j1, i2 - k1, i, j, i1))
@@ -367,6 +394,12 @@
                 player.managedPosX = player.posX;
                 player.managedPosZ = player.posZ;
                 this.markSortPending();
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(player));
+                for (ChunkPos pair : chunksToLoad) {
+                    this.getOrCreateEntry(pair.x, pair.z).addPlayer(player);
+                }
+                // CraftBukkit end
             }
         }
     }
@@ -377,50 +410,61 @@
         return playerchunkmapentry != null && playerchunkmapentry.containsPlayer(player) && playerchunkmapentry.isSentToPlayers();
     }
 
-    public void setPlayerViewRadius(int radius)
-    {
+    public final void setViewDistanceForAll(int viewDistance) { this.setPlayerViewRadius(viewDistance); } // Paper - OBFHELPER
+    // Paper start - Separate into two methods
+    public void setPlayerViewRadius(int radius) {
         radius = MathHelper.clamp(radius, 3, 32);
 
-        if (radius != this.playerViewRadius)
-        {
+        if (radius != this.playerViewRadius) {
             int i = radius - this.playerViewRadius;
 
-            for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.players))
-            {
-                int j = (int)entityplayermp.posX >> 4;
-                int k = (int)entityplayermp.posZ >> 4;
+            for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.players)) {
+                this.setViewDistance(entityplayermp, i, false); // Paper - Split, don't mark sort pending, we'll handle it after
+            }
+            this.playerViewRadius = i;
+            this.markSortPending();
+        }
+    }
 
-                if (i > 0)
-                {
-                    for (int j1 = j - radius; j1 <= j + radius; ++j1)
-                    {
-                        for (int k1 = k - radius; k1 <= k + radius; ++k1)
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.getOrCreateEntry(j1, k1);
+    public void setViewDistance(EntityPlayerMP entityplayer, int i) {
+        this.setViewDistance(entityplayer, i, true); // Mark sort pending by default so we don't have to remember to do so all the time
+    }
+    // Copied from above with minor changes
+    public void setViewDistance(EntityPlayerMP entityplayer, int i, boolean markSort) {
+        i = MathHelper.clamp(i, 3, 32);
+        int oldViewDistance = entityplayer.getViewDistance();
+        if (i != oldViewDistance) {
+            int j = i - oldViewDistance;
 
-                            if (!playerchunkmapentry.containsPlayer(entityplayermp))
-                            {
-                                playerchunkmapentry.addPlayer(entityplayermp);
-                            }
+            int k = (int) entityplayer.posX >> 4;
+            int l = (int) entityplayer.posZ >> 4;
+            int i1;
+            int j1;
+
+            if (j > 0) {
+                for (i1 = k - i; i1 <= k + i; ++i1) {
+                    for (j1 = l - i; j1 <= l + i; ++j1) {
+                        PlayerChunkMapEntry playerchunk = this.getOrCreateEntry(i1, j1);
+
+                        if (!playerchunk.containsPlayer(entityplayer)) {
+                            playerchunk.addPlayer(entityplayer);
                         }
                     }
                 }
-                else
-                {
-                    for (int l = j - this.playerViewRadius; l <= j + this.playerViewRadius; ++l)
-                    {
-                        for (int i1 = k - this.playerViewRadius; i1 <= k + this.playerViewRadius; ++i1)
-                        {
-                            if (!this.overlaps(l, i1, j, k, radius))
-                            {
-                                this.getOrCreateEntry(l, i1).removePlayer(entityplayermp);
-                            }
+            } else{
+                for (i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+                    for (j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+                        if (!this.overlaps(i1, j1, k, l, i)) {
+                            this.getOrCreateEntry(i1, j1).removePlayer(entityplayer);
                         }
                     }
                 }
+                if (markSort) {
+                    this.markSortPending();
+                }
             }
 
-            this.playerViewRadius = radius;
+            this.playerViewRadius = i;
             this.markSortPending();
         }
     }
@@ -463,4 +507,63 @@
             this.getWorldServer().getChunkProvider().queueUnload(chunk);
         }
     }
+
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkPos> {
+        private int x;
+        private int z;
+
+        public ChunkCoordComparator (EntityPlayer entityplayer) {
+            x = (int) entityplayer.posX >> 4;
+            z = (int) entityplayer.posZ >> 4;
+        }
+
+        public int compare(ChunkPos a, ChunkPos b) {
+            if (a.equals(b)) {
+                return 0;
+            }
+
+            // Subtract current position to set center point
+            int ax = a.x - this.x;
+            int az = a.z - this.z;
+            int bx = b.x - this.x;
+            int bz = b.z - this.z;
+
+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+            if (result != 0) {
+                return result;
+            }
+
+            if (ax < 0) {
+                if (bx < 0) {
+                    return bz - az;
+                } else {
+                    return -1;
+                }
+            } else {
+                if (bx < 0) {
+                    return 1;
+                } else {
+                    return az - bz;
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
+    // Paper start - Player view distance API
+    public void updateViewDistance(EntityPlayerMP player, int distanceIn) {
+        final int oldViewDistance = player.getViewDistance();
+        int playerViewDistance = MathHelper.clamp(distanceIn, 3, 32);
+        int toSet = playerViewDistance;
+        if (distanceIn < 0) {
+            playerViewDistance = -1;
+            toSet = world.getPlayerChunkMap().getViewDistance();
+        }
+        if (toSet != oldViewDistance) {
+            this.setViewDistance(player, toSet);
+            player.setViewDistance(playerViewDistance);
+        }
+    }
+    // Paper end
 }
