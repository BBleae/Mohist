--- ../src-base/minecraft/net/minecraft/advancements/critereon/PositionTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/PositionTrigger.java
@@ -5,19 +5,20 @@
 import com.google.common.collect.Sets;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import net.minecraft.advancements.ICriterionTrigger;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.world.WorldServer;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 public class PositionTrigger implements ICriterionTrigger<PositionTrigger.Instance>
 {
     private final ResourceLocation id;
-    private final Map<PlayerAdvancements, PositionTrigger.Listeners> listeners = Maps.<PlayerAdvancements, PositionTrigger.Listeners>newHashMap();
+    private final Map<PlayerAdvancements, Listeners> listeners = Maps.<PlayerAdvancements, Listeners>newHashMap();
 
     public PositionTrigger(ResourceLocation id)
     {
@@ -29,22 +30,22 @@
         return this.id;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<PositionTrigger.Instance> listener)
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        PositionTrigger.Listeners positiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners positiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (positiontrigger$listeners == null)
         {
-            positiontrigger$listeners = new PositionTrigger.Listeners(playerAdvancementsIn);
+            positiontrigger$listeners = new Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, positiontrigger$listeners);
         }
 
         positiontrigger$listeners.add(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<PositionTrigger.Instance> listener)
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        PositionTrigger.Listeners positiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners positiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (positiontrigger$listeners != null)
         {
@@ -62,15 +63,15 @@
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public PositionTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
+    public Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
     {
         LocationPredicate locationpredicate = LocationPredicate.deserialize(json);
-        return new PositionTrigger.Instance(this.id, locationpredicate);
+        return new Instance(this.id, locationpredicate);
     }
 
     public void trigger(EntityPlayerMP player)
     {
-        PositionTrigger.Listeners positiontrigger$listeners = this.listeners.get(player.getAdvancements());
+        Listeners positiontrigger$listeners = this.listeners.get(player.getAdvancements());
 
         if (positiontrigger$listeners != null)
         {
@@ -97,7 +98,7 @@
     static class Listeners
         {
             private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<PositionTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<PositionTrigger.Instance>>newHashSet();
+            private final Set<ICriterionTrigger.Listener<Instance>> listeners = Sets.<ICriterionTrigger.Listener<Instance>>newHashSet();
 
             public Listeners(PlayerAdvancements playerAdvancementsIn)
             {
@@ -109,27 +110,27 @@
                 return this.listeners.isEmpty();
             }
 
-            public void add(ICriterionTrigger.Listener<PositionTrigger.Instance> listener)
+            public void add(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.add(listener);
             }
 
-            public void remove(ICriterionTrigger.Listener<PositionTrigger.Instance> listener)
+            public void remove(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.remove(listener);
             }
 
             public void trigger(WorldServer world, double x, double y, double z)
             {
-                List<ICriterionTrigger.Listener<PositionTrigger.Instance>> list = null;
+                List<ICriterionTrigger.Listener<Instance>> list = null;
 
-                for (ICriterionTrigger.Listener<PositionTrigger.Instance> listener : this.listeners)
+                for (ICriterionTrigger.Listener<Instance> listener : this.listeners)
                 {
-                    if (((PositionTrigger.Instance)listener.getCriterionInstance()).test(world, x, y, z))
+                    if (((Instance)listener.getCriterionInstance()).test(world, x, y, z))
                     {
                         if (list == null)
                         {
-                            list = Lists.<ICriterionTrigger.Listener<PositionTrigger.Instance>>newArrayList();
+                            list = Lists.<ICriterionTrigger.Listener<Instance>>newArrayList();
                         }
 
                         list.add(listener);
@@ -138,7 +139,7 @@
 
                 if (list != null)
                 {
-                    for (ICriterionTrigger.Listener<PositionTrigger.Instance> listener1 : list)
+                    for (ICriterionTrigger.Listener<Instance> listener1 : list)
                     {
                         listener1.grantCriterion(this.playerAdvancements);
                     }
