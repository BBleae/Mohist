--- ../src-base/minecraft/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/BrewedPotionTrigger.java
@@ -6,10 +6,6 @@
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.advancements.ICriterionTrigger;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -17,32 +13,37 @@
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.ResourceLocation;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 public class BrewedPotionTrigger implements ICriterionTrigger<BrewedPotionTrigger.Instance>
 {
     private static final ResourceLocation ID = new ResourceLocation("brewed_potion");
-    private final Map<PlayerAdvancements, BrewedPotionTrigger.Listeners> listeners = Maps.<PlayerAdvancements, BrewedPotionTrigger.Listeners>newHashMap();
+    private final Map<PlayerAdvancements, Listeners> listeners = Maps.<PlayerAdvancements, Listeners>newHashMap();
 
     public ResourceLocation getId()
     {
         return ID;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener)
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        BrewedPotionTrigger.Listeners brewedpotiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners brewedpotiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (brewedpotiontrigger$listeners == null)
         {
-            brewedpotiontrigger$listeners = new BrewedPotionTrigger.Listeners(playerAdvancementsIn);
+            brewedpotiontrigger$listeners = new Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, brewedpotiontrigger$listeners);
         }
 
         brewedpotiontrigger$listeners.addListener(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener)
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        BrewedPotionTrigger.Listeners brewedpotiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners brewedpotiontrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (brewedpotiontrigger$listeners != null)
         {
@@ -60,7 +61,7 @@
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public BrewedPotionTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
+    public Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
     {
         PotionType potiontype = null;
 
@@ -76,12 +77,12 @@
             potiontype = PotionType.REGISTRY.getObject(resourcelocation);
         }
 
-        return new BrewedPotionTrigger.Instance(potiontype);
+        return new Instance(potiontype);
     }
 
     public void trigger(EntityPlayerMP player, PotionType potionIn)
     {
-        BrewedPotionTrigger.Listeners brewedpotiontrigger$listeners = this.listeners.get(player.getAdvancements());
+        Listeners brewedpotiontrigger$listeners = this.listeners.get(player.getAdvancements());
 
         if (brewedpotiontrigger$listeners != null)
         {
@@ -108,7 +109,7 @@
     static class Listeners
         {
             private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<BrewedPotionTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<BrewedPotionTrigger.Instance>>newHashSet();
+            private final Set<ICriterionTrigger.Listener<Instance>> listeners = Sets.<ICriterionTrigger.Listener<Instance>>newHashSet();
 
             public Listeners(PlayerAdvancements playerAdvancementsIn)
             {
@@ -120,27 +121,27 @@
                 return this.listeners.isEmpty();
             }
 
-            public void addListener(ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener)
+            public void addListener(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.add(listener);
             }
 
-            public void removeListener(ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener)
+            public void removeListener(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.remove(listener);
             }
 
             public void trigger(PotionType potion)
             {
-                List<ICriterionTrigger.Listener<BrewedPotionTrigger.Instance>> list = null;
+                List<ICriterionTrigger.Listener<Instance>> list = null;
 
-                for (ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener : this.listeners)
+                for (ICriterionTrigger.Listener<Instance> listener : this.listeners)
                 {
-                    if (((BrewedPotionTrigger.Instance)listener.getCriterionInstance()).test(potion))
+                    if (((Instance)listener.getCriterionInstance()).test(potion))
                     {
                         if (list == null)
                         {
-                            list = Lists.<ICriterionTrigger.Listener<BrewedPotionTrigger.Instance>>newArrayList();
+                            list = Lists.<ICriterionTrigger.Listener<Instance>>newArrayList();
                         }
 
                         list.add(listener);
@@ -149,7 +150,7 @@
 
                 if (list != null)
                 {
-                    for (ICriterionTrigger.Listener<BrewedPotionTrigger.Instance> listener1 : list)
+                    for (ICriterionTrigger.Listener<Instance> listener1 : list)
                     {
                         listener1.grantCriterion(this.playerAdvancements);
                     }
