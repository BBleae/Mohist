--- ../src-base/minecraft/net/minecraft/advancements/critereon/MobEffectsPredicate.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/MobEffectsPredicate.java
@@ -4,10 +4,6 @@
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonSyntaxException;
-import java.util.Collections;
-import java.util.Map;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.potion.Potion;
@@ -15,12 +11,17 @@
 import net.minecraft.util.JsonUtils;
 import net.minecraft.util.ResourceLocation;
 
+import javax.annotation.Nullable;
+import java.util.Collections;
+import java.util.Map;
+import java.util.Map.Entry;
+
 public class MobEffectsPredicate
 {
     public static final MobEffectsPredicate ANY = new MobEffectsPredicate(Collections.emptyMap());
-    private final Map<Potion, MobEffectsPredicate.InstancePredicate> effects;
+    private final Map<Potion, InstancePredicate> effects;
 
-    public MobEffectsPredicate(Map<Potion, MobEffectsPredicate.InstancePredicate> effects)
+    public MobEffectsPredicate(Map<Potion, InstancePredicate> effects)
     {
         this.effects = effects;
     }
@@ -50,11 +51,11 @@
         }
         else
         {
-            for (Entry<Potion, MobEffectsPredicate.InstancePredicate> entry : this.effects.entrySet())
+            for (Entry<Potion, InstancePredicate> entry : this.effects.entrySet())
             {
                 PotionEffect potioneffect = potions.get(entry.getKey());
 
-                if (!((MobEffectsPredicate.InstancePredicate)entry.getValue()).test(potioneffect))
+                if (!((InstancePredicate)entry.getValue()).test(potioneffect))
                 {
                     return false;
                 }
@@ -69,7 +70,7 @@
         if (element != null && !element.isJsonNull())
         {
             JsonObject jsonobject = JsonUtils.getJsonObject(element, "effects");
-            Map<Potion, MobEffectsPredicate.InstancePredicate> map = Maps.<Potion, MobEffectsPredicate.InstancePredicate>newHashMap();
+            Map<Potion, InstancePredicate> map = Maps.<Potion, InstancePredicate>newHashMap();
 
             for (Entry<String, JsonElement> entry : jsonobject.entrySet())
             {
@@ -81,7 +82,7 @@
                     throw new JsonSyntaxException("Unknown effect '" + resourcelocation + "'");
                 }
 
-                MobEffectsPredicate.InstancePredicate mobeffectspredicate$instancepredicate = MobEffectsPredicate.InstancePredicate.deserialize(JsonUtils.getJsonObject(entry.getValue(), entry.getKey()));
+                InstancePredicate mobeffectspredicate$instancepredicate = InstancePredicate.deserialize(JsonUtils.getJsonObject(entry.getValue(), entry.getKey()));
                 map.put(potion, mobeffectspredicate$instancepredicate);
             }
 
@@ -134,13 +135,13 @@
                 }
             }
 
-            public static MobEffectsPredicate.InstancePredicate deserialize(JsonObject object)
+            public static InstancePredicate deserialize(JsonObject object)
             {
                 MinMaxBounds minmaxbounds = MinMaxBounds.deserialize(object.get("amplifier"));
                 MinMaxBounds minmaxbounds1 = MinMaxBounds.deserialize(object.get("duration"));
                 Boolean obool = object.has("ambient") ? JsonUtils.getBoolean(object, "ambient") : null;
                 Boolean obool1 = object.has("visible") ? JsonUtils.getBoolean(object, "visible") : null;
-                return new MobEffectsPredicate.InstancePredicate(minmaxbounds, minmaxbounds1, obool, obool1);
+                return new InstancePredicate(minmaxbounds, minmaxbounds1, obool, obool1);
             }
         }
 }
