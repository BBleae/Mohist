--- ../src-base/minecraft/net/minecraft/advancements/critereon/NetherTravelTrigger.java
+++ ../src-work/minecraft/net/minecraft/advancements/critereon/NetherTravelTrigger.java
@@ -5,9 +5,6 @@
 import com.google.common.collect.Sets;
 import com.google.gson.JsonDeserializationContext;
 import com.google.gson.JsonObject;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import net.minecraft.advancements.ICriterionTrigger;
 import net.minecraft.advancements.PlayerAdvancements;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -15,32 +12,36 @@
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.WorldServer;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 public class NetherTravelTrigger implements ICriterionTrigger<NetherTravelTrigger.Instance>
 {
     private static final ResourceLocation ID = new ResourceLocation("nether_travel");
-    private final Map<PlayerAdvancements, NetherTravelTrigger.Listeners> listeners = Maps.<PlayerAdvancements, NetherTravelTrigger.Listeners>newHashMap();
+    private final Map<PlayerAdvancements, Listeners> listeners = Maps.<PlayerAdvancements, Listeners>newHashMap();
 
     public ResourceLocation getId()
     {
         return ID;
     }
 
-    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener)
+    public void addListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        NetherTravelTrigger.Listeners nethertraveltrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners nethertraveltrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (nethertraveltrigger$listeners == null)
         {
-            nethertraveltrigger$listeners = new NetherTravelTrigger.Listeners(playerAdvancementsIn);
+            nethertraveltrigger$listeners = new Listeners(playerAdvancementsIn);
             this.listeners.put(playerAdvancementsIn, nethertraveltrigger$listeners);
         }
 
         nethertraveltrigger$listeners.add(listener);
     }
 
-    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener)
+    public void removeListener(PlayerAdvancements playerAdvancementsIn, ICriterionTrigger.Listener<Instance> listener)
     {
-        NetherTravelTrigger.Listeners nethertraveltrigger$listeners = this.listeners.get(playerAdvancementsIn);
+        Listeners nethertraveltrigger$listeners = this.listeners.get(playerAdvancementsIn);
 
         if (nethertraveltrigger$listeners != null)
         {
@@ -58,17 +59,17 @@
         this.listeners.remove(playerAdvancementsIn);
     }
 
-    public NetherTravelTrigger.Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
+    public Instance deserializeInstance(JsonObject json, JsonDeserializationContext context)
     {
         LocationPredicate locationpredicate = LocationPredicate.deserialize(json.get("entered"));
         LocationPredicate locationpredicate1 = LocationPredicate.deserialize(json.get("exited"));
         DistancePredicate distancepredicate = DistancePredicate.deserialize(json.get("distance"));
-        return new NetherTravelTrigger.Instance(locationpredicate, locationpredicate1, distancepredicate);
+        return new Instance(locationpredicate, locationpredicate1, distancepredicate);
     }
 
     public void trigger(EntityPlayerMP player, Vec3d enteredNetherPosition)
     {
-        NetherTravelTrigger.Listeners nethertraveltrigger$listeners = this.listeners.get(player.getAdvancements());
+        Listeners nethertraveltrigger$listeners = this.listeners.get(player.getAdvancements());
 
         if (nethertraveltrigger$listeners != null)
         {
@@ -110,7 +111,7 @@
     static class Listeners
         {
             private final PlayerAdvancements playerAdvancements;
-            private final Set<ICriterionTrigger.Listener<NetherTravelTrigger.Instance>> listeners = Sets.<ICriterionTrigger.Listener<NetherTravelTrigger.Instance>>newHashSet();
+            private final Set<ICriterionTrigger.Listener<Instance>> listeners = Sets.<ICriterionTrigger.Listener<Instance>>newHashSet();
 
             public Listeners(PlayerAdvancements playerAdvancementsIn)
             {
@@ -122,27 +123,27 @@
                 return this.listeners.isEmpty();
             }
 
-            public void add(ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener)
+            public void add(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.add(listener);
             }
 
-            public void remove(ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener)
+            public void remove(ICriterionTrigger.Listener<Instance> listener)
             {
                 this.listeners.remove(listener);
             }
 
             public void trigger(WorldServer world, Vec3d enteredNetherPosition, double x, double y, double z)
             {
-                List<ICriterionTrigger.Listener<NetherTravelTrigger.Instance>> list = null;
+                List<ICriterionTrigger.Listener<Instance>> list = null;
 
-                for (ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener : this.listeners)
+                for (ICriterionTrigger.Listener<Instance> listener : this.listeners)
                 {
-                    if (((NetherTravelTrigger.Instance)listener.getCriterionInstance()).test(world, enteredNetherPosition, x, y, z))
+                    if (((Instance)listener.getCriterionInstance()).test(world, enteredNetherPosition, x, y, z))
                     {
                         if (list == null)
                         {
-                            list = Lists.<ICriterionTrigger.Listener<NetherTravelTrigger.Instance>>newArrayList();
+                            list = Lists.<ICriterionTrigger.Listener<Instance>>newArrayList();
                         }
 
                         list.add(listener);
@@ -151,7 +152,7 @@
 
                 if (list != null)
                 {
-                    for (ICriterionTrigger.Listener<NetherTravelTrigger.Instance> listener1 : list)
+                    for (ICriterionTrigger.Listener<Instance> listener1 : list)
                     {
                         listener1.grantCriterion(this.playerAdvancements);
                     }
