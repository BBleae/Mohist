--- ../src-base/minecraft/net/minecraft/entity/projectile/EntityArrow.java
+++ ../src-work/minecraft/net/minecraft/entity/projectile/EntityArrow.java
@@ -2,8 +2,6 @@
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
-import java.util.List;
-import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
@@ -12,6 +10,7 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.IProjectile;
 import net.minecraft.entity.MoverType;
+import net.minecraft.entity.item.EntityItem;
 import net.minecraft.entity.monster.EntityEnderman;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
@@ -28,15 +27,18 @@
 import net.minecraft.util.EnumParticleTypes;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.datafix.DataFixer;
-import net.minecraft.util.math.AxisAlignedBB;
-import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
-import net.minecraft.util.math.RayTraceResult;
-import net.minecraft.util.math.Vec3d;
+import net.minecraft.util.math.*;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.player.PlayerPickupArrowEvent;
 
+import javax.annotation.Nullable;
+import java.util.List;
+
 public abstract class EntityArrow extends Entity implements IProjectile
 {
     private static final Predicate<Entity> ARROW_TARGETS = Predicates.and(EntitySelectors.NOT_SPECTATING, EntitySelectors.IS_ALIVE, new Predicate<Entity>()
@@ -47,28 +49,40 @@
         }
     });
     private static final DataParameter<Byte> CRITICAL = EntityDataManager.<Byte>createKey(EntityArrow.class, DataSerializers.BYTE);
-    private int xTile;
-    private int yTile;
-    private int zTile;
+    public int xTile;
+    public int yTile;
+    public int zTile;
     private Block inTile;
     private int inData;
-    protected boolean inGround;
+    public boolean inGround; // Spigot
     protected int timeInGround;
-    public EntityArrow.PickupStatus pickupStatus;
+    public PickupStatus pickupStatus;
     public int arrowShake;
     public Entity shootingEntity;
     private int ticksInGround;
     private int ticksInAir;
     private double damage;
-    private int knockbackStrength;
+    public int knockbackStrength;
 
+    // Spigot Start
+    @Override
+    public void inactiveTick()
+    {
+        if ( this.inGround )
+        {
+            this.ticksInGround += 1; // Despawn counter. First int after shooter
+        }
+        super.inactiveTick();
+    }
+    // Spigot End
+
     public EntityArrow(World worldIn)
     {
         super(worldIn);
         this.xTile = -1;
         this.yTile = -1;
         this.zTile = -1;
-        this.pickupStatus = EntityArrow.PickupStatus.DISALLOWED;
+        this.pickupStatus = PickupStatus.DISALLOWED;
         this.damage = 2.0D;
         this.setSize(0.5F, 0.5F);
     }
@@ -83,10 +97,11 @@
     {
         this(worldIn, shooter.posX, shooter.posY + (double)shooter.getEyeHeight() - 0.10000000149011612D, shooter.posZ);
         this.shootingEntity = shooter;
+        this.projectileSource = (LivingEntity) shooter.getBukkitEntity();
 
         if (shooter instanceof EntityPlayer)
         {
-            this.pickupStatus = EntityArrow.PickupStatus.ALLOWED;
+            this.pickupStatus = PickupStatus.ALLOWED;
         }
     }
 
@@ -222,8 +237,7 @@
             {
                 ++this.ticksInGround;
 
-                if (this.ticksInGround >= 1200)
-                {
+                if (this.ticksInGround >= (pickupStatus != PickupStatus.DISALLOWED ? world.spigotConfig.arrowDespawnRate : world.paperConfig.nonPlayerArrowDespawnRate)) { // Spigot - First int after shooter // Paper
                     this.setDead();
                 }
             }
@@ -262,6 +276,15 @@
                 }
             }
 
+            // Paper start - Call ProjectileCollideEvent
+            if (raytraceresult != null &&raytraceresult.entityHit != null) {
+                com.destroystokyo.paper.event.entity.ProjectileCollideEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileCollideEvent(this, raytraceresult);
+                if (event.isCancelled()) {
+                    raytraceresult = null;
+                }
+            }
+            // Paper end
+
             if (raytraceresult != null && !net.minecraftforge.event.ForgeEventFactory.onProjectileImpact(this, raytraceresult))
             {
                 this.onHit(raytraceresult);
@@ -339,7 +362,7 @@
     protected void onHit(RayTraceResult raytraceResultIn)
     {
         Entity entity = raytraceResultIn.entityHit;
-
+        org.bukkit.craftbukkit.event.CraftEventFactory.callProjectileHitEvent(this, raytraceResultIn);
         if (entity != null)
         {
             float f = MathHelper.sqrt(this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ);
@@ -363,7 +386,12 @@
 
             if (this.isBurning() && !(entity instanceof EntityEnderman))
             {
-                entity.setFire(5);
+//                entity.setFire(5);
+                EntityCombustByEntityEvent combustEvent = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+                org.bukkit.Bukkit.getPluginManager().callEvent(combustEvent);
+                if (!combustEvent.isCancelled()) {
+                    entity.setFire(combustEvent.getDuration());
+                }
             }
 
             if (entity.attackEntityFrom(damagesource, (float)i))
@@ -419,7 +447,7 @@
 
                 if (!this.world.isRemote && this.motionX * this.motionX + this.motionY * this.motionY + this.motionZ * this.motionZ < 0.0010000000474974513D)
                 {
-                    if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED)
+                    if (this.pickupStatus == PickupStatus.ALLOWED)
                     {
                         this.entityDropItem(this.getArrowStack(), 0.1F);
                     }
@@ -556,11 +584,11 @@
 
         if (compound.hasKey("pickup", 99))
         {
-            this.pickupStatus = EntityArrow.PickupStatus.getByOrdinal(compound.getByte("pickup"));
+            this.pickupStatus = PickupStatus.getByOrdinal(compound.getByte("pickup"));
         }
         else if (compound.hasKey("player", 99))
         {
-            this.pickupStatus = compound.getBoolean("player") ? EntityArrow.PickupStatus.ALLOWED : EntityArrow.PickupStatus.DISALLOWED;
+            this.pickupStatus = compound.getBoolean("player") ? PickupStatus.ALLOWED : PickupStatus.DISALLOWED;
         }
 
         this.setIsCritical(compound.getBoolean("crit"));
@@ -570,9 +598,19 @@
     {
         if (!this.world.isRemote && this.inGround && this.arrowShake <= 0)
         {
-            boolean flag = this.pickupStatus == EntityArrow.PickupStatus.ALLOWED || this.pickupStatus == EntityArrow.PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+            ItemStack itemstack = this.getArrowStack();
+            EntityItem item = new EntityItem(this.world, this.posX, this.posY, this.posZ, itemstack);
+            if (this.pickupStatus == PickupStatus.ALLOWED && entityIn.inventory.canHold(itemstack) > 0) {
+                PlayerPickupArrowEvent event = new PlayerPickupArrowEvent((org.bukkit.entity.Player) entityIn.getBukkitEntity(), new org.bukkit.craftbukkit.entity.CraftItem(this.world.getServer(), this, item), (org.bukkit.entity.Arrow) this.getBukkitEntity());
+                this.world.getServer().getPluginManager().callEvent(event);
 
-            if (this.pickupStatus == EntityArrow.PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(this.getArrowStack()))
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            boolean flag = this.pickupStatus == PickupStatus.ALLOWED || this.pickupStatus == PickupStatus.CREATIVE_ONLY && entityIn.capabilities.isCreativeMode;
+
+            if (this.pickupStatus == PickupStatus.ALLOWED && !entityIn.inventory.addItemStackToInventory(item.getItem()))
             {
                 flag = false;
             }
@@ -584,7 +622,6 @@
             }
         }
     }
-
     protected abstract ItemStack getArrowStack();
 
     protected boolean canTriggerWalking()
@@ -655,7 +692,13 @@
 
         if (EnchantmentHelper.getMaxEnchantmentLevel(Enchantments.FLAME, p_190547_1_) > 0)
         {
-            this.setFire(100);
+//            this.setFire(100);
+            EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), 100);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                this.setFire(event.getDuration());
+            }
         }
     }
 
@@ -665,7 +708,7 @@
         ALLOWED,
         CREATIVE_ONLY;
 
-        public static EntityArrow.PickupStatus getByOrdinal(int ordinal)
+        public static PickupStatus getByOrdinal(int ordinal)
         {
             if (ordinal < 0 || ordinal > values().length)
             {
