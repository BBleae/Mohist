--- ../src-base/minecraft/net/minecraft/client/multiplayer/WorldClient.java
+++ ../src-work/minecraft/net/minecraft/client/multiplayer/WorldClient.java
@@ -1,9 +1,6 @@
 package net.minecraft.client.multiplayer;
 
 import com.google.common.collect.Sets;
-import java.util.Random;
-import java.util.Set;
-import javax.annotation.Nullable;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
@@ -32,12 +29,7 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.TextComponentString;
-import net.minecraft.world.DimensionType;
-import net.minecraft.world.EnumDifficulty;
-import net.minecraft.world.EnumSkyBlock;
-import net.minecraft.world.GameType;
-import net.minecraft.world.World;
-import net.minecraft.world.WorldSettings;
+import net.minecraft.world.*;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
 import net.minecraft.world.storage.SaveDataMemoryStorage;
@@ -46,6 +38,10 @@
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
+import javax.annotation.Nullable;
+import java.util.Random;
+import java.util.Set;
+
 @SideOnly(Side.CLIENT)
 public class WorldClient extends World
 {
@@ -115,7 +111,7 @@
         return this.clientChunkProvider;
     }
 
-    protected boolean isChunkLoaded(int x, int z, boolean allowEmpty)
+    public boolean isChunkLoaded(int x, int z, boolean allowEmpty)
     {
         return allowEmpty || !this.getChunkProvider().provideChunk(x, z).isEmpty();
     }
@@ -367,19 +363,21 @@
 
         for (int i = 0; i < this.unloadedEntityList.size(); ++i)
         {
-            Entity entity = this.unloadedEntityList.get(i);
-            int j = entity.chunkCoordX;
-            int k = entity.chunkCoordZ;
+            for (Entity entity : this.unloadedEntityList) {
+                int j = entity.chunkCoordX;
+                int k = entity.chunkCoordZ;
 
-            if (entity.addedToChunk && this.isChunkLoaded(j, k, true))
-            {
-                this.getChunkFromChunkCoords(j, k).removeEntity(entity);
+                if (entity.addedToChunk && this.isChunkLoaded(j, k, true)) {
+                    this.getChunkFromChunkCoords(j, k).removeEntity(entity);
+                }
             }
         }
 
         for (int i1 = 0; i1 < this.unloadedEntityList.size(); ++i1)
         {
-            this.onEntityRemoved(this.unloadedEntityList.get(i1));
+            for (Entity e : this.unloadedEntityList) {
+                this.onEntityRemoved(e);
+            }
         }
 
         this.unloadedEntityList.clear();
