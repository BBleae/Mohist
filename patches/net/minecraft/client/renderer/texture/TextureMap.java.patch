--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -2,12 +2,6 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import java.io.Closeable;
-import java.io.IOException;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.renderer.StitcherException;
 import net.minecraft.client.resources.IResource;
@@ -24,6 +18,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.io.Closeable;
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
 @SideOnly(Side.CLIENT)
 public class TextureMap extends AbstractTexture implements ITickableTextureObject
 {
@@ -99,7 +100,7 @@
         this.listAnimatedSprites.clear();
         int j = Integer.MAX_VALUE;
         int k = 1 << this.mipmapLevels;
-        net.minecraftforge.fml.common.FMLLog.log.info("Max texture size: {}", i);
+        LOGGER.info("Max texture size: {}", i);
         net.minecraftforge.fml.common.ProgressManager.ProgressBar bar = net.minecraftforge.fml.common.ProgressManager.push("Texture stitching", this.mapRegisteredSprites.size());
         loadedSprites.clear();
 
@@ -141,23 +142,18 @@
                 TextureAtlasSprite depSprite = mapRegisteredSprites.get(dependency.toString());
                 j = loadTexture(stitcher, resourceManager, dependency, depSprite, bar, j, k);
             }
-            try
-            {
-            if (textureatlassprite.hasCustomLoader(resourceManager, resourcelocation))
-            {
-                if (textureatlassprite.load(resourceManager, resourcelocation, l -> mapRegisteredSprites.get(l.toString())))
-                {
-                    return j;
+            try {
+                if (textureatlassprite.hasCustomLoader(resourceManager, resourcelocation)) {
+                    if (textureatlassprite.load(resourceManager, resourcelocation, l -> mapRegisteredSprites.get(l.toString()))) {
+                        return j;
+                    }
+                } else {
+                    PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
+                    iresource = resourceManager.getResource(resourcelocation);
+                    boolean flag = iresource.getMetadata("animation") != null;
+                    textureatlassprite.loadSprite(pngsizeinfo, flag);
                 }
             }
-            else
-            {
-                PngSizeInfo pngsizeinfo = PngSizeInfo.makeFromResource(resourceManager.getResource(resourcelocation));
-                iresource = resourceManager.getResource(resourcelocation);
-                boolean flag = iresource.getMetadata("animation") != null;
-                textureatlassprite.loadSprite(pngsizeinfo, flag);
-            }
-            }
             catch (RuntimeException runtimeexception)
             {
                 net.minecraftforge.fml.client.FMLClientHandler.instance().trackBrokenTexture(resourcelocation, runtimeexception.getMessage());
