--- ../src-base/minecraft/net/minecraft/client/resources/ResourcePackRepository.java
+++ ../src-work/minecraft/net/minecraft/client/resources/ResourcePackRepository.java
@@ -7,21 +7,6 @@
 import com.google.common.util.concurrent.Futures;
 import com.google.common.util.concurrent.ListenableFuture;
 import com.google.common.util.concurrent.SettableFuture;
-import java.awt.image.BufferedImage;
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.regex.Pattern;
-import javax.annotation.Nullable;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.GuiScreenWorking;
 import net.minecraft.client.renderer.texture.DynamicTexture;
@@ -44,6 +29,13 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+import javax.annotation.Nullable;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.util.*;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.regex.Pattern;
+
 @SideOnly(Side.CLIENT)
 public class ResourcePackRepository
 {
@@ -66,8 +58,8 @@
     private IResourcePack serverResourcePack;
     private final ReentrantLock lock = new ReentrantLock();
     private ListenableFuture<Object> downloadingPacks;
-    private List<ResourcePackRepository.Entry> repositoryEntriesAll = Lists.<ResourcePackRepository.Entry>newArrayList();
-    private final List<ResourcePackRepository.Entry> repositoryEntries = Lists.<ResourcePackRepository.Entry>newArrayList();
+    private List<Entry> repositoryEntriesAll = Lists.<Entry>newArrayList();
+    private final List<Entry> repositoryEntries = Lists.<Entry>newArrayList();
 
     public ResourcePackRepository(File dirResourcepacksIn, File dirServerResourcepacksIn, IResourcePack rprDefaultResourcePackIn, MetadataSerializer rprMetadataSerializerIn, GameSettings settings)
     {
@@ -83,7 +75,7 @@
         {
             String s = iterator.next();
 
-            for (ResourcePackRepository.Entry resourcepackrepository$entry : this.repositoryEntriesAll)
+            for (Entry resourcepackrepository$entry : this.repositoryEntriesAll)
             {
                 if (resourcepackrepository$entry.getResourcePackName().equals(s))
                 {
@@ -161,11 +153,11 @@
 
     public void updateRepositoryEntriesAll()
     {
-        List<ResourcePackRepository.Entry> list = Lists.<ResourcePackRepository.Entry>newArrayList();
+        List<Entry> list = Lists.<Entry>newArrayList();
 
         for (File file1 : this.getResourcePackFiles())
         {
-            ResourcePackRepository.Entry resourcepackrepository$entry = new ResourcePackRepository.Entry(file1);
+            Entry resourcepackrepository$entry = new Entry(file1);
 
             if (this.repositoryEntriesAll.contains(resourcepackrepository$entry))
             {
@@ -192,7 +184,7 @@
 
         this.repositoryEntriesAll.removeAll(list);
 
-        for (ResourcePackRepository.Entry resourcepackrepository$entry1 : this.repositoryEntriesAll)
+        for (Entry resourcepackrepository$entry1 : this.repositoryEntriesAll)
         {
             resourcepackrepository$entry1.closeResourcePack();
         }
@@ -205,7 +197,7 @@
     {
         if (this.serverResourcePack != null)
         {
-            ResourcePackRepository.Entry resourcepackrepository$entry = new ResourcePackRepository.Entry(this.serverResourcePack);
+            Entry resourcepackrepository$entry = new Entry(this.serverResourcePack);
 
             try
             {
@@ -221,17 +213,17 @@
         return null;
     }
 
-    public List<ResourcePackRepository.Entry> getRepositoryEntriesAll()
+    public List<Entry> getRepositoryEntriesAll()
     {
         return ImmutableList.copyOf(this.repositoryEntriesAll);
     }
 
-    public List<ResourcePackRepository.Entry> getRepositoryEntries()
+    public List<Entry> getRepositoryEntries()
     {
         return ImmutableList.copyOf(this.repositoryEntries);
     }
 
-    public void setRepositories(List<ResourcePackRepository.Entry> repositories)
+    public void setRepositories(List<Entry> repositories)
     {
         this.repositoryEntries.clear();
         this.repositoryEntries.addAll(repositories);
@@ -338,7 +330,7 @@
 
     private boolean validatePack(File p_190112_1_)
     {
-        ResourcePackRepository.Entry resourcepackrepository$entry = new ResourcePackRepository.Entry(p_190112_1_);
+        Entry resourcepackrepository$entry = new Entry(p_190112_1_);
 
         try
         {
@@ -511,7 +503,7 @@
             }
             else
             {
-                return p_equals_1_ instanceof ResourcePackRepository.Entry ? this.toString().equals(p_equals_1_.toString()) : false;
+                return p_equals_1_ instanceof Entry ? this.toString().equals(p_equals_1_.toString()) : false;
             }
         }
 
