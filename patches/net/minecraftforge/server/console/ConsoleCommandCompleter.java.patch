--- ../src-base/minecraft/net/minecraftforge/server/console/ConsoleCommandCompleter.java
+++ ../src-work/minecraft/net/minecraftforge/server/console/ConsoleCommandCompleter.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,23 +19,22 @@
 
 package net.minecraftforge.server.console;
 
-import static com.google.common.base.Preconditions.checkNotNull;
+import jline.console.completer.Completer;
+import net.minecraft.server.dedicated.DedicatedServer;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
+import java.util.Collections;
 import java.util.List;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import static com.google.common.base.Preconditions.checkNotNull;
 
-import net.minecraft.server.dedicated.DedicatedServer;
-import org.jline.reader.Candidate;
-import org.jline.reader.Completer;
-import org.jline.reader.LineReader;
-import org.jline.reader.ParsedLine;
-
-final class ConsoleCommandCompleter implements Completer
+public final class ConsoleCommandCompleter implements Completer
 {
+
     private static final Logger logger = LogManager.getLogger();
     private final DedicatedServer server;
 
@@ -45,9 +44,10 @@
     }
 
     @Override
-    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates)
+    public int complete(String buffer, int cursor, List<CharSequence> candidates)
     {
-        String buffer = line.line();
+        int len = buffer.length();
+
         boolean prefix;
         if (buffer.isEmpty() || buffer.charAt(0) != '/')
         {
@@ -60,19 +60,45 @@
         }
 
         final String input = buffer;
-        Future<List<String>> tabComplete = this.server.callFromMainThread(() -> this.server.getTabCompletions(this.server, input, this.server.getPosition(), false));
+        Future<List<String>> tabComplete = this.server.callFromMainThread(new Callable<List<String>>() {
 
+            @Override
+            public List<String> call() throws Exception
+            {
+                return ConsoleCommandCompleter.this.server.getTabCompletions(ConsoleCommandCompleter.this.server, input,
+                        ConsoleCommandCompleter.this.server.getPosition(), false/*  we're not a command block */);
+            }
+        });
         try
         {
-            for (String completion : tabComplete.get())
+            List<String> completions = tabComplete.get();
+            if (!completions.isEmpty())
+                Collections.sort(completions);
+            if (prefix)
             {
-                if (!completion.isEmpty())
+                candidates.addAll(completions);
+            }
+            else
+            {
+                for (String completion : completions)
                 {
-                    boolean hasPrefix = prefix || completion.charAt(0) != '/';
-                    Candidate candidate = new Candidate(hasPrefix ? completion : completion.substring(1));
-                    candidates.add(candidate);
+                    candidates.add(completion.charAt(0) == '/' ? completion.substring(1) : completion);
                 }
             }
+
+            int pos = buffer.lastIndexOf(' ');
+            if (pos == -1)
+            {
+                return cursor - len;
+            }
+            else if (prefix)
+            {
+                return cursor - len + pos + 1;
+            }
+            else
+            {
+                return cursor - len + pos;
+            }
         }
         catch (InterruptedException e)
         {
@@ -82,6 +108,8 @@
         {
             logger.error("Failed to tab complete", e);
         }
+
+        return cursor;
     }
 
 }
