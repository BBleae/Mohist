--- ../src-base/minecraft/net/minecraftforge/registries/ObjectHolderRegistry.java
+++ ../src-work/minecraft/net/minecraftforge/registries/ObjectHolderRegistry.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,24 +19,22 @@
 
 package net.minecraftforge.registries;
 
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Mod;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.common.registry.GameRegistry.ObjectHolder;
 
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-
 import javax.annotation.Nullable;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
 
 /**
  * Internal registry for tracking {@link ObjectHolder} references
@@ -48,7 +46,7 @@
 
     public void findObjectHolders(ASMDataTable table)
     {
-        FMLLog.log.info("Processing ObjectHolder annotations");
+        Mohist.LOGGER.info("Processing ObjectHolder annotations");
         Set<ASMData> allObjectHolders = table.getAll(GameRegistry.ObjectHolder.class.getName());
         Map<String, String> classModIds = Maps.newHashMap();
         Map<String, Class<?>> classCache = Maps.newHashMap();
@@ -87,7 +85,7 @@
         scanTarget(classModIds, classCache, "net.minecraft.init.Enchantments", null, "minecraft", true, true);
         scanTarget(classModIds, classCache, "net.minecraft.init.SoundEvents", null, "minecraft", true, true);
         scanTarget(classModIds, classCache, "net.minecraft.init.PotionTypes", null, "minecraft", true, true);
-        FMLLog.log.info("Found {} ObjectHolder annotations", objectHolders.size());
+        Mohist.LOGGER.info("Found {} ObjectHolder annotations", objectHolders.size());
     }
 
     private void scanTarget(Map<String, String> classModIds, Map<String, Class<?>> classCache, String className, @Nullable String annotationTarget, String value, boolean isClass, boolean extractFromValue)
@@ -121,7 +119,7 @@
                 String prefix = classModIds.get(className);
                 if (prefix == null)
                 {
-                    FMLLog.log.warn("Found an unqualified ObjectHolder annotation ({}) without a modid context at {}.{}, ignoring", value, className, annotationTarget);
+                    Mohist.LOGGER.warn("Found an unqualified ObjectHolder annotation ({}) without a modid context at {}.{}, ignoring", value, className, annotationTarget);
                     throw new IllegalStateException("Unqualified reference to ObjectHolder");
                 }
                 value = prefix + ":" + value;
@@ -164,12 +162,12 @@
 
     public void applyObjectHolders()
     {
-        FMLLog.log.info("Applying holder lookups");
+        Mohist.LOGGER.info("Applying holder lookups");
         for (ObjectHolderRef ohr : objectHolders)
         {
             ohr.apply();
         }
-        FMLLog.log.info("Holder lookups applied");
+        Mohist.LOGGER.info("Holder lookups applied");
     }
 
 }
