--- ../src-base/minecraft/net/minecraftforge/registries/GameData.java
+++ ../src-work/minecraft/net/minecraftforge/registries/GameData.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,11 +19,9 @@
 
 package net.minecraftforge.registries;
 
-import com.google.common.collect.HashBiMap;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Multimap;
+import cn.pfcraft.server.Mohist;
+import cn.pfcraft.server.inventory.CustomModRecipe;
+import com.google.common.collect.*;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockAir;
 import net.minecraft.block.BlockObserver;
@@ -49,41 +47,23 @@
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.event.RegistryEvent;
 import net.minecraftforge.event.RegistryEvent.MissingMappings;
-import net.minecraftforge.fml.common.EnhancedRuntimeException;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLContainer;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.InjectedModContainer;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.StartupQuery;
-import net.minecraftforge.fml.common.ZipperUtil;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.registry.EntityEntry;
 import net.minecraftforge.fml.common.registry.EntityEntryBuilder;
 import net.minecraftforge.fml.common.registry.GameRegistry;
 import net.minecraftforge.fml.common.registry.VillagerRegistry.VillagerProfession;
+import org.apache.commons.lang3.Validate;
+import org.apache.logging.log4j.Level;
+import org.bukkit.inventory.Recipe;
 
-import com.google.common.collect.ArrayListMultimap;
-import com.google.common.collect.BiMap;
-
+import javax.annotation.Nullable;
 import java.io.IOException;
 import java.lang.reflect.Field;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.IdentityHashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
+import java.util.*;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
-import javax.annotation.Nullable;
-
-import org.apache.commons.lang3.Validate;
-import org.apache.logging.log4j.Level;
-
 /**
  * INTERNAL ONLY
  * MODDERS SHOULD HAVE NO REASON TO USE THIS CLASS
@@ -127,7 +107,7 @@
     {
         if ( DISABLE_VANILLA_REGISTRIES)
         {
-            FMLLog.bigWarning("DISABLING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING! forge.disableVanillaGameData");
+            Mohist.bigWarning("DISABLING VANILLA REGISTRY CREATION AS PER SYSTEM VARIABLE SETTING! forge.disableVanillaGameData");
             return;
         }
         if (hasInit)
@@ -209,7 +189,7 @@
     @SuppressWarnings({ "unchecked", "rawtypes" })
     public static void vanillaSnapshot()
     {
-        FMLLog.log.debug("Creating vanilla freeze snapshot");
+        Mohist.LOGGER.debug("Creating vanilla freeze snapshot");
         for (Map.Entry<ResourceLocation, ForgeRegistry<? extends IForgeRegistryEntry<?>>> r : RegistryManager.ACTIVE.registries.entrySet())
         {
             final Class<? extends IForgeRegistryEntry> clazz = RegistryManager.ACTIVE.getSuperType(r.getKey());
@@ -222,13 +202,13 @@
         });
         RegistryManager.VANILLA.registries.forEach(LOCK_VANILLA);
         RegistryManager.ACTIVE.registries.forEach(LOCK_VANILLA);
-        FMLLog.log.debug("Vanilla freeze snapshot created");
+        Mohist.LOGGER.debug("Vanilla freeze snapshot created");
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
     public static void freezeData()
     {
-        FMLLog.log.debug("Freezing registries");
+        Mohist.LOGGER.debug("Freezing registries");
         for (Map.Entry<ResourceLocation, ForgeRegistry<? extends IForgeRegistryEntry<?>>> r : RegistryManager.ACTIVE.registries.entrySet())
         {
             final Class<? extends IForgeRegistryEntry> clazz = RegistryManager.ACTIVE.getSuperType(r.getKey());
@@ -244,7 +224,7 @@
         // the id mapping is fanilized, no ids actually changed but this is a good place to tell everyone to 'bake' their stuff.
         Loader.instance().fireRemapEvent(ImmutableMap.of(), true);
 
-        FMLLog.log.debug("All registries frozen");
+        Mohist.LOGGER.debug("All registries frozen");
     }
 
     @SuppressWarnings({ "unchecked", "rawtypes" })
@@ -252,12 +232,12 @@
     {
         if (RegistryManager.FROZEN.registries.isEmpty())
         {
-            FMLLog.log.warn("Can't revert to frozen GameData state without freezing first.");
+            Mohist.LOGGER.warn("Can't revert to frozen GameData state without freezing first.");
             return;
         }
         RegistryManager.ACTIVE.registries.forEach((name, reg) -> reg.resetDelegates());
 
-        FMLLog.log.debug("Reverting to frozen data state.");
+        Mohist.LOGGER.debug("Reverting to frozen data state.");
         for (Map.Entry<ResourceLocation, ForgeRegistry<? extends IForgeRegistryEntry<?>>> r : RegistryManager.ACTIVE.registries.entrySet())
         {
             final Class<? extends IForgeRegistryEntry> clazz = RegistryManager.ACTIVE.getSuperType(r.getKey());
@@ -268,16 +248,16 @@
 
         // the id mapping has reverted, ensure we sync up the object holders
         ObjectHolderRegistry.INSTANCE.applyObjectHolders();
-        FMLLog.log.debug("Frozen state restored.");
+        Mohist.LOGGER.debug("Frozen state restored.");
     }
 
     @SuppressWarnings({ "rawtypes", "unchecked" })
     public static void revert(RegistryManager state, ResourceLocation registry, boolean lock)
     {
-        FMLLog.log.debug("Reverting {} to {}", registry, state.getName());
+        Mohist.LOGGER.debug("Reverting {} to {}", registry, state.getName());
         final Class<? extends IForgeRegistryEntry> clazz = RegistryManager.ACTIVE.getSuperType(registry);
         loadRegistry(registry, state, RegistryManager.ACTIVE, clazz, lock);
-        FMLLog.log.debug("Reverting complete");
+        Mohist.LOGGER.debug("Reverting complete");
     }
 
     //Lets us clear the map so we can rebuild it.
@@ -458,6 +438,7 @@
         {
             private static ItemStack result = new ItemStack(Items.DIAMOND, 64);
             private ResourceLocation name;
+            private Recipe bukkitRecip;
 
             @Override
             public IRecipe setRegistryName(ResourceLocation name) {
@@ -471,6 +452,18 @@
             @Override public boolean canFit(int width, int height) { return false; }
             @Override public ItemStack getRecipeOutput() { return result; }
             @Override public boolean isDynamic() { return true; }
+
+            @Override
+            public Recipe toBukkitRecipe() {
+                if (bukkitRecip == null)
+                    bukkitRecip = new CustomModRecipe(this, this.getRegistryName());
+                return this.bukkitRecip;
+            }
+
+            @Override
+            public void setKey(ResourceLocation key) {
+
+            }
         }
     }
 
@@ -498,7 +491,7 @@
             {
                 EntityList.ENTITY_EGGS.put(entry.getRegistryName(), entry.getEgg());
             }
-            @SuppressWarnings("unchecked")
+
             Map<Class<? extends Entity>, EntityEntry> map = owner.getSlaveMap(ENTITY_CLASS_TO_ENTRY, Map.class);
             if (oldEntry != null)
             {
@@ -507,13 +500,11 @@
             map.put(entry.getEntityClass(), entry);
         }
 
-        @Override
         public void onClear(IForgeRegistryInternal<EntityEntry> owner, RegistryManager stage)
         {
             owner.getSlaveMap(ENTITY_CLASS_TO_ENTRY, Map.class).clear();
         }
 
-        @Override
         public void onCreate(IForgeRegistryInternal<EntityEntry> owner, RegistryManager stage)
         {
             owner.setSlaveMap(ENTITY_CLASS_TO_ENTRY, new IdentityHashMap<>());
@@ -563,7 +554,7 @@
     @SuppressWarnings({ "unchecked", "rawtypes" })
     public static Multimap<ResourceLocation, ResourceLocation> injectSnapshot(Map<ResourceLocation, ForgeRegistry.Snapshot> snapshot, boolean injectFrozenData, boolean isLocalWorld)
     {
-        FMLLog.log.info("Injecting existing registry data into this {} instance", FMLCommonHandler.instance().getEffectiveSide().isServer() ? "server" : "client");
+        Mohist.LOGGER.info("Injecting existing registry data into this {} instance", FMLCommonHandler.instance().getEffectiveSide().isServer() ? "server" : "client");
         RegistryManager.ACTIVE.registries.forEach((name, reg) -> reg.validateContent(name));
         RegistryManager.ACTIVE.registries.forEach((name, reg) -> reg.dump(name));
         RegistryManager.ACTIVE.registries.forEach((name, reg) -> reg.resetDelegates());
@@ -613,14 +604,14 @@
                 else if (isLocalWorld)
                 {
                     if (ForgeRegistry.DEBUG)
-                        FMLLog.log.debug("Registry {}: Resuscitating dummy entry {}", key, dummy);
+                        Mohist.LOGGER.debug("Registry {}: Resuscitating dummy entry {}", key, dummy);
                 }
                 else
                 {
                     // The server believes this is a dummy block identity, but we seem to have one locally. This is likely a conflict
                     // in mod setup - Mark this entry as a dummy
                     int id = reg.getID(dummy);
-                    FMLLog.log.warn("Registry {}: The ID {} @ {} is currently locally mapped - it will be replaced with a dummy for this session", dummy, key, id);
+                    Mohist.LOGGER.warn("Registry {}: The ID {} @ {} is currently locally mapped - it will be replaced with a dummy for this session", dummy, key, id);
                     reg.markDummy(dummy, id);
                 }
             });
@@ -629,7 +620,7 @@
         int count = missing.values().stream().mapToInt(Map::size).sum();
         if (count > 0)
         {
-            FMLLog.log.debug("There are {} mappings missing - attempting a mod remap", count);
+            Mohist.LOGGER.debug("There are {} mappings missing - attempting a mod remap", count);
             Multimap<ResourceLocation, ResourceLocation> defaulted = ArrayListMultimap.create();
             Multimap<ResourceLocation, ResourceLocation> failed = ArrayListMultimap.create();
 
@@ -643,8 +634,8 @@
                 List<MissingMappings.Mapping<?>> lst = event.getAllMappings().stream().filter(e -> e.getAction() == MissingMappings.Action.DEFAULT).sorted((a, b) -> a.toString().compareTo(b.toString())).collect(Collectors.toList());
                 if (!lst.isEmpty())
                 {
-                    FMLLog.log.error("Unidentified mapping from registry {}", name);
-                    lst.forEach(map -> FMLLog.log.error("    {}: {}", map.key, map.id));
+                    Mohist.LOGGER.error("Unidentified mapping from registry {}", name);
+                    lst.forEach(map -> Mohist.LOGGER.error("    {}: {}", map.key, map.id));
                 }
                 event.getAllMappings().stream().filter(e -> e.getAction() == MissingMappings.Action.FAIL).forEach(fail -> failed.put(name, fail.key));
 
@@ -683,7 +674,7 @@
                     else
                     {
                         for (int x = 0; x < 10; x++)
-                            FMLLog.log.error("!!!!!!!!!! UPDATING WORLD WITHOUT DOING BACKUP !!!!!!!!!!!!!!!!");
+                            Mohist.LOGGER.error("!!!!!!!!!! UPDATING WORLD WITHOUT DOING BACKUP !!!!!!!!!!!!!!!!");
                     }
                 }
                 catch (IOException e)
@@ -696,7 +687,7 @@
             if (!defaulted.isEmpty())
             {
                 if (isLocalWorld)
-                    FMLLog.log.error("There are unidentified mappings in this world - we are going to attempt to process anyway");
+                    Mohist.LOGGER.error("There are unidentified mappings in this world - we are going to attempt to process anyway");
             }
 
         }
@@ -836,11 +827,11 @@
     /**
      * Check a name for a domain prefix, and if not present infer it from the
      * current active mod container.
-     * 
+     *
      * @param name          The name or resource location
      * @param warnOverrides If true, logs a warning if domain differs from that of
      *                      the currently currently active mod container
-     * 
+     *
      * @return The {@link ResourceLocation} with given or inferred domain
      */
     public static ResourceLocation checkPrefix(String name, boolean warnOverrides)
@@ -852,7 +843,7 @@
         String prefix = mc == null || (mc instanceof InjectedModContainer && ((InjectedModContainer)mc).wrappedContainer instanceof FMLContainer) ? "minecraft" : mc.getModId().toLowerCase(Locale.ROOT);
         if (warnOverrides && !oldPrefix.equals(prefix) && oldPrefix.length() > 0)
         {
-            FMLLog.log.warn("Potentially Dangerous alternative prefix `{}` for name `{}`, expected `{}`. This could be a intended override, but in most cases indicates a broken mod.", oldPrefix, name, prefix);
+           // Mohist.LOGGER.warn("Potentially Dangerous alternative prefix `{}` for name `{}`, expected `{}`. This could be a intended override, but in most cases indicates a broken mod.", oldPrefix, name, prefix);
             prefix = oldPrefix;
         }
         return new ResourceLocation(prefix, name);
@@ -870,8 +861,8 @@
             }
             catch (NoSuchFieldException | SecurityException e)
             {
-                FMLLog.log.error("Could not get `registryName` field from IForgeRegistryEntry.Impl");
-                FMLLog.log.throwing(Level.ERROR, e);
+                Mohist.LOGGER.error("Could not get `registryName` field from IForgeRegistryEntry.Impl");
+                Mohist.LOGGER.throwing(Level.ERROR, e);
                 throw new RuntimeException(e);
             }
         }
@@ -881,8 +872,8 @@
         }
         catch (IllegalArgumentException | IllegalAccessException e)
         {
-            FMLLog.log.error("Could not set `registryName` field in IForgeRegistryEntry.Impl to `{}`", name.toString());
-            FMLLog.log.throwing(Level.ERROR, e);
+            Mohist.LOGGER.error("Could not set `registryName` field in IForgeRegistryEntry.Impl to `{}`", name.toString());
+            Mohist.LOGGER.throwing(Level.ERROR, e);
             throw new RuntimeException(e);
         }
 
