--- ../src-base/minecraft/net/minecraftforge/client/model/MultiModel.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/MultiModel.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,17 +19,11 @@
 
 package net.minecraftforge.client.model;
 
-import java.util.Collection;
-import java.util.EnumMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-
-import javax.annotation.Nullable;
-import javax.vecmath.Matrix4f;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.IBakedModel;
@@ -45,15 +39,13 @@
 import net.minecraft.world.World;
 import net.minecraftforge.common.model.IModelState;
 import net.minecraftforge.common.model.TRSRTransformation;
-import net.minecraftforge.fml.common.FMLLog;
-
 import org.apache.commons.lang3.tuple.Pair;
 
+import javax.annotation.Nullable;
+import javax.vecmath.Matrix4f;
+import java.util.*;
+import java.util.Map.Entry;
 import java.util.function.Function;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 
 // TODO: Switch to vanilla class, or to something similar
 @Deprecated
@@ -153,8 +145,7 @@
         }
 
         @Override
-        public boolean isAmbientOcclusion(IBlockState state)
-        {
+        public boolean isAmbientOcclusion(IBlockState state) {
             return internalBase.isAmbientOcclusion(state);
         }
 
@@ -186,8 +177,7 @@
         public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
         {
             ImmutableList.Builder<BakedQuad> quads = ImmutableList.builder();
-            if (base != null)
-            {
+            if (base != null) {
                 quads.addAll(base.getQuads(state, side, rand));
             }
             for (IBakedModel bakedPart : parts.values())
@@ -289,7 +279,7 @@
 
         if(bakedBase == null && parts.isEmpty())
         {
-            FMLLog.log.error("MultiModel {} is empty (no base model or parts were provided/resolved)", location);
+            Mohist.LOGGER.error("MultiModel {} is empty (no base model or parts were provided/resolved)", location);
             IModel missing = ModelLoaderRegistry.getMissingModel();
             return missing.bake(missing.getDefaultState(), format, bakedTextureGetter);
         }
