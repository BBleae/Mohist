--- ../src-base/minecraft/net/minecraftforge/client/model/ModelFluid.java
+++ ../src-work/minecraft/net/minecraftforge/client/model/ModelFluid.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,16 +19,15 @@
 
 package net.minecraftforge.client.model;
 
-import java.util.function.Function;
-import java.util.Collection;
-import java.util.EnumMap;
-import java.util.List;
-import java.util.Optional;
-
-import javax.annotation.Nullable;
-import javax.vecmath.Matrix4f;
-import javax.vecmath.Vector4f;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.renderer.block.model.BakedQuad;
 import net.minecraft.client.renderer.block.model.IBakedModel;
@@ -48,24 +47,21 @@
 import net.minecraftforge.fluids.BlockFluidBase;
 import net.minecraftforge.fluids.Fluid;
 import net.minecraftforge.fluids.FluidRegistry;
-import net.minecraftforge.fml.common.FMLLog;
-
 import org.apache.commons.lang3.tuple.Pair;
 
-import com.google.common.cache.CacheBuilder;
-import com.google.common.cache.CacheLoader;
-import com.google.common.cache.LoadingCache;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
+import javax.annotation.Nullable;
+import javax.vecmath.Matrix4f;
+import javax.vecmath.Vector4f;
+import java.util.Collection;
+import java.util.EnumMap;
+import java.util.List;
+import java.util.Optional;
+import java.util.function.Function;
 
 public final class ModelFluid implements IModel
 {
     public static final ModelFluid WATER = new ModelFluid(FluidRegistry.WATER);
     public static final ModelFluid LAVA = new ModelFluid(FluidRegistry.LAVA);
-
     private final Fluid fluid;
 
     public ModelFluid(Fluid fluid)
@@ -122,6 +118,7 @@
 
     private static final class CachingBakedFluid extends BakedFluid
     {
+
         private final LoadingCache<Long, BakedFluid> modelCache = CacheBuilder.newBuilder().maximumSize(200).build(new CacheLoader<Long, BakedFluid>()
         {
             @Override
@@ -267,8 +264,7 @@
         protected final boolean gas;
         protected final ImmutableMap<EnumFacing, ImmutableList<BakedQuad>> faceQuads;
 
-        public BakedFluid(Optional<TRSRTransformation> transformation, ImmutableMap<TransformType, TRSRTransformation> transforms, VertexFormat format, int color, TextureAtlasSprite still, TextureAtlasSprite flowing, Optional<TextureAtlasSprite> overlay, boolean gas, boolean statePresent, int[] cornerRound, int flowRound, boolean[] sideOverlays)
-        {
+        public BakedFluid(Optional<TRSRTransformation> transformation, ImmutableMap<TransformType, TRSRTransformation> transforms, VertexFormat format, int color, TextureAtlasSprite still, TextureAtlasSprite flowing, Optional<TextureAtlasSprite> overlay, boolean gas, boolean statePresent, int[] cornerRound, int flowRound, boolean[] sideOverlays) {
             this.transformation = transformation;
             this.transforms = transforms;
             this.format = format;
@@ -330,7 +326,6 @@
 
                     faceQuads.put(top, builder.build());
                 }
-
                 // bottom
                 EnumFacing bottom = top.getOpposite();
                 faceQuads.put(bottom, ImmutableList.of(
@@ -344,8 +339,7 @@
                 ));
 
                 // sides
-                for (int i = 0; i < 4; i++)
-                {
+                for (int i = 0; i < 4; i++){
                     EnumFacing side = EnumFacing.getHorizontal((5 - i) % 4); // [W, S, E, N]
                     boolean useOverlay = overlay.isPresent() && sideOverlays[side.getHorizontalIndex()];
                     int si = i; // local var for lambda capture
@@ -398,13 +392,12 @@
             {
                 int vertex = flip ? 3 - i : i;
                 putVertex(
-                    builder, side, offset,
-                    x.get(vertex), y.get(vertex), z.get(vertex),
-                    texture.getInterpolatedU(u.get(vertex)),
-                    texture.getInterpolatedV(v.get(vertex))
+                        builder, side, offset,
+                        x.get(vertex), y.get(vertex), z.get(vertex),
+                        texture.getInterpolatedU(u.get(vertex)),
+                        texture.getInterpolatedV(v.get(vertex))
                 );
             }
-
             return builder.build();
         }
 
@@ -476,7 +469,7 @@
         @Override
         public List<BakedQuad> getQuads(@Nullable IBlockState state, @Nullable EnumFacing side, long rand)
         {
-            return side == null ? ImmutableList.of() : faceQuads.get(side);
+                return side == null ? ImmutableList.of() : faceQuads.get(side);
         }
 
         @Override
@@ -502,7 +495,7 @@
         String fluid = e.getAsString();
         if(!FluidRegistry.isFluidRegistered(fluid))
         {
-            FMLLog.log.fatal("fluid '{}' not found", fluid);
+            Mohist.LOGGER.fatal("fluid '{}' not found", fluid);
             return WATER;
         }
         return new ModelFluid(FluidRegistry.getFluid(fluid));
