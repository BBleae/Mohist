--- ../src-base/minecraft/net/minecraftforge/fml/server/FMLServerHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/server/FMLServerHandler.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -16,16 +16,10 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
-
 package net.minecraftforge.fml.server;
 
-import java.io.*;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-import java.util.zip.ZipEntry;
-import java.util.zip.ZipFile;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.ImmutableList;
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetHandlerPlayServer;
 import net.minecraft.network.NetworkManager;
@@ -36,20 +30,20 @@
 import net.minecraft.util.text.translation.LanguageMap;
 import net.minecraft.world.storage.SaveFormatOld;
 import net.minecraftforge.common.util.CompoundDataFixer;
-import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.IFMLSidedHandler;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.StartupQuery;
+import net.minecraftforge.fml.common.*;
 import net.minecraftforge.fml.common.eventhandler.EventBus;
 import net.minecraftforge.fml.common.network.FMLNetworkEvent;
 import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
 import net.minecraftforge.fml.relauncher.Side;
-
-import com.google.common.collect.ImmutableList;
 import org.apache.commons.io.IOUtils;
 
+import java.io.*;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
 /**
  * Handles primary communication from hooked code into the system
  *
@@ -166,7 +160,7 @@
     {
         if (query.getResult() == null)
         {
-            FMLLog.log.warn(query.getText());
+            Mohist.LOGGER.warn(query.getText());
             query.finish();
         }
         else
@@ -174,7 +168,7 @@
             String text = query.getText() +
                     "\n\nRun the command /fml confirm or or /fml cancel to proceed." +
                     "\nAlternatively start the server with -Dfml.queryResult=confirm or -Dfml.queryResult=cancel to preselect the answer.";
-            FMLLog.log.warn(text);
+            Mohist.LOGGER.warn(text);
 
             if (!query.isSynchronous()) return; // no-op until mc does commands in another thread (if ever)
 
@@ -195,14 +189,14 @@
 
                         if (cmd.equals("/fml confirm"))
                         {
-                            FMLLog.log.info("confirmed");
+                            Mohist.LOGGER.info("confirmed");
                             query.setResult(true);
                             done = true;
                             it.remove();
                         }
                         else if (cmd.equals("/fml cancel"))
                         {
-                            FMLLog.log.info("cancelled");
+                            Mohist.LOGGER.info("cancelled");
                             query.setResult(false);
                             done = true;
                             it.remove();
@@ -265,7 +259,7 @@
         }
         catch (FileNotFoundException e)
         {
-            FMLLog.log.warn("Missing English translation for {}: {}", container.getModId(), e.getMessage());
+            Mohist.LOGGER.warn("Missing English translation for {}: {}", container.getModId(), e.getMessage());
         }
         catch (IOException e)
         {
@@ -273,7 +267,7 @@
         }
         catch(Exception e)
         {
-            FMLLog.log.error(e);
+            Mohist.LOGGER.error(e);
         }
         finally
         {
@@ -296,7 +290,7 @@
     @Override
     public NetworkManager getClientToServerNetworkManager()
     {
-        throw new RuntimeException("Missing");
+        return null;
     }
     @Override
     public INetHandler getClientPlayHandler()
