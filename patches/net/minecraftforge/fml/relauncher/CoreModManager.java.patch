--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/CoreModManager.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/CoreModManager.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,28 +19,10 @@
 
 package net.minecraftforge.fml.relauncher;
 
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.lang.reflect.Method;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.net.URLClassLoader;
-import java.security.cert.Certificate;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.function.ToIntFunction;
-import java.util.jar.Attributes;
-import java.util.jar.JarFile;
-import java.util.jar.Manifest;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.base.Strings;
+import com.google.common.collect.*;
+import com.google.common.primitives.Ints;
 import net.minecraft.launchwrapper.ITweaker;
 import net.minecraft.launchwrapper.Launch;
 import net.minecraft.launchwrapper.LaunchClassLoader;
@@ -50,29 +32,29 @@
 import net.minecraftforge.fml.common.asm.transformers.ModAccessTransformer;
 import net.minecraftforge.fml.common.launcher.FMLInjectionAndSortingTweaker;
 import net.minecraftforge.fml.common.launcher.FMLTweaker;
-import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.DependsOn;
-import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.MCVersion;
-import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.Name;
-import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.SortingIndex;
-import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.TransformerExclusions;
+import net.minecraftforge.fml.relauncher.IFMLLoadingPlugin.*;
 import net.minecraftforge.fml.relauncher.libraries.Artifact;
 import net.minecraftforge.fml.relauncher.libraries.LibraryManager;
 import net.minecraftforge.fml.relauncher.libraries.Repository;
-
-import com.google.common.base.Strings;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Maps;
-import com.google.common.collect.ObjectArrays;
-import com.google.common.collect.Sets;
-import com.google.common.primitives.Ints;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.core.LoggerContext;
 
+import java.io.*;
+import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.security.cert.Certificate;
+import java.util.*;
+import java.util.function.ToIntFunction;
+import java.util.jar.Attributes;
+import java.util.jar.JarFile;
+import java.util.jar.Manifest;
+
 public class CoreModManager {
     private static final Attributes.Name COREMODCONTAINSFMLMOD = new Attributes.Name("FMLCorePluginContainsFMLMod");
     private static final Attributes.Name MODTYPE = new Attributes.Name("ModType");
-    private static String[] rootPlugins = { "net.minecraftforge.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin" };
+    private static String[] rootPlugins = { "net.minecraftforge.fml.relauncher.FMLCorePlugin", "net.minecraftforge.classloading.FMLForgePlugin"};
     private static List<String> ignoredModFiles = Lists.newArrayList();
     private static Map<String, List<String>> transformers = Maps.newHashMap();
     private static List<FMLPluginWrapper> loadPlugins;
@@ -124,11 +106,11 @@
         @Override
         public void injectIntoClassLoader(LaunchClassLoader classLoader)
         {
-            FMLLog.log.debug("Injecting coremod {} \\{{}\\} class transformers", name, coreModInstance.getClass().getName());
+            Mohist.LOGGER.debug("Injecting coremod {} \\{{}\\} class transformers", name, coreModInstance.getClass().getName());
             List<String> ts = Lists.newArrayList();
             if (coreModInstance.getASMTransformerClass() != null) for (String transformer : coreModInstance.getASMTransformerClass())
             {
-                FMLLog.log.trace("Registering transformer {}", transformer);
+                Mohist.LOGGER.trace("Registering transformer {}", transformer);
                 classLoader.registerTransformer(ASMTransformerWrapper.getTransformerWrapper(classLoader, transformer, name));
                 ts.add(transformer);
             }
@@ -139,14 +121,14 @@
                 else loc = location.getName();
                 transformers.put(name + " (" + loc + ")", ts);
             }
-            FMLLog.log.debug("Injection complete");
+            Mohist.LOGGER.debug("Injection complete");
 
-            FMLLog.log.debug("Running coremod plugin for {} \\{{}\\}", name, coreModInstance.getClass().getName());
+            Mohist.LOGGER.debug("Running coremod plugin for {} \\{{}\\}", name, coreModInstance.getClass().getName());
             Map<String, Object> data = new HashMap<String, Object>();
             data.put("mcLocation", mcDir);
             data.put("coremodList", loadPlugins);
             data.put("runtimeDeobfuscationEnabled", !deobfuscatedEnvironment);
-            FMLLog.log.debug("Running coremod plugin {}", name);
+            Mohist.LOGGER.debug("Running coremod plugin {}", name);
             data.put("coremodLocation", location);
             coreModInstance.injectData(data);
             String setupClass = coreModInstance.getSetupClass();
@@ -169,7 +151,7 @@
                     throw new RuntimeException(e);
                 }
             }
-            FMLLog.log.debug("Coremod plugin class {} run successfully", coreModInstance.getClass().getSimpleName());
+            Mohist.LOGGER.debug("Coremod plugin class {} run successfully", coreModInstance.getClass().getSimpleName());
 
             String modContainer = coreModInstance.getModContainerClass();
             if (modContainer != null)
@@ -204,7 +186,7 @@
             byte[] bs = classLoader.getClassBytes("net.minecraft.world.World");
             if (bs != null)
             {
-                FMLLog.log.info("Managed to load a deobfuscated Minecraft name- we are in a deobfuscated environment. Skipping runtime deobfuscation");
+                Mohist.LOGGER.info("Managed to load a deobfuscated Minecraft name- we are in a deobfuscated environment. Skipping runtime deobfuscation");
                 deobfuscatedEnvironment = true;
             }
         }
@@ -215,7 +197,7 @@
 
         if (!deobfuscatedEnvironment)
         {
-            FMLLog.log.debug("Enabling runtime deobfuscation");
+            Mohist.LOGGER.debug("Enabling runtime deobfuscation");
         }
         else
         {
@@ -249,7 +231,7 @@
             throw new RuntimeException("A fatal error has occurred - no valid fml load plugin was found - this is a completely corrupt FML installation.");
         }
 
-        FMLLog.log.debug("All fundamental core mods are successfully located");
+        Mohist.LOGGER.debug("All fundamental core mods are successfully located");
         // Now that we have the root plugins loaded - lets see what else might
         // be around
         String commandLineCoremods = System.getProperty("fml.coreMods.load", "");
@@ -259,7 +241,7 @@
             {
                 continue;
             }
-            FMLLog.log.info("Found a command line coremod : {}", coreModClassName);
+            Mohist.LOGGER.info("Found a command line coremod : {}", coreModClassName);
             loadCoreMod(classLoader, coreModClassName, null);
         }
         discoverCoreMods(mcDir, classLoader);
@@ -271,22 +253,22 @@
         File[] derplist = listFiles(path -> path.getName().endsWith(".jar.zip"), modDir, modDirVer);
         if (derplist != null && derplist.length > 0)
         {
-            FMLLog.log.fatal("FML has detected several badly downloaded jar files,  which have been named as zip files. You probably need to download them again, or they may not work properly");
+            Mohist.LOGGER.fatal("FML has detected several badly downloaded jar files,  which have been named as zip files. You probably need to download them again, or they may not work properly");
             for (File f : derplist)
-                FMLLog.log.fatal("Problem file : {}", f.getName());
+                Mohist.LOGGER.fatal("Problem file : {}", f.getName());
         }
 
         FileFilter derpdirfilter = pathname -> pathname.isDirectory() && new File(pathname,"META-INF").isDirectory();
         File[] derpdirlist = listFiles(derpdirfilter, modDir, modDirVer);
         if (derpdirlist != null && derpdirlist.length > 0)
         {
-            FMLLog.log.fatal("There appear to be jars extracted into the mods directory. This is VERY BAD and will almost NEVER WORK WELL");
-            FMLLog.log.fatal("You should place original jars only in the mods directory. NEVER extract them to the mods directory.");
-            FMLLog.log.fatal("The directories below appear to be extracted jar files. Fix this before you continue.");
+            Mohist.LOGGER.fatal("There appear to be jars extracted into the mods directory. This is VERY BAD and will almost NEVER WORK WELL");
+            Mohist.LOGGER.fatal("You should place original jars only in the mods directory. NEVER extract them to the mods directory.");
+            Mohist.LOGGER.fatal("The directories below appear to be extracted jar files. Fix this before you continue.");
 
             for (File f : derpdirlist)
             {
-                FMLLog.log.fatal("Directory {} contains {}", f.getName(), Arrays.asList(new File(f,"META-INF").list()));
+                Mohist.LOGGER.fatal("Directory {} contains {}", f.getName(), Arrays.asList(new File(f,"META-INF").list()));
             }
 
             RuntimeException re = new RuntimeException("Extracted mod jars found, loading will NOT continue");
@@ -298,10 +280,10 @@
                 Object crashreport = crashreportclass.getMethod("a", Throwable.class, String.class).invoke(null, re, "FML has discovered extracted jar files in the mods directory.\nThis breaks mod loading functionality completely.\nRemove the directories and replace with the jar files originally provided.");
                 File crashreportfile = new File(new File(modDir.getParentFile(),"crash-reports"),String.format("fml-crash-%1$tY-%1$tm-%1$td_%1$tH.%1$tM.%1$tS.txt",Calendar.getInstance()));
                 crashreportclass.getMethod("a",File.class).invoke(crashreport, crashreportfile);
-                FMLLog.log.fatal("#@!@# FML has crashed the game deliberately. Crash report saved to: #@!@# {}", crashreportfile.getAbsolutePath());
+                Mohist.LOGGER.fatal("#@!@# FML has crashed the game deliberately. Crash report saved to: #@!@# {}", crashreportfile.getAbsolutePath());
             } catch (Exception e)
             {
-                FMLLog.log.fatal("#@!@# FML has crashed while generating a crash report, please report this. #@!@#", e);
+                Mohist.LOGGER.fatal("#@!@# FML has crashed while generating a crash report, please report this. #@!@#", e);
                 // NOOP - hopefully
             }
             throw re;
@@ -334,7 +316,7 @@
         //By the time we get here, all bundeled jars should be extracted to the proper repos.
         //As well as the mods folders being cleaned up {any files that have maven info being moved to maven folder}
 
-        FMLLog.log.debug("Discovering coremods");
+        Mohist.LOGGER.debug("Discovering coremods");
         List<Artifact> maven_canidates = LibraryManager.flattenLists(mcDir);
         List<File> file_canidates = LibraryManager.gatherLegacyCanidates(mcDir);
 
@@ -353,7 +335,7 @@
 
         for (File coreMod : file_canidates)
         {
-            FMLLog.log.debug("Examining for coremod candidacy {}", coreMod.getName());
+            Mohist.LOGGER.debug("Examining for coremod candidacy {}", coreMod.getName());
             JarFile jar = null;
             Attributes mfAttributes;
             String fmlCorePlugin;
@@ -379,7 +361,7 @@
                 String modSide = mfAttributes.getValue(LibraryManager.MODSIDE);
                 if (modSide != null && !"BOTH".equals(modSide) && !FMLLaunchHandler.side().name().equals(modSide))
                 {
-                    FMLLog.log.debug("Mod {} has ModSide meta-inf value {}, and we're {} It will be ignored", coreMod.getName(), modSide, FMLLaunchHandler.side.name());
+                    Mohist.LOGGER.debug("Mod {} has ModSide meta-inf value {}, and we're {} It will be ignored", coreMod.getName(), modSide, FMLLaunchHandler.side.name());
                     ignoredModFiles.add(coreMod.getName());
                     continue;
                 }
@@ -395,7 +377,7 @@
                 String cascadedTweaker = mfAttributes.getValue("TweakClass");
                 if (cascadedTweaker != null)
                 {
-                    FMLLog.log.info("Loading tweaker {} from {}", cascadedTweaker, coreMod.getName());
+                    Mohist.LOGGER.info("Loading tweaker {} from {}", cascadedTweaker, coreMod.getName());
                     Integer sortOrder = Ints.tryParse(Strings.nullToEmpty(mfAttributes.getValue("TweakOrder")));
                     sortOrder = (sortOrder == null ? Integer.valueOf(0) : sortOrder);
                     handleCascadingTweak(coreMod, jar, cascadedTweaker, classLoader, sortOrder);
@@ -406,7 +388,7 @@
 
                 if (!modTypes.contains("FML"))
                 {
-                    FMLLog.log.debug("Adding {} to the list of things to skip. It is not an FML mod, it has types {}", coreMod.getName(), modTypes);
+                    Mohist.LOGGER.debug("Adding {} to the list of things to skip. It is not an FML mod, it has types {}", coreMod.getName(), modTypes);
                     ignoredModFiles.add(coreMod.getName());
                     continue;
                 }
@@ -414,13 +396,13 @@
                 if (fmlCorePlugin == null)
                 {
                     // Not a coremod
-                    FMLLog.log.debug("Not found coremod data in {}", coreMod.getName());
+                    Mohist.LOGGER.debug("Not found coremod data in {}", coreMod.getName());
                     continue;
                 }
             }
             catch (IOException ioe)
             {
-                FMLLog.log.error("Unable to read the jar file {} - ignoring", coreMod.getName(), ioe);
+                Mohist.LOGGER.error("Unable to read the jar file {} - ignoring", coreMod.getName(), ioe);
                 continue;
             }
             finally
@@ -433,19 +415,19 @@
                 classLoader.addURL(coreMod.toURI().toURL());
                 if (!mfAttributes.containsKey(COREMODCONTAINSFMLMOD))
                 {
-                    FMLLog.log.trace("Adding {} to the list of known coremods, it will not be examined again", coreMod.getName());
+                    Mohist.LOGGER.trace("Adding {} to the list of known coremods, it will not be examined again", coreMod.getName());
                     ignoredModFiles.add(coreMod.getName());
                 }
                 else
                 {
-                    FMLLog.log.warn("Found FMLCorePluginContainsFMLMod marker in {}. This is not recommended, @Mods should be in a separate jar from the coremod.",
+                    Mohist.LOGGER.warn("Found FMLCorePluginContainsFMLMod marker in {}. This is not recommended, @Mods should be in a separate jar from the coremod.",
                             coreMod.getName());
                     candidateModFiles.add(coreMod.getName());
                 }
             }
             catch (MalformedURLException e)
             {
-                FMLLog.log.error("Unable to convert file into a URL. weird", e);
+                Mohist.LOGGER.error("Unable to convert file into a URL. weird", e);
                 continue;
             }
             loadCoreMod(classLoader, fmlCorePlugin, coreMod);
@@ -471,7 +453,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.info("There was a problem trying to load the mod dir tweaker {}", coreMod.getAbsolutePath(), e);
+            Mohist.LOGGER.info("There was a problem trying to load the mod dir tweaker {}", coreMod.getAbsolutePath(), e);
         }
     }
 
@@ -522,30 +504,30 @@
         String coreModName = coreModClass.substring(coreModClass.lastIndexOf('.') + 1);
         try
         {
-            FMLLog.log.debug("Instantiating coremod class {}", coreModName);
+            Mohist.LOGGER.debug("Instantiating coremod class {}", coreModName);
             classLoader.addTransformerExclusion(coreModClass);
             Class<?> coreModClazz = Class.forName(coreModClass, true, classLoader);
             Name coreModNameAnn = coreModClazz.getAnnotation(IFMLLoadingPlugin.Name.class);
             if (coreModNameAnn != null && !Strings.isNullOrEmpty(coreModNameAnn.value()))
             {
                 coreModName = coreModNameAnn.value();
-                FMLLog.log.trace("coremod named {} is loading", coreModName);
+                Mohist.LOGGER.trace("coremod named {} is loading", coreModName);
             }
             MCVersion requiredMCVersion = coreModClazz.getAnnotation(IFMLLoadingPlugin.MCVersion.class);
             if (!Arrays.asList(rootPlugins).contains(coreModClass) && (requiredMCVersion == null || Strings.isNullOrEmpty(requiredMCVersion.value())))
             {
-                FMLLog.log.warn("The coremod {} does not have a MCVersion annotation, it may cause issues with this version of Minecraft",
+                Mohist.LOGGER.warn("The coremod {} does not have a MCVersion annotation, it may cause issues with this version of Minecraft",
                         coreModClass);
             }
             else if (requiredMCVersion != null && !FMLInjectionData.mccversion.equals(requiredMCVersion.value()))
             {
-                FMLLog.log.error("The coremod {} is requesting minecraft version {} and minecraft is {}. It will be ignored.", coreModClass,
+                Mohist.LOGGER.error("The coremod {} is requesting minecraft version {} and minecraft is {}. It will be ignored.", coreModClass,
                         requiredMCVersion.value(), FMLInjectionData.mccversion);
                 return null;
             }
             else if (requiredMCVersion != null)
             {
-                FMLLog.log.debug("The coremod {} requested minecraft version {} and minecraft is {}. It will be loaded.", coreModClass,
+                Mohist.LOGGER.debug("The coremod {} requested minecraft version {} and minecraft is {}. It will be loaded.", coreModClass,
                         requiredMCVersion.value(), FMLInjectionData.mccversion);
             }
             TransformerExclusions trExclusions = coreModClazz.getAnnotation(IFMLLoadingPlugin.TransformerExclusions.class);
@@ -571,23 +553,23 @@
             {
                 if (deobfuscatedEnvironment && Arrays.asList(rootPlugins).contains(coreModClass)) //This is probably a forge/mod dev environment - ignore missing forge certificates
                 {
-                    FMLLog.log.info("Ignoring missing certificate for coremod {} ({}), we are in deobf and it's a forge core plugin", coreModName, coreModClass);
+                    Mohist.LOGGER.info("Ignoring missing certificate for coremod {} ({}), we are in deobf and it's a forge core plugin", coreModName, coreModClass);
                 }
                 else if (deobfuscatedEnvironment && location == null) // This is probably a mod dev workspace
                 {
-                    FMLLog.log.info("Ignoring missing certificate for coremod {} ({}), as this is probably a dev workspace", coreModName, coreModClass);
+                    Mohist.LOGGER.info("Ignoring missing certificate for coremod {} ({}), as this is probably a dev workspace", coreModName, coreModClass);
                 }
                 else // This is a probably a normal minecraft workspace - log at warn
                 {
-                    FMLLog.log.warn("The coremod {} ({}) is not signed!", coreModName, coreModClass);
+                    Mohist.LOGGER.warn("The coremod {} ({}) is not signed!", coreModName, coreModClass);
                 }
             }
             else
             {
-                FMLLog.log.debug("Found signing certificates for coremod {} ({})", coreModName, coreModClass);
+                Mohist.LOGGER.debug("Found signing certificates for coremod {} ({})", coreModName, coreModClass);
                 for (String cert : certList)
                 {
-                    FMLLog.log.debug("Found certificate {}", cert);
+                    Mohist.LOGGER.debug("Found certificate {}", cert);
                 }
             }
 
@@ -595,32 +577,32 @@
             String accessTransformerClass = plugin.getAccessTransformerClass();
             if (accessTransformerClass != null)
             {
-                FMLLog.log.debug("Added access transformer class {} to enqueued access transformers", accessTransformerClass);
+                Mohist.LOGGER.debug("Added access transformer class {} to enqueued access transformers", accessTransformerClass);
                 accessTransformers.add(accessTransformerClass);
             }
             FMLPluginWrapper wrap = new FMLPluginWrapper(coreModName, plugin, location, sortIndex, dependencies);
             loadPlugins.add(wrap);
-            FMLLog.log.debug("Enqueued coremod {}", coreModName);
+            Mohist.LOGGER.debug("Enqueued coremod {}", coreModName);
             return wrap;
         }
         catch (ClassNotFoundException cnfe)
         {
             if (!Lists.newArrayList(rootPlugins).contains(coreModClass))
-                FMLLog.log.error("Coremod {}: Unable to class load the plugin {}", coreModName, coreModClass, cnfe);
+                Mohist.LOGGER.error("Coremod {}: Unable to class load the plugin {}", coreModClass, cnfe);
             else
-                FMLLog.log.debug("Skipping root plugin {}", coreModClass);
+                Mohist.LOGGER.debug("Skipping root plugin {}", coreModClass);
         }
         catch (ClassCastException cce)
         {
-            FMLLog.log.error("Coremod {}: The plugin {} is not an implementor of IFMLLoadingPlugin", coreModName, coreModClass, cce);
+            Mohist.LOGGER.error("Coremod {}: The plugin {} is not an implementor of IFMLLoadingPlugin", coreModClass, cce);
         }
         catch (InstantiationException ie)
         {
-            FMLLog.log.error("Coremod {}: The plugin class {} was not instantiable", coreModName, coreModClass, ie);
+            Mohist.LOGGER.error("Coremod {}: The plugin class {} was not instantiable", coreModClass, ie);
         }
         catch (IllegalAccessException iae)
         {
-            FMLLog.log.error("Coremod {}: The plugin class {} was not accessible", coreModName, coreModClass, iae);
+            Mohist.LOGGER.error("Coremod {}: The plugin class {} was not accessible", coreModClass, iae);
         }
         return null;
     }
