--- ../src-base/minecraft/net/minecraftforge/fml/relauncher/FMLLaunchHandler.java
+++ ../src-work/minecraft/net/minecraftforge/fml/relauncher/FMLLaunchHandler.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,16 +19,15 @@
 
 package net.minecraftforge.fml.relauncher;
 
-import java.io.File;
-
+import cn.pfcraft.server.Mohist;
 import net.minecraft.launchwrapper.LaunchClassLoader;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.TracingPrintStream;
 import net.minecraftforge.fml.common.launcher.FMLTweaker;
 import net.minecraftforge.fml.relauncher.libraries.LibraryManager;
-
 import org.apache.logging.log4j.LogManager;
 
+import java.io.File;
+
 public class FMLLaunchHandler
 {
     private static FMLLaunchHandler INSTANCE;
@@ -73,6 +72,7 @@
         this.classLoader.addClassLoaderExclusion("com.google.common.");
         this.classLoader.addClassLoaderExclusion("org.objectweb.asm.");
         this.classLoader.addClassLoaderExclusion("LZMA.");
+        this.classLoader.addClassLoaderExclusion("jdk.nashorn.");
     }
 
     private void setupClient()
@@ -91,15 +91,15 @@
     {
         FMLInjectionData.build(minecraftHome, classLoader);
         redirectStdOutputToLog();
-        FMLLog.log.info("Forge Mod Loader version {}.{}.{}.{} for Minecraft {} loading", FMLInjectionData.major, FMLInjectionData.minor,
+        Mohist.LOGGER.info("Forge Mod Loader version {}.{}.{}.{} for Minecraft {} loading", FMLInjectionData.major, FMLInjectionData.minor,
                 FMLInjectionData.rev, FMLInjectionData.build, FMLInjectionData.mccversion);
-        FMLLog.log.info("Java is {}, version {}, running on {}:{}:{}, installed at {}", System.getProperty("java.vm.name"), System.getProperty("java.version"), System.getProperty("os.name"), System.getProperty("os.arch"), System.getProperty("os.version"), System.getProperty("java.home"));
-        FMLLog.log.debug("Java classpath at launch is:");
+        Mohist.LOGGER.info("Java is {}, version {}, running on {}:{}:{}, installed at {}", System.getProperty("java.vm.name"), System.getProperty("java.version"), System.getProperty("os.name"), System.getProperty("os.arch"), System.getProperty("os.version"), System.getProperty("java.home"));
+        Mohist.LOGGER.debug("Java classpath at launch is:");
         for (String path : System.getProperty("java.class.path").split(File.pathSeparator))
-            FMLLog.log.debug("    {}", path);
-        FMLLog.log.debug("Java library path at launch is:");
+            Mohist.LOGGER.debug("    {}", path);
+        Mohist.LOGGER.debug("Java library path at launch is:");
         for (String path : System.getProperty("java.library.path").split(File.pathSeparator))
-            FMLLog.log.debug("    {}", path);
+            Mohist.LOGGER.debug("    {}", path);
 
         try
         {
@@ -114,7 +114,7 @@
 
     private void redirectStdOutputToLog()
     {
-        FMLLog.log.debug("Injecting tracing printstreams for STDOUT/STDERR.");
+        Mohist.LOGGER.debug("Injecting tracing printstreams for STDOUT/STDERR.");
         System.setOut(new TracingPrintStream(LogManager.getLogger("STDOUT"), System.out));
         System.setErr(new TracingPrintStream(LogManager.getLogger("STDERR"), System.err));
     }
