--- ../src-base/minecraft/net/minecraftforge/fml/client/SplashProgress.java
+++ ../src-work/minecraft/net/minecraftforge/fml/client/SplashProgress.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,55 +19,21 @@
 
 package net.minecraftforge.fml.client;
 
-import static org.lwjgl.opengl.GL11.*;
-import static org.lwjgl.opengl.GL12.*;
-
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.Reader;
-import java.io.Writer;
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.nio.IntBuffer;
-import java.nio.charset.StandardCharsets;
-import java.util.Iterator;
-import java.util.Properties;
-import java.util.concurrent.Semaphore;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
-
-import javax.annotation.Nonnull;
-import javax.annotation.Nullable;
-import javax.imageio.ImageIO;
-import javax.imageio.ImageReader;
-import javax.imageio.stream.ImageInputStream;
-
+import cn.pfcraft.server.Mohist;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.gui.FontRenderer;
 import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.texture.TextureManager;
-import net.minecraft.client.resources.DefaultResourcePack;
-import net.minecraft.client.resources.FileResourcePack;
-import net.minecraft.client.resources.FolderResourcePack;
-import net.minecraft.client.resources.IResource;
-import net.minecraft.client.resources.IResourcePack;
-import net.minecraft.client.resources.SimpleResource;
+import net.minecraft.client.resources.*;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.launchwrapper.Launch;
 import net.minecraft.util.ResourceLocation;
 import net.minecraftforge.fml.common.EnhancedRuntimeException;
 import net.minecraftforge.fml.common.FMLCommonHandler;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.ICrashCallable;
 import net.minecraftforge.fml.common.ProgressManager;
 import net.minecraftforge.fml.common.ProgressManager.ProgressBar;
 import net.minecraftforge.fml.common.asm.FMLSanityChecker;
-
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.lwjgl.BufferUtils;
@@ -77,6 +43,26 @@
 import org.lwjgl.opengl.SharedDrawable;
 import org.lwjgl.util.glu.GLU;
 
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import javax.imageio.ImageIO;
+import javax.imageio.ImageReader;
+import javax.imageio.stream.ImageInputStream;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.nio.IntBuffer;
+import java.nio.charset.StandardCharsets;
+import java.util.Iterator;
+import java.util.Properties;
+import java.util.concurrent.Semaphore;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+
+import static org.lwjgl.opengl.GL11.*;
+import static org.lwjgl.opengl.GL12.GL_BGRA;
+import static org.lwjgl.opengl.GL12.GL_UNSIGNED_INT_8_8_8_8_REV;
+
 /**
  * Not a fully fleshed out API, may change in future MC versions.
  * However feel free to use and suggest additions.
@@ -160,7 +146,7 @@
         }
         catch(IOException e)
         {
-            FMLLog.log.info("Could not load splash.properties, will create a default one");
+            Mohist.LOGGER.info("Could not load splash.properties, will create a default one");
         }
 
         //Some systems do not support this and have weird effects, so we need to detect and disable them by default.
@@ -195,7 +181,7 @@
         }
         catch(IOException e)
         {
-            FMLLog.log.error("Could not save the splash.properties file", e);
+            Mohist.LOGGER.error("Could not save the splash.properties file", e);
         }
 
         miscPack = createResourcePack(miscPackFile);
@@ -222,7 +208,7 @@
         CrashReport report = CrashReport.makeCrashReport(new Throwable(), "Loading screen debug info");
         StringBuilder systemDetailsBuilder = new StringBuilder();
         report.getCategory().appendToStringBuilder(systemDetailsBuilder);
-        FMLLog.log.info(systemDetailsBuilder.toString());
+        Mohist.LOGGER.info(systemDetailsBuilder.toString());
 
         try
         {
@@ -232,7 +218,7 @@
         }
         catch (LWJGLException e)
         {
-            FMLLog.log.error("Error starting SplashProgress:", e);
+            Mohist.LOGGER.error("Error starting SplashProgress:", e);
             disableSplash(e);
         }
 
@@ -390,13 +376,13 @@
                         if (!isDisplayVSyncForced)
                         {
                             isDisplayVSyncForced = true;
-                            FMLLog.log.info("Using alternative sync timing : {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
+                            Mohist.LOGGER.info("Using alternative sync timing : {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
                         }
                         try { Thread.sleep(16); } catch (InterruptedException ie) {}
                     } else
                     {
                         if (framecount ==TIMING_FRAME_COUNT) {
-                            FMLLog.log.info("Using sync timing. {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
+                            Mohist.LOGGER.info("Using sync timing. {} frames of Display.update took {} nanos", TIMING_FRAME_COUNT, updateTiming);
                         }
                         Display.sync(100);
                     }
@@ -529,7 +515,7 @@
                 }
                 catch (LWJGLException e)
                 {
-                    FMLLog.log.error("Error setting GL context:", e);
+                    Mohist.LOGGER.error("Error setting GL context:", e);
                     throw new RuntimeException(e);
                 }
                 glClearColor((float)((backgroundColor >> 16) & 0xFF) / 0xFF, (float)((backgroundColor >> 8) & 0xFF) / 0xFF, (float)(backgroundColor & 0xFF) / 0xFF, 1);
@@ -556,7 +542,7 @@
                 }
                 catch (LWJGLException e)
                 {
-                    FMLLog.log.error("Error releasing GL context:", e);
+                    Mohist.LOGGER.error("Error releasing GL context:", e);
                     throw new RuntimeException(e);
                 }
                 finally
@@ -570,7 +556,7 @@
             @Override
             public void uncaughtException(Thread t, Throwable e)
             {
-                FMLLog.log.error("Splash thread Exception", e);
+                Mohist.LOGGER.error("Splash thread Exception", e);
                 threadError = e;
             }
         });
@@ -621,7 +607,7 @@
         }
         catch (LWJGLException e)
         {
-            FMLLog.log.error("Error setting GL context:", e);
+            Mohist.LOGGER.error("Error setting GL context:", e);
             throw new RuntimeException(e);
         }
     }
@@ -642,7 +628,7 @@
         }
         catch (LWJGLException e)
         {
-            FMLLog.log.error("Error releasing GL context:", e);
+            Mohist.LOGGER.error("Error releasing GL context:", e);
             throw new RuntimeException(e);
         }
         lock.unlock();
@@ -665,7 +651,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Error finishing SplashProgress:", e);
+            Mohist.LOGGER.error("Error finishing SplashProgress:", e);
             disableSplash(e);
         }
     }
@@ -718,7 +704,7 @@
         }
         catch(IOException e)
         {
-            FMLLog.log.error("Could not save the splash.properties file", e);
+            Mohist.LOGGER.error("Could not save the splash.properties file", e);
             return false;
         }
         return true;
@@ -824,7 +810,7 @@
             }
             catch(IOException e)
             {
-                FMLLog.log.error("Error reading texture from file: {}", location, e);
+                Mohist.LOGGER.error("Error reading texture from file: {}", location, e);
                 throw new RuntimeException(e);
             }
             finally
