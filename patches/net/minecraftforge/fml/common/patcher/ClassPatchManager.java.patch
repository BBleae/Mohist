--- ../src-base/minecraft/net/minecraftforge/fml/common/patcher/ClassPatchManager.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/patcher/ClassPatchManager.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,27 +19,8 @@
 
 package net.minecraftforge.fml.common.patcher;
 
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.jar.JarEntry;
-import java.util.jar.JarInputStream;
-import java.util.jar.JarOutputStream;
-import java.util.jar.Pack200;
-import java.util.regex.Pattern;
-
-import net.minecraft.launchwrapper.LaunchClassLoader;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.repackage.com.nothome.delta.GDiffPatcher;
 import LZMA.LzmaInputStream;
-
+import cn.pfcraft.server.Mohist;
 import com.google.common.base.Joiner;
 import com.google.common.collect.ArrayListMultimap;
 import com.google.common.collect.ListMultimap;
@@ -48,7 +29,21 @@
 import com.google.common.io.ByteArrayDataInput;
 import com.google.common.io.ByteStreams;
 import com.google.common.io.Files;
+import net.minecraft.launchwrapper.LaunchClassLoader;
+import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
+import net.minecraftforge.fml.relauncher.Side;
+import net.minecraftforge.fml.repackage.com.nothome.delta.GDiffPatcher;
 
+import java.io.*;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.jar.JarEntry;
+import java.util.jar.JarInputStream;
+import java.util.jar.JarOutputStream;
+import java.util.jar.Pack200;
+import java.util.regex.Pattern;
+
 public class ClassPatchManager {
     //Must be ABOVE INSTANCE so they get set in time for the constructor.
     public static final boolean dumpPatched = Boolean.parseBoolean(System.getProperty("fml.dumpPatchedClasses", "false"));
@@ -66,7 +61,7 @@
         if (dumpPatched)
         {
             tempDir = Files.createTempDir();
-            FMLLog.log.info("Dumping patched classes to {}",tempDir.getAbsolutePath());
+            Mohist.LOGGER.info("Dumping patched classes to {}",tempDir.getAbsolutePath());
         }
     }
 
@@ -92,12 +87,12 @@
         }
         boolean ignoredError = false;
         if (DEBUG)
-            FMLLog.log.debug("Runtime patching class {} (input size {}), found {} patch{}", mappedName, (inputData == null ? 0 : inputData.length), list.size(), list.size()!=1 ? "es" : "");
+            Mohist.LOGGER.debug("Runtime patching class {} (input size {}), found {} patch{}", mappedName, (inputData == null ? 0 : inputData.length), list.size(), list.size()!=1 ? "es" : "");
         for (ClassPatch patch: list)
         {
             if (!patch.targetClassName.equals(mappedName) && !patch.sourceClassName.equals(name))
             {
-                FMLLog.log.warn("Binary patch found {} for wrong class {}", patch.targetClassName, mappedName);
+                Mohist.LOGGER.warn("Binary patch found {} for wrong class {}", patch.targetClassName, mappedName);
             }
             if (!patch.existsAtTarget && (inputData == null || inputData.length == 0))
             {
@@ -105,11 +100,11 @@
             }
             else if (!patch.existsAtTarget)
             {
-                FMLLog.log.warn("Patcher expecting empty class data file for {}, but received non-empty", patch.targetClassName);
+                Mohist.LOGGER.warn("Patcher expecting empty class data file for {}, but received non-empty", patch.targetClassName);
             }
             else if (patch.existsAtTarget && (inputData == null || inputData.length == 0))
             {
-                FMLLog.log.fatal("Patcher expecting non-empty class data file for {}, but received empty.", patch.targetClassName);
+                Mohist.LOGGER.fatal("Patcher expecting non-empty class data file for {}, but received empty.", patch.targetClassName);
                 throw new RuntimeException(String.format("Patcher expecting non-empty class data file for %s, but received empty, your vanilla jar may be corrupt.", patch.targetClassName));
             }
             else
@@ -117,15 +112,15 @@
                 int inputChecksum = Hashing.adler32().hashBytes(inputData).asInt();
                 if (patch.inputChecksum != inputChecksum)
                 {
-                    FMLLog.log.fatal("There is a binary discrepancy between the expected input class {} ({}) and the actual class. Checksum on disk is {}, in patch {}. Things are probably about to go very wrong. Did you put something into the jar file?", mappedName, name, Integer.toHexString(inputChecksum), Integer.toHexString(patch.inputChecksum));
+                    Mohist.LOGGER.fatal("There is a binary discrepancy between the expected input class {} ({}) and the actual class. Checksum on disk is {}, in patch {}. Things are probably about to go very wrong. Did you put something into the jar file?", mappedName, name, Integer.toHexString(inputChecksum), Integer.toHexString(patch.inputChecksum));
                     if (!Boolean.parseBoolean(System.getProperty("fml.ignorePatchDiscrepancies","false")))
                     {
-                        FMLLog.log.fatal("The game is going to exit, because this is a critical error, and it is very improbable that the modded game will work, please obtain clean jar files.");
+                        Mohist.LOGGER.fatal("The game is going to exit, because this is a critical error, and it is very improbable that the modded game will work, please obtain clean jar files.");
                         System.exit(1);
                     }
                     else
                     {
-                        FMLLog.log.fatal("FML is going to ignore this error, note that the patch will not be applied, and there is likely to be a malfunctioning behaviour, including not running at all");
+                        Mohist.LOGGER.fatal("FML is going to ignore this error, note that the patch will not be applied, and there is likely to be a malfunctioning behaviour, including not running at all");
                         ignoredError = true;
                         continue;
                     }
@@ -139,14 +134,14 @@
                 }
                 catch (IOException e)
                 {
-                    FMLLog.log.error("Encountered problem runtime patching class {}", name, e);
+                    Mohist.LOGGER.error("Encountered problem runtime patching class {}", name, e);
                     continue;
                 }
             }
         }
         if (!ignoredError && DEBUG)
         {
-            FMLLog.log.debug("Successfully applied runtime patches for {} (new size {})", mappedName, inputData.length);
+            Mohist.LOGGER.debug("Successfully applied runtime patches for {} (new size {})", mappedName, inputData.length);
         }
         if (dumpPatched)
         {
@@ -156,7 +151,7 @@
             }
             catch (IOException e)
             {
-                FMLLog.log.error(FMLLog.log.getMessageFactory().newMessage("Failed to write {} to {}", mappedName, tempDir.getAbsolutePath()), e);
+                Mohist.LOGGER.error(Mohist.LOGGER.getMessageFactory().newMessage("Failed to write {} to {}", mappedName, tempDir.getAbsolutePath()), e);
             }
         }
         patchedClasses.put(name,inputData);
@@ -174,7 +169,7 @@
             {
                 if (!FMLLaunchHandler.isDeobfuscatedEnvironment())
                 {
-                    FMLLog.log.fatal("The binary patch set is missing, things are not going to work!");
+                    Mohist.LOGGER.fatal("The binary patch set is missing, things are not going to work!");
                 }
                 return;
             }
@@ -217,16 +212,16 @@
             {
             }
         } while (true);
-        FMLLog.log.debug("Read {} binary patches", patches.size());
+        Mohist.LOGGER.debug("Read {} binary patches", patches.size());
         if (DEBUG)
-            FMLLog.log.debug("Patch list :\n\t{}", Joiner.on("\t\n").join(patches.asMap().entrySet()));
+            Mohist.LOGGER.debug("Patch list :\n\t{}", Joiner.on("\t\n").join(patches.asMap().entrySet()));
         patchedClasses.clear();
     }
 
     private ClassPatch readPatch(JarEntry patchEntry, JarInputStream jis)
     {
         if (DEBUG)
-            FMLLog.log.trace("Reading patch data from {}", patchEntry.getName());
+            Mohist.LOGGER.trace("Reading patch data from {}", patchEntry.getName());
         ByteArrayDataInput input;
         try
         {
@@ -234,7 +229,7 @@
         }
         catch (IOException e)
         {
-            FMLLog.log.warn(FMLLog.log.getMessageFactory().newMessage("Unable to read binpatch file {} - ignoring", patchEntry.getName()), e);
+            Mohist.LOGGER.warn(Mohist.LOGGER.getMessageFactory().newMessage("Unable to read binpatch file {} - ignoring", patchEntry.getName()), e);
             return null;
         }
         String name = input.readUTF();
