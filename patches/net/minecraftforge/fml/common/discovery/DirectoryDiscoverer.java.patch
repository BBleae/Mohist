--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/DirectoryDiscoverer.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,26 +19,23 @@
 
 package net.minecraftforge.fml.common.discovery;
 
-import java.io.File;
-import java.io.FileFilter;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-import java.util.regex.Matcher;
-
-import net.minecraftforge.fml.common.FMLLog;
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.Lists;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.common.MetadataCollection;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.ModContainerFactory;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
-
 import org.apache.commons.io.IOUtils;
 
-import com.google.common.collect.Lists;
-
 import javax.annotation.Nullable;
+import java.io.File;
+import java.io.FileFilter;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.List;
+import java.util.regex.Matcher;
 
 public class DirectoryDiscoverer implements ITypeDiscoverer
 {
@@ -58,7 +55,7 @@
     {
         this.table = table;
         List<ModContainer> found = Lists.newArrayList();
-        FMLLog.log.debug("Examining directory {} for potential mods", candidate.getModContainer().getName());
+        Mohist.LOGGER.debug("Examining directory {} for potential mods", candidate.getModContainer().getName());
         exploreFileSystem("", candidate.getModContainer(), found, candidate, null);
         for (ModContainer mc : found)
         {
@@ -83,12 +80,12 @@
                 {
                     IOUtils.closeQuietly(fis);
                 }
-                FMLLog.log.debug("Found an mcmod.info file in directory {}", modDir.getName());
+                Mohist.LOGGER.debug("Found an mcmod.info file in directory {}", modDir.getName());
             }
             catch (Exception e)
             {
                 mc = MetadataCollection.from(null,"");
-                FMLLog.log.debug("No mcmod.info file found in directory {}", modDir.getName());
+                Mohist.LOGGER.debug("No mcmod.info file found in directory {}", modDir.getName());
             }
         }
 
@@ -100,7 +97,7 @@
         {
             if (file.isDirectory())
             {
-                FMLLog.log.trace("Recursing into package {}", path + file.getName());
+                Mohist.LOGGER.trace("Recursing into package {}", path + file.getName());
                 exploreFileSystem(path + file.getName() + "/", file, harvestedMods, candidate, mc);
                 continue;
             }
@@ -118,7 +115,7 @@
                 }
                 catch (LoaderException e)
                 {
-                    FMLLog.log.error("There was a problem reading the file {} - probably this is a corrupt file", file.getPath(), e);
+                    Mohist.LOGGER.error("There was a problem reading the file {} - probably this is a corrupt file", file.getPath(), e);
                     throw e;
                 }
                 catch (IOException e)
