--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/JarDiscoverer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/JarDiscoverer.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,15 +19,9 @@
 
 package net.minecraftforge.fml.common.discovery;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.Constructor;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map.Entry;
-import java.util.jar.JarFile;
-
-import net.minecraftforge.fml.common.FMLLog;
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Multimap;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.common.MetadataCollection;
 import net.minecraftforge.fml.common.ModContainer;
@@ -35,15 +29,18 @@
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
 import net.minecraftforge.fml.common.discovery.json.JsonAnnotationLoader;
+import org.objectweb.asm.Type;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.lang.reflect.Constructor;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.jar.JarFile;
 import java.util.regex.Matcher;
 import java.util.zip.ZipEntry;
 
-import org.objectweb.asm.Type;
-
-import com.google.common.collect.Lists;
-import com.google.common.collect.Multimap;
-
 public class JarDiscoverer implements ITypeDiscoverer
 {
     private static final boolean ENABLE_JSON_TEST = "true".equals(System.getProperty("fml.enableJsonAnnotations", "false"));
@@ -52,14 +49,14 @@
     public List<ModContainer> discover(ModCandidate candidate, ASMDataTable table)
     {
         List<ModContainer> foundMods = Lists.newArrayList();
-        FMLLog.log.debug("Examining file {} for potential mods", candidate.getModContainer().getName());
+        Mohist.LOGGER.debug("Examining file {} for potential mods", candidate.getModContainer().getName());
         try (JarFile jar = new JarFile(candidate.getModContainer()))
         {
             ZipEntry modInfo = jar.getEntry("mcmod.info");
             MetadataCollection mc = null;
             if (modInfo != null)
             {
-                FMLLog.log.trace("Located mcmod.info file in file {}", candidate.getModContainer().getName());
+                Mohist.LOGGER.trace("Located mcmod.info file in file {}", candidate.getModContainer().getName());
                 try (InputStream inputStream = jar.getInputStream(modInfo))
                 {
                     mc = MetadataCollection.from(inputStream, candidate.getModContainer().getName());
@@ -67,7 +64,7 @@
             }
             else
             {
-                FMLLog.log.debug("The mod container {} appears to be missing an mcmod.info file", candidate.getModContainer().getName());
+                Mohist.LOGGER.debug("The mod container {} appears to be missing an mcmod.info file", candidate.getModContainer().getName());
                 mc = MetadataCollection.from(null, "");
             }
 
@@ -78,7 +75,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.warn("Zip file {} failed to read properly, it will be ignored", candidate.getModContainer().getName(), e);
+            Mohist.LOGGER.warn("Zip file {} failed to read properly, it will be ignored", candidate.getModContainer().getName(), e);
         }
         return foundMods;
     }
@@ -105,7 +102,7 @@
                 }
                 catch (LoaderException e)
                 {
-                    FMLLog.log.error("There was a problem reading the entry {} in the jar {} - probably a corrupt zip", ze.getName(), candidate.getModContainer().getPath(), e);
+                    Mohist.LOGGER.error("There was a problem reading the entry {} in the jar {} - probably a corrupt zip", ze.getName(), candidate.getModContainer().getPath(), e);
                     jar.close();
                     throw e;
                 }
@@ -125,7 +122,7 @@
 
     private void findClassesJSON(ModCandidate candidate, ASMDataTable table, JarFile jar, List<ModContainer> foundMods, MetadataCollection mc) throws IOException
     {
-        FMLLog.log.info("Loading jar {} annotation data from json", candidate.getModContainer().getPath());
+        Mohist.LOGGER.info("Loading jar {} annotation data from json", candidate.getModContainer().getPath());
         ZipEntry json = jar.getEntry(JsonAnnotationLoader.ANNOTATION_JSON);
         Multimap<String, ASMData> annos = JsonAnnotationLoader.loadJson(jar.getInputStream(json), candidate, table);
 
@@ -144,12 +141,12 @@
 
             for (ASMData data : annos.get(type.getClassName()))
             {
-                FMLLog.log.debug("Identified a mod of type {} ({}) - loading", type.getClassName(), data.getClassName());
+                Mohist.LOGGER.debug("Identified a mod of type {} ({}) - loading", type.getClassName(), data.getClassName());
                 try
                 {
                     ModContainer ret = ctr.newInstance(data.getClassName(), candidate, data.getAnnotationInfo());
                     if (!ret.shouldLoadInEnvironment())
-                        FMLLog.log.debug("Skipping mod {}, container opted to not load.", data.getClassName());
+                        Mohist.LOGGER.debug("Skipping mod {}, container opted to not load.", data.getClassName());
                     else
                     {
                         table.addContainer(ret);
@@ -160,7 +157,7 @@
                 }
                 catch (Exception e)
                 {
-                    FMLLog.log.error("Unable to construct {} container", data.getClassName(), e);
+                    Mohist.LOGGER.error("Unable to construct {} container", data.getClassName(), e);
                 }
             }
         }
