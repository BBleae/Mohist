--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/json/ASMInfo.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/json/ASMInfo.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2018.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -16,23 +16,19 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
-
 package net.minecraftforge.fml.common.discovery.json;
 
-import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
-
-import org.apache.commons.lang3.Validate;
-import org.objectweb.asm.Type;
-
+import cn.pfcraft.server.Mohist;
 import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation.EnumHolder;
+import org.objectweb.asm.Type;
 
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+
 //Package private, modders shouldn't access this. Do it through ASMDataTable.
 class ASMInfo
 {
@@ -55,10 +51,10 @@
     public String toString()
     {
         return MoreObjects.toStringHelper("")
-        .add("name", name)
-        .add("itf", interfaces)
-        .add("ann", annotations)
-        .toString();
+                .add("name", name)
+                .add("itf", interfaces)
+                .add("ann", annotations)
+                .toString();
     }
 
     public enum TargetType { CLASS, FIELD, METHOD, SUBTYPE };
@@ -128,12 +124,12 @@
         public String toString()
         {
             return MoreObjects.toStringHelper("")
-            .add("type", type)
-            .add("name", name)
-            .add("target", target)
-            .add("id", id)
-            .add("value", value)
-            .toString();
+                    .add("type", type)
+                    .add("name", name)
+                    .add("target", target)
+                    .add("id", id)
+                    .add("value", value)
+                    .toString();
         }
     }
 
@@ -165,7 +161,7 @@
                         {
                             Annotation sub = pool.getSubAnnotation(Integer.parseInt(s));
                             if (sub == null)
-                                FMLLog.log.error("Invalid Sub-Annotation in Annotation JSON: " + s);
+                                Mohist.LOGGER.error("Invalid Sub-Annotation in Annotation JSON: " + s);
                             else
                                 list.add(sub.getValues(pool));
                         }
@@ -179,7 +175,7 @@
                     {
                         Annotation sub = pool.getSubAnnotation(Integer.parseInt(value));
                         if (sub == null)
-                            FMLLog.log.error("Invalid Sub-Annotation in Annotation JSON: " + value);
+                            Mohist.LOGGER.error("Invalid Sub-Annotation in Annotation JSON: " + value);
                         else
                             _value = sub.getValues(pool);
                     }
