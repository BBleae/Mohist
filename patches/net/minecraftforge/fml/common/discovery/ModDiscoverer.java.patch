--- ../src-base/minecraft/net/minecraftforge/fml/common/discovery/ModDiscoverer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/discovery/ModDiscoverer.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,17 +19,17 @@
 
 package net.minecraftforge.fml.common.discovery;
 
-import java.io.File;
-import java.util.List;
-
-import net.minecraftforge.fml.common.FMLLog;
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Lists;
 import net.minecraftforge.fml.common.LoaderException;
 import net.minecraftforge.fml.common.ModClassLoader;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.relauncher.CoreModManager;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
 
+import java.io.File;
+import java.util.List;
+
 public class ModDiscoverer
 {
     private List<ModCandidate> candidates = Lists.newArrayList();
@@ -51,7 +51,7 @@
         File[] minecraftSources = modClassLoader.getParentSources();
         if (minecraftSources.length == 1 && minecraftSources[0].isFile())
         {
-            FMLLog.log.debug("Minecraft is a file at {}, loading", minecraftSources[0].getAbsolutePath());
+            Mohist.LOGGER.debug("Minecraft is a file at {}, loading", minecraftSources[0].getAbsolutePath());
             addCandidate(new ModCandidate(minecraftSources[0], minecraftSources[0], ContainerType.JAR, true, true));
         }
         else
@@ -63,17 +63,17 @@
                 {
                     if (knownLibraries.contains(source.getName()) || modClassLoader.isDefaultLibrary(source))
                     {
-                        FMLLog.log.trace("Skipping known library file {}", source.getAbsolutePath());
+                        Mohist.LOGGER.trace("Skipping known library file {}", source.getAbsolutePath());
                     }
                     else
                     {
-                        FMLLog.log.debug("Found a minecraft related file at {}, examining for mod candidates", source.getAbsolutePath());
+                        Mohist.LOGGER.debug("Found a minecraft related file at {}, examining for mod candidates", source.getAbsolutePath());
                         addCandidate(new ModCandidate(source, source, ContainerType.JAR, i==0, true));
                     }
                 }
                 else if (minecraftSources[i].isDirectory())
                 {
-                    FMLLog.log.debug("Found a minecraft related directory at {}, examining for mod candidates", source.getAbsolutePath());
+                    Mohist.LOGGER.debug("Found a minecraft related directory at {}, examining for mod candidates", source.getAbsolutePath());
                     addCandidate(new ModCandidate(source, source, ContainerType.DIR, i==0, true));
                 }
                 i++;
@@ -102,7 +102,7 @@
             }
             catch (LoaderException le)
             {
-                FMLLog.log.warn("Identified a problem with the mod candidate {}, ignoring this source", candidate.getModContainer(), le);
+                Mohist.LOGGER.warn("Identified a problem with the mod candidate {}, ignoring this source", candidate.getModContainer(), le);
             }
         }
 
@@ -125,7 +125,7 @@
         {
             if (c.getModContainer().equals(candidate.getModContainer()))
             {
-                FMLLog.log.trace("  Skipping already in list {}", candidate.getModContainer());
+                Mohist.LOGGER.trace("  Skipping already in list {}", candidate.getModContainer());
                 return;
             }
         }
