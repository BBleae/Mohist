--- ../src-base/minecraft/net/minecraftforge/fml/common/versioning/VersionRange.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/versioning/VersionRange.java
@@ -1,8 +1,8 @@
 /*
  * Repackaged and some modifications done by Forge, see in-line comments.
  */
-package net.minecraftforge.fml.common.versioning;
 
+package net.minecraftforge.fml.common.versioning;
 /*
  * Licensed to the Apache Software Foundation (ASF) under one
  * or more contributor license agreements.  See the NOTICE file
@@ -22,14 +22,14 @@
  * under the License.
  */
 
+import com.google.common.base.Joiner;
+
+import javax.annotation.Nullable;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 
-import com.google.common.base.Joiner; //Forge: Add Imports
-import javax.annotation.Nullable;
-
 /**
  * Construct a version range from a specification.
  *
@@ -74,8 +74,7 @@
 
         return new VersionRange( recommendedVersion, copiedRestrictions );
     }
-
-    //Forge: Added factory function
+    
     /**
      * Factory method, for custom versioning schemes
      * @param version version
@@ -86,7 +85,6 @@
     {
         return new VersionRange(version, restrictions);
     }
-
     /**
      * Create a version range from a string representation
      * <p/>
@@ -234,7 +232,10 @@
     public static VersionRange createFromVersion( String version , ArtifactVersion existing) //Forge: Added existing argument
     {
         List<Restriction> restrictions = Collections.emptyList();
-        return new VersionRange(existing != null ? existing : new DefaultArtifactVersion( version ), restrictions );
+        if (existing == null) {
+            existing = new DefaultArtifactVersion(version);
+        }
+        return new VersionRange(existing, restrictions);
     }
 
     /**
@@ -469,24 +470,20 @@
 
         return restrictions;
     }
-    
-    
-    //Forge: Removed getSelectedVersion and isSelectedVersion
 
-    @Override //Forge: Added @Override
+    @Override
     public String toString()
     {
         if ( recommendedVersion != null )
         {
-            return recommendedVersion.getVersionString(); //Forge: Version string specifically.
+            return recommendedVersion.getVersionString();
         }
         else
         {
-            return Joiner.on(',').join(restrictions); //Forge: Changeed from iterator loop to joiner.
+            return Joiner.on(',').join(restrictions);
         }
     }
 
-    //Forge: Added friendly {localized} toString
     public String toStringFriendly()
     {
         if ( recommendedVersion != null )
@@ -540,7 +537,7 @@
         return !restrictions.isEmpty() && recommendedVersion == null;
     }
 
-    @Override //Forge: Added @Override
+    @Override
     public boolean equals( Object obj )
     {
         if ( this == obj )
@@ -562,7 +559,7 @@
         return equals;
     }
 
-    @Override //Forge: Added @Override
+    @Override
     public int hashCode()
     {
         int hash = 7;
@@ -571,13 +568,11 @@
         return hash;
     }
 
-    //Forge: Added @isUnboundedAbove
     public boolean isUnboundedAbove()
     {
         return restrictions.size() == 1 && restrictions.get(0).getUpperBound() == null && !restrictions.get(0).isUpperBoundInclusive();
     }
 
-    //Forge: Added @getLowerBoundString
     public String getLowerBoundString()
     {
         return restrictions.size() == 1 ? restrictions.get(0).getLowerBound().getVersionString() : "";
