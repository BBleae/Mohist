--- ../src-base/minecraft/net/minecraftforge/fml/common/versioning/ComparableVersion.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/versioning/ComparableVersion.java
@@ -1,36 +1,26 @@
 /*
- * Repackaged and some modifications done by Forge, see in-line comments.
- */
-package net.minecraftforge.fml.common.versioning;
-
-/*
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
+ * Minecraft Forge
+ * Copyright (c) 2016.
  *
- *  http://www.apache.org/licenses/LICENSE-2.0
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation version 2.1
+ * of the License.
  *
- * Unless required by applicable law or agreed to in writing,
- * software distributed under the License is distributed on an
- * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
- * KIND, either express or implied.  See the License for the
- * specific language governing permissions and limitations
- * under the License.
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
 
+package net.minecraftforge.fml.common.versioning;
+
 import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.ListIterator;
-import java.util.Locale;
-import java.util.Properties;
-import java.util.Stack;
+import java.util.*;
 
 /**
  * Generic implementation of version comparison.
@@ -105,19 +95,19 @@
             this.value = new BigInteger( str );
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public int getType()
         {
             return INTEGER_ITEM;
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public boolean isNull()
         {
             return BigInteger_ZERO.equals( value );
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public int compareTo( Item item )
         {
             if ( item == null )
@@ -141,7 +131,7 @@
             }
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public String toString()
         {
             return value.toString();
@@ -195,13 +185,13 @@
             this.value = ALIASES.getProperty( value , value );
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public int getType()
         {
             return STRING_ITEM;
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public boolean isNull()
         {
             return ( comparableQualifier( value ).compareTo( RELEASE_VERSION_INDEX ) == 0 );
@@ -226,7 +216,7 @@
             return i == -1 ? ( _QUALIFIERS.size() + "-" + qualifier ) : String.valueOf( i );
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public int compareTo( Item item )
         {
             if ( item == null )
@@ -250,7 +240,7 @@
             }
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public String toString()
         {
             return value;
@@ -265,15 +255,18 @@
         extends ArrayList<Item>
         implements Item
     {
-        private static final long serialVersionUID = 1L; //Forge: added to quiet warnings.
+        /**
+         *
+         */
+        private static final long serialVersionUID = 1L;
 
-        @Override //Forge: Add @Override
+        @Override
         public int getType()
         {
             return LIST_ITEM;
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public boolean isNull()
         {
             return ( size() == 0 );
@@ -295,7 +288,7 @@
             }
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public int compareTo( Item item )
         {
             if ( item == null )
@@ -340,7 +333,7 @@
             }
         }
 
-        @Override //Forge: Add @Override
+        @Override
         public String toString()
         {
             StringBuilder buffer = new StringBuilder( "(" );
@@ -462,25 +455,25 @@
         return isDigit ? new IntegerItem( buf ) : new StringItem( buf, false );
     }
 
-    @Override //Forge: Add @Override
+    @Override
     public int compareTo( ComparableVersion o )
     {
         return items.compareTo( o.items );
     }
 
-    @Override //Forge: Add @Override
+    @Override
     public String toString()
     {
         return value;
     }
 
-    @Override //Forge: Add @Override
+    @Override
     public boolean equals( Object o )
     {
         return ( o instanceof ComparableVersion ) && canonical.equals( ( (ComparableVersion) o ).canonical );
     }
 
-    @Override //Forge: Add @Override
+    @Override
     public int hashCode()
     {
         return canonical.hashCode();
