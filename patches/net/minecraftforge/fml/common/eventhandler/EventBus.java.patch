--- ../src-base/minecraft/net/minecraftforge/fml/common/eventhandler/EventBus.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/eventhandler/EventBus.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,6 +19,16 @@
 
 package net.minecraftforge.fml.common.eventhandler;
 
+import cn.pfcraft.server.Mohist;
+import com.google.common.base.Preconditions;
+import com.google.common.base.Throwables;
+import com.google.common.collect.MapMaker;
+import com.google.common.collect.Sets;
+import com.google.common.reflect.TypeToken;
+import net.minecraftforge.fml.common.Loader;
+import net.minecraftforge.fml.common.ModContainer;
+
+import javax.annotation.Nonnull;
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
@@ -27,22 +37,9 @@
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
 
-import javax.annotation.Nonnull;
-
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-
-import com.google.common.base.Preconditions;
-import com.google.common.base.Throwables;
-import com.google.common.collect.MapMaker;
-import com.google.common.collect.Sets;
-import com.google.common.reflect.TypeToken;
-
 public class EventBus implements IEventExceptionHandler
 {
     private static int maxID = 0;
-
     private ConcurrentHashMap<Object, ArrayList<IEventListener>> listeners = new ConcurrentHashMap<Object, ArrayList<IEventListener>>();
     private Map<Object,ModContainer> listenerOwners = new MapMaker().weakKeys().weakValues().makeMap();
     private final int busID = maxID++;
@@ -72,7 +69,7 @@
         ModContainer activeModContainer = Loader.instance().activeModContainer();
         if (activeModContainer == null)
         {
-            FMLLog.log.error("Unable to determine registrant mod for {}. This is a critical error and should be impossible", target, new Throwable());
+            Mohist.LOGGER.error("Unable to determine registrant mod for {}. This is a critical error and should be impossible", target, new Throwable());
             activeModContainer = Loader.instance().getMinecraftModContainer();
         }
         listenerOwners.put(target, activeModContainer);
@@ -154,7 +151,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Error registering event handler: {} {} {}", owner, eventType, method, e);
+            Mohist.LOGGER.error("Error registering event handler: {} {} {}", owner, eventType, method, e);
         }
     }
 
@@ -193,18 +190,18 @@
 
     public void shutdown()
     {
-        FMLLog.log.warn("EventBus {} shutting down - future events will not be posted.", busID);
+        Mohist.LOGGER.warn("EventBus {} shutting down - future events will not be posted.", busID);
         shutdown = true;
     }
 
     @Override
     public void handleException(EventBus bus, Event event, IEventListener[] listeners, int index, Throwable throwable)
     {
-        FMLLog.log.error("Exception caught during firing event {}:", event, throwable);
-        FMLLog.log.error("Index: {} Listeners:", index);
+        Mohist.LOGGER.error("Exception caught during firing event {}:", event, throwable);
+        Mohist.LOGGER.error("Index: {} Listeners:", index);
         for (int x = 0; x < listeners.length; x++)
         {
-            FMLLog.log.error("{}: {}", x, listeners[x]);
+            Mohist.LOGGER.error("{}: {}", x, listeners[x]);
         }
     }
 }
