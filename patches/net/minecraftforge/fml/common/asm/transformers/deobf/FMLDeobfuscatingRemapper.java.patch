--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/deobf/FMLDeobfuscatingRemapper.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,6 +19,22 @@
 
 package net.minecraftforge.fml.common.asm.transformers.deobf;
 
+import cn.pfcraft.server.Mohist;
+import com.google.common.base.CharMatcher;
+import com.google.common.base.Splitter;
+import com.google.common.base.Strings;
+import com.google.common.collect.*;
+import com.google.common.collect.ImmutableBiMap.Builder;
+import com.google.common.io.CharSource;
+import com.google.common.io.Files;
+import net.minecraft.launchwrapper.LaunchClassLoader;
+import net.minecraftforge.fml.common.patcher.ClassPatchManager;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.commons.Remapper;
+import org.objectweb.asm.tree.ClassNode;
+import org.objectweb.asm.tree.FieldNode;
+
+import javax.annotation.Nullable;
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.IOException;
@@ -29,32 +45,6 @@
 import java.util.Map;
 import java.util.Set;
 
-import net.minecraft.launchwrapper.LaunchClassLoader;
-import net.minecraftforge.fml.common.FMLLog;
-import net.minecraftforge.fml.common.patcher.ClassPatchManager;
-
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.commons.Remapper;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.FieldNode;
-
-import com.google.common.base.CharMatcher;
-import com.google.common.base.Splitter;
-import com.google.common.base.Strings;
-import com.google.common.collect.BiMap;
-import com.google.common.collect.ImmutableBiMap;
-import com.google.common.collect.ImmutableBiMap.Builder;
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
-import com.google.common.io.CharSource;
-import com.google.common.io.Files;
-
-import javax.annotation.Nullable;
-
 public class FMLDeobfuscatingRemapper extends Remapper {
     public static final FMLDeobfuscatingRemapper INSTANCE = new FMLDeobfuscatingRemapper();
 
@@ -111,7 +101,7 @@
         }
         catch (IOException ioe)
         {
-            FMLLog.log.error("An error occurred loading the deobfuscation map data", ioe);
+            Mohist.LOGGER.error("An error occurred loading the deobfuscation map data", ioe);
         }
         methodNameMaps = Maps.newHashMapWithExpectedSize(rawMethodMaps.size());
         fieldNameMaps = Maps.newHashMapWithExpectedSize(rawFieldMaps.size());
@@ -132,12 +122,12 @@
                 LZMAInputSupplier zis = new LZMAInputSupplier(classData);
                 CharSource srgSource = zis.asCharSource(StandardCharsets.UTF_8);
                 srgList = srgSource.readLines();
-                FMLLog.log.debug("Loading deobfuscation resource {} with {} records", deobfFileName, srgList.size());
+                Mohist.LOGGER.debug("Loading deobfuscation resource {} with {} records", deobfFileName, srgList.size());
             }
             else
             {
                 srgList = Files.readLines(new File(gradleStartProp), StandardCharsets.UTF_8);
-                FMLLog.log.debug("Loading deobfuscation resource {} with {} records", gradleStartProp, srgList.size());
+                Mohist.LOGGER.debug("Loading deobfuscation resource {} with {} records", gradleStartProp, srgList.size());
             }
 
             rawMethodMaps = Maps.newHashMap();
@@ -165,7 +155,7 @@
         }
         catch (IOException ioe)
         {
-            FMLLog.log.error("An error occurred loading the deobfuscation map data", ioe);
+            Mohist.LOGGER.error("An error occurred loading the deobfuscation map data", ioe);
         }
         methodNameMaps = Maps.newHashMapWithExpectedSize(rawMethodMaps.size());
         fieldNameMaps = Maps.newHashMapWithExpectedSize(rawFieldMaps.size());
@@ -233,7 +223,7 @@
             }
             catch (IOException e)
             {
-                FMLLog.log.error("A critical exception occurred reading a class file {}", owner, e);
+                Mohist.LOGGER.error("A critical exception occurred reading a class file {}", owner, e);
             }
             return null;
         }
@@ -389,7 +379,7 @@
 
             if (DUMP_FIELD_MAPS)
             {
-                FMLLog.log.trace("Field map for {} : {}", className, fieldNameMaps.get(className));
+                Mohist.LOGGER.trace("Field map for {} : {}", className, fieldNameMaps.get(className));
             }
         }
         return fieldNameMaps.get(className);
@@ -406,7 +396,7 @@
             }
             if (DUMP_METHOD_MAPS)
             {
-                FMLLog.log.trace("Method map for {} : {}", className, methodNameMaps.get(className));
+                Mohist.LOGGER.trace("Method map for {} : {}", className, methodNameMaps.get(className));
             }
 
         }
@@ -430,7 +420,7 @@
         }
         catch (IOException e)
         {
-            FMLLog.log.error("Error getting patched resource:", e);
+            Mohist.LOGGER.error("Error getting patched resource:", e);
         }
     }
     public void mergeSuperMaps(String name, @Nullable String superName, String[] interfaces)
