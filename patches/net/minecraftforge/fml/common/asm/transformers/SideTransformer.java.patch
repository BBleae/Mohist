--- ../src-base/minecraft/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/asm/transformers/SideTransformer.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,27 +19,17 @@
 
 package net.minecraftforge.fml.common.asm.transformers;
 
+import net.minecraft.launchwrapper.IClassTransformer;
+import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
+import net.minecraftforge.fml.relauncher.SideOnly;
+import org.objectweb.asm.*;
+import org.objectweb.asm.tree.*;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.ListIterator;
 
-import net.minecraft.launchwrapper.IClassTransformer;
-import net.minecraftforge.fml.relauncher.FMLLaunchHandler;
-import net.minecraftforge.fml.relauncher.SideOnly;
-
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.ClassWriter;
-import org.objectweb.asm.Handle;
-import org.objectweb.asm.MethodVisitor;
-import org.objectweb.asm.Opcodes;
-import org.objectweb.asm.Type;
-import org.objectweb.asm.tree.AbstractInsnNode;
-import org.objectweb.asm.tree.AnnotationNode;
-import org.objectweb.asm.tree.ClassNode;
-import org.objectweb.asm.tree.FieldNode;
-import org.objectweb.asm.tree.MethodNode;
-
 public class SideTransformer implements IClassTransformer
 {
     private static String SIDE = FMLLaunchHandler.side().name();
@@ -96,10 +86,10 @@
         for (List<Handle> dynamicLambdaHandles = lambdaGatherer.getDynamicLambdaHandles();
              !dynamicLambdaHandles.isEmpty(); dynamicLambdaHandles = lambdaGatherer.getDynamicLambdaHandles())
         {
-            lambdaGatherer = new LambdaGatherer();
             methods = classNode.methods.iterator();
             while (methods.hasNext())
             {
+                lambdaGatherer = new LambdaGatherer();
                 MethodNode method = methods.next();
                 if ((method.access & Opcodes.ACC_SYNTHETIC) == 0) continue;
                 for (Handle dynamicLambdaHandle : dynamicLambdaHandles)
