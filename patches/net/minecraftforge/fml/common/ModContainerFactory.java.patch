--- ../src-base/minecraft/net/minecraftforge/fml/common/ModContainerFactory.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ModContainerFactory.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,20 +19,17 @@
 
 package net.minecraftforge.fml.common;
 
-import java.io.File;
-import java.lang.reflect.Constructor;
-import java.util.Map;
-import java.util.regex.Pattern;
-
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.Maps;
 import net.minecraftforge.fml.common.discovery.ModCandidate;
 import net.minecraftforge.fml.common.discovery.asm.ASMModParser;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation;
-
 import org.objectweb.asm.Type;
 
-import com.google.common.collect.Maps;
-
 import javax.annotation.Nullable;
+import java.io.File;
+import java.lang.reflect.Constructor;
+import java.util.Map;
 
 public class ModContainerFactory
 {
@@ -68,17 +65,17 @@
         {
             if (modTypes.containsKey(ann.getASMType()))
             {
-                FMLLog.log.debug("Identified a mod of type {} ({}) - loading", ann.getASMType(), className);
+                Mohist.LOGGER.debug("Identified a mod of type {} ({}) - loading", ann.getASMType(), className);
                 try {
                     ModContainer ret = modTypes.get(ann.getASMType()).newInstance(className, container, ann.getValues());
                     if (!ret.shouldLoadInEnvironment())
                     {
-                        FMLLog.log.debug("Skipping mod {}, container opted to not load.", className);
+                        Mohist.LOGGER.debug("Skipping mod {}, container opted to not load.", className);
                         return null;
                     }
                     return ret;
                 } catch (Exception e) {
-                    FMLLog.log.error("Unable to construct {} container", ann.getASMType().getClassName(), e);
+                    Mohist.LOGGER.error("Unable to construct {} container", ann.getASMType().getClassName(), e);
                     return null;
                 }
             }
