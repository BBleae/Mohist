--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/NetworkModHolder.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/NetworkModHolder.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,11 +19,12 @@
 
 package net.minecraftforge.fml.common.network.internal;
 
-import java.lang.reflect.Method;
-import java.util.Map;
-import java.util.Set;
-
-import net.minecraftforge.fml.common.FMLLog;
+import cn.pfcraft.server.Mohist;
+import com.google.common.base.Preconditions;
+import com.google.common.base.Strings;
+import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.SetMultimap;
 import net.minecraftforge.fml.common.ModContainer;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
@@ -33,13 +34,10 @@
 import net.minecraftforge.fml.common.versioning.VersionRange;
 import net.minecraftforge.fml.relauncher.Side;
 
-import com.google.common.base.Preconditions;
-import com.google.common.base.Strings;
-import com.google.common.collect.ImmutableMap;
-import com.google.common.collect.ImmutableSet;
-import com.google.common.collect.SetMultimap;
-
 import javax.annotation.Nullable;
+import java.lang.reflect.Method;
+import java.util.Map;
+import java.util.Set;
 
 public class NetworkModHolder
 {
@@ -160,7 +158,7 @@
             }
             catch (Exception e)
             {
-                FMLLog.log.error("Error occurred invoking NetworkCheckHandler {} at {}", checkHandler.getName(), container, e);
+                Mohist.LOGGER.error("Error occurred invoking NetworkCheckHandler {} at {}", checkHandler.getName(), container, e);
                 return String.format("Error occurred invoking NetworkCheckHandler %s at %s", checkHandler.getName(), container);
             }
         }
@@ -196,7 +194,7 @@
     {
         this(container);
         this.checker = Preconditions.checkNotNull(checker);
-        FMLLog.log.debug("The mod {} is using a custom checker {}", container.getModId(), checker.getClass().getName());
+        Mohist.LOGGER.debug("The mod {} is using a custom checker {}", container.getModId(), checker.getClass().getName());
     }
     public NetworkModHolder(ModContainer container, Class<?> modClass, @Nullable String acceptableVersionRange, ASMDataTable table)
     {
@@ -234,7 +232,7 @@
                     }
                     else
                     {
-                        FMLLog.log.fatal("Found unexpected method signature for annotation NetworkCheckHandler");
+                        Mohist.LOGGER.fatal("Found unexpected method signature for annotation NetworkCheckHandler");
                     }
                 }
             }
@@ -251,7 +249,7 @@
             }
             catch (Exception e)
             {
-                FMLLog.log.warn("The declared version check handler method {} on network mod id {} is not accessible", networkCheckHandlerMethod, container.getModId(), e);
+                Mohist.LOGGER.warn("The declared version check handler method {} on network mod id {} is not accessible", networkCheckHandlerMethod, container.getModId(), e);
             }
         }
         if (this.checkHandler != null)
@@ -270,20 +268,20 @@
             }
             catch (InvalidVersionSpecificationException e)
             {
-                FMLLog.log.warn("Invalid bounded range {} specified for network mod id {}", acceptableVersionRange, container.getModId(), e);
+                Mohist.LOGGER.warn("Invalid bounded range {} specified for network mod id {}", acceptableVersionRange, container.getModId(), e);
             }
             this.checker = new DefaultNetworkChecker();
         }
-        FMLLog.log.trace("Mod {} is using network checker : {}", container.getModId(), this.checker);
-        FMLLog.log.trace("Testing mod {} to verify it accepts its own version in a remote connection", container.getModId());
+        Mohist.LOGGER.trace("Mod {} is using network checker : {}", container.getModId(), this.checker);
+        Mohist.LOGGER.trace("Testing mod {} to verify it accepts its own version in a remote connection", container.getModId());
         boolean acceptsSelf = acceptVersion(container.getVersion());
         if (!acceptsSelf)
         {
-            FMLLog.log.fatal("The mod {} appears to reject its own version number ({}) in its version handling. This is likely a severe bug in the mod!", container.getModId(), container.getVersion());
+            Mohist.LOGGER.fatal("The mod {} appears to reject its own version number ({}) in its version handling. This is likely a severe bug in the mod!", container.getModId(), container.getVersion());
         }
         else
         {
-            FMLLog.log.trace("The mod {} accepts its own version ({})", container.getModId(), container.getVersion());
+            Mohist.LOGGER.trace("The mod {} accepts its own version ({})", container.getModId(), container.getVersion());
         }
     }
 
