--- ../src-base/minecraft/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/internal/FMLProxyPacket.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,13 +19,15 @@
 
 package net.minecraftforge.fml.common.network.internal;
 
+import cn.pfcraft.server.Mohist;
+import com.google.common.collect.ConcurrentHashMultiset;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Multiset;
+import com.google.common.collect.Multiset.Entry;
+import com.google.common.collect.Multisets;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.embedded.EmbeddedChannel;
-
-import java.io.IOException;
-import java.util.List;
-
 import net.minecraft.network.INetHandler;
 import net.minecraft.network.NetworkManager;
 import net.minecraft.network.Packet;
@@ -34,19 +36,14 @@
 import net.minecraft.network.play.INetHandlerPlayServer;
 import net.minecraft.network.play.client.CPacketCustomPayload;
 import net.minecraft.network.play.server.SPacketCustomPayload;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.network.FMLNetworkException;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
 import net.minecraftforge.fml.common.network.handshake.NetworkDispatcher;
 import net.minecraftforge.fml.relauncher.Side;
 
-import com.google.common.collect.ConcurrentHashMultiset;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Multiset;
-import com.google.common.collect.Multiset.Entry;
-import com.google.common.collect.Multisets;
-
 import javax.annotation.Nullable;
+import java.io.IOException;
+import java.util.List;
 
 public class FMLProxyPacket implements Packet<INetHandler> {
     final String channel;
@@ -101,12 +98,12 @@
                     badPackets.add(this.channel);
                     if (badPackets.size() % packetCountWarning == 0)
                     {
-                        FMLLog.log.fatal("Detected ongoing potential memory leak. {} packets have leaked. Top offenders", badPackets.size());
+                        Mohist.LOGGER.fatal("Detected ongoing potential memory leak. {} packets have leaked. Top offenders", badPackets.size());
                         int i = 0;
                         for (Entry<String> s  : Multisets.copyHighestCountFirst(badPackets).entrySet())
                         {
                             if (i++ > 10) break;
-                            FMLLog.log.fatal("\t {} : {}", s.getElement(), s.getCount());
+                            Mohist.LOGGER.fatal("\t {} : {}", s.getElement(), s.getCount());
                         }
                     }
                 }
@@ -114,12 +111,12 @@
             }
             catch (FMLNetworkException ne)
             {
-                FMLLog.log.error("There was a network exception handling a packet on channel {}", channel, ne);
+                Mohist.LOGGER.error("There was a network exception handling a packet on channel {}", channel, ne);
                 dispatcher.rejectHandshake(ne.getMessage());
             }
             catch (Throwable t)
             {
-                FMLLog.log.error("There was a critical exception handling a packet on channel {}", channel, t);
+                Mohist.LOGGER.error("There was a critical exception handling a packet on channel {}", channel, t);
                 dispatcher.rejectHandshake("A fatal error has occurred, this connection is terminated");
             }
         }
