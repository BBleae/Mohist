--- ../src-base/minecraft/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/network/handshake/FMLHandshakeClientState.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,19 +19,14 @@
 
 package net.minecraftforge.fml.common.network.handshake;
 
-import io.netty.channel.ChannelFutureListener;
-import io.netty.channel.ChannelHandlerContext;
-
-import java.util.Map;
-import java.util.function.Consumer;
-
+import cn.pfcraft.server.Mohist;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
 import com.google.common.util.concurrent.Futures;
-
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
 import net.minecraft.client.Minecraft;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.common.network.NetworkRegistry;
 import net.minecraftforge.fml.common.network.handshake.FMLHandshakeMessage.ServerHello;
@@ -41,6 +36,9 @@
 import net.minecraftforge.registries.ForgeRegistry;
 import net.minecraftforge.registries.GameData;
 
+import java.util.Map;
+import java.util.function.Consumer;
+
 /**
  * Packet handshake sequence manager- client side (responding to remote server)
  *
@@ -89,7 +87,7 @@
             }
 
             ServerHello serverHelloPacket = (FMLHandshakeMessage.ServerHello)msg;
-            FMLLog.log.info("Server protocol version {}", Integer.toHexString(serverHelloPacket.protocolVersion()));
+            Mohist.LOGGER.info("Server protocol version {}", Integer.toHexString(serverHelloPacket.protocolVersion()));
             if (serverHelloPacket.protocolVersion() > 1)
             {
                 // Server sent us an extra dimension for the logging in player - stash it for retrieval later
@@ -148,7 +146,7 @@
             if (pkt.hasMore())
             {
                 cons.accept(WAITINGSERVERCOMPLETE);
-                FMLLog.log.debug("Received Mod Registry mapping for {}: {} IDs {} overrides {} dummied", pkt.getName(), entry.ids.size(), entry.overrides.size(), entry.dummied.size());
+                Mohist.LOGGER.debug("Received Mod Registry mapping for {}: {} IDs {} overrides {} dummied", pkt.getName(), entry.ids.size(), entry.overrides.size(), entry.dummied.size());
                 return;
             }
 
@@ -162,8 +160,8 @@
                 cons.accept(ERROR);
                 NetworkDispatcher dispatcher = ctx.channel().attr(NetworkDispatcher.FML_DISPATCHER).get();
                 dispatcher.rejectHandshake("Fatally missing registry entries");
-                FMLLog.log.fatal("Failed to connect to server: there are {} missing registry items", locallyMissing.size());
-                locallyMissing.asMap().forEach((key, value) ->  FMLLog.log.debug("Missing {} Entries: {}", key, value));
+                Mohist.LOGGER.fatal("Failed to connect to server: there are {} missing registry items", locallyMissing.size());
+                locallyMissing.asMap().forEach((key, value) ->  Mohist.LOGGER.debug("Missing {} Entries: {}", key, value));
                 return;
             }
             cons.accept(PENDINGCOMPLETE);
