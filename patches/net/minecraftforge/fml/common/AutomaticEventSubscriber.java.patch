--- ../src-base/minecraft/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/AutomaticEventSubscriber.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,15 +19,14 @@
 
 package net.minecraftforge.fml.common;
 
+import cn.pfcraft.server.Mohist;
 import com.google.common.base.Strings;
 import com.google.common.collect.SetMultimap;
-
 import net.minecraftforge.common.MinecraftForge;
 import net.minecraftforge.fml.common.discovery.ASMDataTable;
 import net.minecraftforge.fml.common.discovery.ASMDataTable.ASMData;
 import net.minecraftforge.fml.common.discovery.asm.ModAnnotation;
 import net.minecraftforge.fml.relauncher.Side;
-import org.apache.logging.log4j.Level;
 
 import java.util.EnumSet;
 import java.util.List;
@@ -42,7 +41,7 @@
     private static final EnumSet<Side> DEFAULT = EnumSet.allOf(Side.class);
     public static void inject(ModContainer mod, ASMDataTable data, Side side)
     {
-        FMLLog.log.debug("Attempting to inject @EventBusSubscriber classes into the eventbus for {}", mod.getModId());
+        Mohist.LOGGER.debug("Attempting to inject @EventBusSubscriber classes into the eventbus for {}", mod.getModId());
         SetMultimap<String, ASMData> modData = data.getAnnotationsFor(mod);
         Set<ASMDataTable.ASMData> mods = modData.get(Mod.class.getName());
         Set<ASMDataTable.ASMData> targets = modData.get(Mod.EventBusSubscriber.class.getName());
@@ -63,7 +62,7 @@
                     }
                 }
                 if (sides == DEFAULT || sides.contains(side)) {
-                    //FMLLog.log.debug("Found @EventBusSubscriber class {}", targ.getClassName());
+                    //Mohist.LOGGER.debug("Found @EventBusSubscriber class {}", targ.getClassName());
                     String amodid = (String)targ.getAnnotationInfo().get("modid");
                     if (Strings.isNullOrEmpty(amodid)) {
                         amodid = ASMDataTable.getOwnerModID(mods, targ);
@@ -74,18 +73,18 @@
                     }
                     if (!mod.getModId().equals(amodid))
                     {
-                        FMLLog.log.debug("Skipping @EventBusSubscriber injection for {} since it is not for mod {}", targ.getClassName(), mod.getModId());
+                        Mohist.LOGGER.debug("Skipping @EventBusSubscriber injection for {} since it is not for mod {}", targ.getClassName(), mod.getModId());
                         continue; //We're not injecting this guy
                     }
-                    FMLLog.log.debug("Registering @EventBusSubscriber for {} for mod {}", targ.getClassName(), mod.getModId());
+                    Mohist.LOGGER.debug("Registering @EventBusSubscriber for {} for mod {}", targ.getClassName(), mod.getModId());
                     Class<?> subscriptionTarget = Class.forName(targ.getClassName(), false, mcl);
                     MinecraftForge.EVENT_BUS.register(subscriptionTarget);
-                    FMLLog.log.debug("Injected @EventBusSubscriber class {}", targ.getClassName());
+                    Mohist.LOGGER.debug("Injected @EventBusSubscriber class {}", targ.getClassName());
                 }
             }
             catch (Throwable e)
             {
-                FMLLog.log.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", targ.getClassName(), mod.getModId(), e);
+                Mohist.LOGGER.error("An error occurred trying to load an EventBusSubscriber {} for modid {}", targ.getClassName(), mod.getModId(), e);
                 throw new LoaderException(e);
             }
         }
