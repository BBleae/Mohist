--- ../src-base/minecraft/net/minecraftforge/fml/common/ObfuscationReflectionHelper.java
+++ ../src-work/minecraft/net/minecraftforge/fml/common/ObfuscationReflectionHelper.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -16,14 +16,9 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
  */
-
 package net.minecraftforge.fml.common;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.Field;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
+import cn.pfcraft.server.Mohist;
 import net.minecraftforge.fml.common.asm.transformers.deobf.FMLDeobfuscatingRemapper;
 import net.minecraftforge.fml.relauncher.ReflectionHelper;
 import net.minecraftforge.fml.relauncher.ReflectionHelper.UnableToAccessFieldException;
@@ -31,6 +26,10 @@
 import org.objectweb.asm.Type;
 
 import javax.annotation.Nullable;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.Arrays;
 
 /**
  * Some reflection helper code.
@@ -49,7 +48,7 @@
         }
         catch (UnableToAccessFieldException e)
         {
-            FMLLog.log.error("There was a problem getting field index {} from {}", fieldIndex, classToAccess.getName(), e);
+            Mohist.LOGGER.error("There was a problem getting field index {} from {}", fieldIndex, classToAccess.getName(), e);
             throw e;
         }
     }
@@ -91,12 +90,12 @@
         }
         catch (UnableToFindFieldException e)
         {
-            FMLLog.log.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
+            Mohist.LOGGER.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
         catch (UnableToAccessFieldException e)
         {
-            FMLLog.log.error("Unable to access any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
+            Mohist.LOGGER.error("Unable to access any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
     }
@@ -115,7 +114,7 @@
         }
         catch (UnableToAccessFieldException e)
         {
-            FMLLog.log.error("There was a problem setting field index {} on type {}", fieldIndex, classToAccess.getName(), e);
+            Mohist.LOGGER.error("There was a problem setting field index {} on type {}", fieldIndex, classToAccess.getName(), e);
             throw e;
         }
     }
@@ -130,12 +129,12 @@
         }
         catch (UnableToFindFieldException e)
         {
-            FMLLog.log.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
+            Mohist.LOGGER.error("Unable to locate any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
         catch (UnableToAccessFieldException e)
         {
-            FMLLog.log.error("Unable to set any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
+            Mohist.LOGGER.error("Unable to set any field {} on type {}", Arrays.toString(fieldNames), classToAccess.getName(), e);
             throw e;
         }
     }
