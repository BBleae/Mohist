--- ../src-base/minecraft/net/minecraftforge/common/config/Configuration.java
+++ ../src-work/minecraft/net/minecraftforge/common/config/Configuration.java
@@ -19,47 +19,27 @@
 
 package net.minecraftforge.common.config;
 
-import static net.minecraftforge.common.config.Property.Type.BOOLEAN;
-import static net.minecraftforge.common.config.Property.Type.DOUBLE;
-import static net.minecraftforge.common.config.Property.Type.INTEGER;
-import static net.minecraftforge.common.config.Property.Type.STRING;
-
-import java.io.BufferedReader;
-import java.io.BufferedWriter;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.io.PushbackInputStream;
-import java.io.Reader;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Map.Entry;
-import java.util.Set;
-import java.util.TreeMap;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
+import cn.pfcraft.server.Mohist;
 import com.google.common.base.CharMatcher;
 import com.google.common.collect.ImmutableSet;
-
 import com.google.common.primitives.Floats;
 import net.minecraftforge.fml.client.config.GuiConfig;
 import net.minecraftforge.fml.client.config.GuiConfigEntries;
 import net.minecraftforge.fml.client.config.GuiConfigEntries.IConfigEntry;
 import net.minecraftforge.fml.client.config.IConfigElement;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraftforge.fml.common.Loader;
 import net.minecraftforge.fml.relauncher.FMLInjectionData;
 import org.apache.commons.io.IOUtils;
 
+import java.io.*;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.Map.Entry;
+import java.util.regex.Matcher;
+import java.util.regex.Pattern;
+
+import static net.minecraftforge.common.config.Property.Type.*;
+
 /**
  * This class offers advanced configurations capabilities, allowing to provide
  * various categories for configuration variables.
@@ -132,7 +112,7 @@
             {
                 File fileBak = new File(file.getAbsolutePath() + "_" +
                         new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date()) + ".errored");
-                FMLLog.log.fatal("An exception occurred while loading config file {}. This file will be renamed to {} " +
+                Mohist.LOGGER.fatal("An exception occurred while loading config file {}. This file will be renamed to {} " +
                         "and a new config file will be generated.", file.getName(), fileBak.getName(), e);
 
                 file.renameTo(fileBak);
@@ -253,8 +233,7 @@
      * @param maxListLength the maximum length of this array, use -1 for no max length
      * @return a boolean array Property with all settings defined
      */
-    public Property get(String category, String key, boolean[] defaultValues, String comment,
-            boolean isListLengthFixed, int maxListLength)
+    public Property get(String category, String key, boolean[] defaultValues, String comment,  boolean isListLengthFixed, int maxListLength)
     {
         String[] values = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
@@ -393,8 +372,7 @@
      * @param maxListLength the maximum length of this array, use -1 for no max length
      * @return an integer array Property object with all settings defined
      */
-    public Property get(String category, String key, int[] defaultValues, String comment, int minValue, int maxValue,
-            boolean isListLengthFixed, int maxListLength)
+    public Property get(String category, String key, int[] defaultValues, String comment, int minValue, int maxValue, boolean isListLengthFixed, int maxListLength)
     {
         String[] values = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
@@ -535,8 +513,7 @@
      * @param maxListLength the maximum length of this array, use -1 for no max length
      * @return a double array Property object with all settings defined
      */
-    public Property get(String category, String key, double[] defaultValues, String comment, double minValue, double maxValue,
-            boolean isListLengthFixed, int maxListLength)
+    public Property get(String category, String key, double[] defaultValues, String comment, double minValue, double maxValue,  boolean isListLengthFixed, int maxListLength)
     {
         String[] values = new String[defaultValues.length];
         for (int i = 0; i < defaultValues.length; i++)
@@ -702,8 +679,7 @@
      * @param validationPattern a Pattern object for input validation
      * @return a string array Property with a comment with all settings defined
      */
-    public Property get(String category, String key, String[] defaultValues, String comment,
-            boolean isListLengthFixed, int maxListLength, Pattern validationPattern)
+    public Property get(String category, String key, String[] defaultValues, String comment, boolean isListLengthFixed, int maxListLength, Pattern validationPattern)
     {
         Property prop = get(category, key, defaultValues, comment, STRING);
         prop.setIsListLengthFixed(isListLengthFixed);
@@ -1066,7 +1042,7 @@
         }
         catch (IOException e)
         {
-            FMLLog.log.error("Error while loading config {}.", fileName, e);
+            Mohist.LOGGER.error("Error while loading config {}.", fileName, e);
         }
         finally
         {
@@ -1127,7 +1103,7 @@
         }
         catch (IOException e)
         {
-            FMLLog.log.error("Error while saving config {}.", fileName, e);
+            Mohist.LOGGER.error("Error while saving config {}.", fileName, e);
         }
     }
 
@@ -1682,7 +1658,6 @@
     /**
      * Creates a string list property.
      *
-     * @param name Name of the property.
      * @param category Category of the property.
      * @param defaultValue Default value of the property.
      * @param comment A brief description what the property does.
@@ -1818,7 +1793,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Failed to get float for {}/{}", name, category, e);
+            Mohist.LOGGER.error("Failed to get float for {}/{}", name, category, e);
         }
         return defaultValue;
     }
