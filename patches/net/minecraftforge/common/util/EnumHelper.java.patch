--- ../src-base/minecraft/net/minecraftforge/common/util/EnumHelper.java
+++ ../src-work/minecraft/net/minecraftforge/common/util/EnumHelper.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,15 +19,9 @@
 
 package net.minecraftforge.common.util;
 
-import java.lang.reflect.*;
-import java.util.*;
-import java.util.function.BiPredicate;
-
+import cn.pfcraft.server.Mohist;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
-
-import net.minecraftforge.fml.common.EnhancedRuntimeException;
-import net.minecraftforge.fml.common.FMLLog;
 import net.minecraft.block.BlockPressurePlate.Sensitivity;
 import net.minecraft.block.material.Material;
 import net.minecraft.enchantment.EnumEnchantmentType;
@@ -44,16 +38,22 @@
 import net.minecraft.item.Item.ToolMaterial;
 import net.minecraft.item.ItemArmor.ArmorMaterial;
 import net.minecraft.util.SoundEvent;
-import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.RayTraceResult;
 import net.minecraft.util.text.TextFormatting;
 import net.minecraft.world.EnumSkyBlock;
-import net.minecraft.world.IBlockAccess;
 import net.minecraft.world.gen.structure.StructureStrongholdPieces.Stronghold.Door;
 import net.minecraftforge.classloading.FMLForgePlugin;
+import net.minecraftforge.fml.common.EnhancedRuntimeException;
 import org.apache.commons.lang3.ArrayUtils;
+import org.bukkit.World;
 
 import javax.annotation.Nullable;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.List;
+import java.util.function.BiPredicate;
 
 public class EnumHelper
 {
@@ -81,7 +81,7 @@
         {ToolMaterial.class, int.class, int.class, float.class, float.class, int.class},
         {EnumRarity.class, TextFormatting.class, String.class},
         {HorseArmorType.class, String.class, int.class},
-        {EntityLiving.SpawnPlacementType.class, BiPredicate.class}
+        {EntityLiving.SpawnPlacementType.class,BiPredicate.class}
     };
 
     @Nullable
@@ -149,13 +149,10 @@
     {
         return addEnum(EnumRarity.class, name, color, displayName);
     }
-
     @Nullable
-    public static EntityLiving.SpawnPlacementType addSpawnPlacementType(String name, BiPredicate<IBlockAccess, BlockPos> predicate)
-    {
-        return addEnum(EntityLiving.SpawnPlacementType.class, name, predicate);
+    public static EntityLiving.SpawnPlacementType addSpawnPlacementType(String name, BiPredicate predicate) {
+    return addEnum(EntityLiving.SpawnPlacementType.class, name, predicate);
     }
-
     /**
      * 
      * @param name the name of the new {@code HorseArmorType}
@@ -187,7 +184,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Error setting up EnumHelper.", e);
+            Mohist.LOGGER.error("Error setting up EnumHelper.", e);
         }
 
         isSetup = true;
@@ -338,7 +335,7 @@
             }
 
             for (String line : lines)
-                FMLLog.log.fatal(line);
+                Mohist.LOGGER.fatal(line);
 
             if (test)
             {
@@ -411,7 +408,7 @@
         }
         catch (Exception e)
         {
-            FMLLog.log.error("Error adding enum with EnumHelper.", e);
+            Mohist.LOGGER.error("Error adding enum with EnumHelper.", e);
             throw new RuntimeException(e);
         }
     }
@@ -423,4 +420,11 @@
             setup();
         }
     }
+
+    public static World.Environment addBukkitEnvironment(int id, String name) {
+        if(!isSetup){
+            setup();
+        }
+        return addEnum(World.Environment.class,name,new Class[]{Integer.TYPE}, new Object[]{Integer.valueOf(id)});
+    }
 }
