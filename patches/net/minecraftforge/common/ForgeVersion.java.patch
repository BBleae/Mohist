--- ../src-base/minecraft/net/minecraftforge/common/ForgeVersion.java
+++ ../src-work/minecraft/net/minecraftforge/common/ForgeVersion.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,35 +19,20 @@
 
 package net.minecraftforge.common;
 
-import static net.minecraftforge.common.ForgeVersion.Status.*;
+import net.minecraftforge.fml.common.InjectedModContainer;
+import net.minecraftforge.fml.common.Loader;
+import net.minecraftforge.fml.common.ModContainer;
+import net.minecraftforge.fml.common.versioning.ComparableVersion;
 
-import java.io.IOException;
-import java.io.InputStream;
-import java.net.HttpURLConnection;
+import javax.annotation.Nullable;
 import java.net.URL;
-import java.net.URLConnection;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 import java.util.concurrent.ConcurrentHashMap;
 
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
+import static net.minecraftforge.common.ForgeVersion.Status.PENDING;
 
-import com.google.common.io.ByteStreams;
-import com.google.gson.Gson;
-
-import net.minecraftforge.fml.common.InjectedModContainer;
-import net.minecraftforge.fml.common.Loader;
-import net.minecraftforge.fml.common.ModContainer;
-import net.minecraftforge.fml.common.versioning.ComparableVersion;
-
-import javax.annotation.Nullable;
-
 public class ForgeVersion
 {
     // This is Forge's Mod Id, used for the ForgeModContainer and resource locations
@@ -59,7 +44,7 @@
     //This number is incremented every time a interface changes or new major feature is added, and reset every Minecraft version
     public static final int revisionVersion = 5;
     //This number is incremented every time Jenkins builds Forge, and never reset. Should always be 0 in the repo code.
-    public static final int buildVersion    = 0;
+    public static final int buildVersion    = 2808;
     // This is the minecraft version we're building for - used in various places in Forge/FML code
     public static final String mcVersion = "1.12.2";
     // This is the MCP data version we're using
@@ -69,8 +54,6 @@
     @SuppressWarnings("unused")
     private static String target = null;
 
-    private static final Logger log = LogManager.getLogger(MOD_ID + ".VersionCheck");
-
     private static final int MAX_HTTP_REDIRECTS = Integer.getInteger("http.maxRedirects", 20);
 
     public static int getMajorVersion()
@@ -180,168 +163,6 @@
         }
     }
 
-    public static void startVersionCheck()
-    {
-        new Thread("Forge Version Check")
-        {
-            @Override
-            public void run()
-            {
-                if (!ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, "Global", true).getBoolean())
-                {
-                    log.info("Global Forge version check system disabled, no further processing.");
-                    return;
-                }
-
-                for (Entry<ModContainer, URL> entry : gatherMods().entrySet())
-                {
-                    ModContainer mod = entry.getKey();
-                    if (ForgeModContainer.getConfig().get(ForgeModContainer.VERSION_CHECK_CAT, mod.getModId(), true).getBoolean())
-                    {
-                        process(mod, entry.getValue());
-                    }
-                    else
-                    {
-                        log.info("[{}] Skipped version check", mod.getModId());
-                    }
-                }
-            }
-
-            /**
-             * Opens stream for given URL while following redirects
-             */
-            private InputStream openUrlStream(URL url) throws IOException
-            {
-                URL currentUrl = url;
-                for (int redirects = 0; redirects < MAX_HTTP_REDIRECTS; redirects++)
-                {
-                    URLConnection c = currentUrl.openConnection();
-                    if (c instanceof HttpURLConnection)
-                    {
-                        HttpURLConnection huc = (HttpURLConnection) c;
-                        huc.setInstanceFollowRedirects(false);
-                        int responseCode = huc.getResponseCode();
-                        if (responseCode >= 300 && responseCode <= 399)
-                        {
-                            try
-                            {
-                                String loc = huc.getHeaderField("Location");
-                                currentUrl = new URL(currentUrl, loc);
-                                continue;
-                            }
-                            finally
-                            {
-                                huc.disconnect();
-                            }
-                        }
-                    }
-
-                    return c.getInputStream();
-                }
-                throw new IOException("Too many redirects while trying to fetch " + url);
-            }
-
-            private void process(ModContainer mod, URL url)
-            {
-                try
-                {
-                    log.info("[{}] Starting version check at {}", mod.getModId(), url.toString());
-                    Status status = PENDING;
-                    ComparableVersion target = null;
-
-                    InputStream con = openUrlStream(url);
-                    String data = new String(ByteStreams.toByteArray(con), "UTF-8");
-                    con.close();
-
-                    log.debug("[{}] Received version check data:\n{}", mod.getModId(), data);
-
-
-                    @SuppressWarnings("unchecked")
-                    Map<String, Object> json = new Gson().fromJson(data, Map.class);
-                    @SuppressWarnings("unchecked")
-                    Map<String, String> promos = (Map<String, String>)json.get("promos");
-                    String display_url = (String)json.get("homepage");
-
-                    String rec = promos.get(MinecraftForge.MC_VERSION + "-recommended");
-                    String lat = promos.get(MinecraftForge.MC_VERSION + "-latest");
-                    ComparableVersion current = new ComparableVersion(mod.getVersion());
-
-                    if (rec != null)
-                    {
-                        ComparableVersion recommended = new ComparableVersion(rec);
-                        int diff = recommended.compareTo(current);
-
-                        if (diff == 0)
-                            status = UP_TO_DATE;
-                        else if (diff < 0)
-                        {
-                            status = AHEAD;
-                            if (lat != null)
-                            {
-                                ComparableVersion latest = new ComparableVersion(lat);
-                                if (current.compareTo(latest) < 0)
-                                {
-                                    status = OUTDATED;
-                                    target = latest;
-                                }
-                            }
-                        }
-                        else
-                        {
-                            status = OUTDATED;
-                            target = recommended;
-                        }
-                    }
-                    else if (lat != null)
-                    {
-                        ComparableVersion latest = new ComparableVersion(lat);
-                        if (current.compareTo(latest) < 0)
-                        {
-                            status = BETA_OUTDATED;
-                            target = latest;
-                        }
-                        else
-                            status = BETA;
-                    }
-                    else
-                        status = BETA;
-
-                    log.info("[{}] Found status: {} Target: {}", mod.getModId(), status, target);
-
-                    Map<ComparableVersion, String> changes = new LinkedHashMap<ComparableVersion, String>();
-                    @SuppressWarnings("unchecked")
-                    Map<String, String> tmp = (Map<String, String>)json.get(MinecraftForge.MC_VERSION);
-                    if (tmp != null)
-                    {
-                        List<ComparableVersion> ordered = new ArrayList<ComparableVersion>();
-                        for (String key : tmp.keySet())
-                        {
-                            ComparableVersion ver = new ComparableVersion(key);
-                            if (ver.compareTo(current) > 0 && (target == null || ver.compareTo(target) < 1))
-                            {
-                                ordered.add(ver);
-                            }
-                        }
-                        Collections.sort(ordered);
-
-                        for (ComparableVersion ver : ordered)
-                        {
-                            changes.put(ver, tmp.get(ver.toString()));
-                        }
-                    }
-                    if (mod instanceof InjectedModContainer)
-                        mod = ((InjectedModContainer)mod).wrappedContainer;
-                    results.put(mod, new CheckResult(status, target, changes, display_url));
-                }
-                catch (Exception e)
-                {
-                    log.debug("Failed to process update information", e);
-                    status = FAILED;
-                }
-            }
-        }.start();
-    }
-
     // Gather a list of mods that have opted in to this update system by providing a URL.
     public static Map<ModContainer, URL> gatherMods()
     {
