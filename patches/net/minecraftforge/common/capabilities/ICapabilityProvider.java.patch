--- ../src-base/minecraft/net/minecraftforge/common/capabilities/ICapabilityProvider.java
+++ ../src-work/minecraft/net/minecraftforge/common/capabilities/ICapabilityProvider.java
@@ -1,6 +1,6 @@
 /*
  * Minecraft Forge
- * Copyright (c) 2016-2018.
+ * Copyright (c) 2016.
  *
  * This library is free software; you can redistribute it and/or
  * modify it under the terms of the GNU Lesser General Public
@@ -19,50 +19,39 @@
 
 package net.minecraftforge.common.capabilities;
 
-import java.util.Map;
+import net.minecraft.util.EnumFacing;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
-import net.minecraft.util.EnumFacing;
-
 public interface ICapabilityProvider
 {
     /**
      * Determines if this object has support for the capability in question on the specific side.
-     * The return value of this MIGHT change during runtime if this object gains or loses support
-     * for a capability. It is not required to call this function before calling 
-     * {@link #getCapability(Capability, EnumFacing)}.
-     * <p>
-     * Basically, this method functions analogously to {@link Map#containsKey(Object)}.
-     * <p>
-     * <em>Example:</em>
-     *   A Pipe getting a cover placed on one side causing it lose the Inventory attachment function for that side.
-     * </p><p>
+     * The return value of this MIGHT change during runtime if this object gains or looses support
+     * for a capability.
+     *
+     * Example:
+     *   A Pipe getting a cover placed on one side causing it loose the Inventory attachment function for that side.
+     *
      * This is a light weight version of getCapability, intended for metadata uses.
-     * </p>
+     *
      * @param capability The capability to check
      * @param facing The Side to check from:
      *   CAN BE NULL. Null is defined to represent 'internal' or 'self'
-     * @return True if this object supports the capability. If true, then {@link #getCapability(Capability, EnumFacing)} 
-     * must not return null.
+     * @return True if this object supports the capability.
      */
     boolean hasCapability(@Nonnull Capability<?> capability, @Nullable EnumFacing facing);
 
     /**
      * Retrieves the handler for the capability requested on the specific side.
-     * <ul>
-     * <li>The return value <strong>CAN</strong> be null if the object does not support the capability.</il>
-     * <li>The return value <strong>CAN</strong> be the same for multiple faces.</li>
-     * </ul>
-     * <p>
-     * Basically, this method functions analogously to {@link Map#get(Object)}.
+     * The return value CAN be null if the object does not support the capability.
+     * The return value CAN be the same for multiple faces.
      *
      * @param capability The capability to check
-     * @param facing The Side to check from, 
-     *   <strong>CAN BE NULL</strong>. Null is defined to represent 'internal' or 'self'
-     * @return The requested capability. Must <strong>NOT</strong> be null when {@link #hasCapability(Capability, EnumFacing)} 
-     * would return true. 
+     * @param facing The Side to check from:
+     *   CAN BE NULL. Null is defined to represent 'internal' or 'self'
+     * @return The requested capability. Returns null when {@link #hasCapability(Capability, EnumFacing)} would return false.
      */
     @Nullable
     <T> T getCapability(@Nonnull Capability<T> capability, @Nullable EnumFacing facing);
